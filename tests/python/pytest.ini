# tests/python/pytest.ini
# Comprehensive configuration for pytest in the Advanced Sorting Algorithm Visualization Platform

[pytest]
# Test discovery paths - restrict to Python test directories
testpaths = 
    tests/python

# Python patterns for test identification
python_files = *_test.py
python_classes = Test*
python_functions = test_*

# Define custom markers for precise test categorization
markers =
    # Algorithm category markers
    comparison: Tests for comparison-based sorting algorithms (bubble, merge, quick, etc.)
    distribution: Tests for distribution sorting algorithms (counting, radix, bucket, etc.)
    network: Tests for network/parallel sorting algorithms (bitonic, odd-even merge, etc.)
    special: Tests for special-case sorting algorithms (pancake, bogo, etc.)
    selection: Tests for selection algorithms (quick select, median of medians)
    
    # Test type markers
    unit: Unit tests for isolated components
    integration: Tests for component interaction
    performance: Performance benchmarks and optimization tests
    visual: Tests for visualization correctness
    instrumentation: Tests for algorithm instrumentation
    
    # Algorithm characteristics markers
    stable: Tests focusing on stability characteristics
    inplace: Tests focusing on in-place operation
    adaptive: Tests for adaptive behavior
    
    # Data-specific markers
    small_data: Tests with small arrays (<100 elements)
    large_data: Tests with large arrays (>10000 elements)
    edge_case: Tests for edge cases (empty arrays, single element, etc.)
    adversarial: Tests with adversarial inputs

# Configure test execution behavior
xvs = yes                      # Show extra test summary info
color = yes                    # Force colored output for better readability
console_output_style = classic # Use classic output style
log_cli = true                 # Display logs in console during test execution
log_cli_level = INFO           # Set CLI log level
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Configure timeout protection (algorithms like bogo sort may run indefinitely)
timeout = 60                   # 60 seconds global timeout
timeout_method = thread        # Use threading-based timeout

# Additional pytest options
addopts = 
    --strict-markers           # Ensure all markers are registered
    -v                         # Verbose output
    --durations=10             # Show 10 slowest tests
    --maxfail=5                # Stop after 5 failures
    --showlocals               # Show local variables in tracebacks
    --cov=python               # Enable coverage reporting
    --cov-report=term          # Output coverage report to terminal
    --cov-branch               # Measure branch coverage
    --no-cov-on-fail           # Don't report coverage if tests fail
