{"ast":null,"code":"// src/utils/python-js-bridge.js\n\n/**\n * @file Python-JavaScript Communication Bridge\n * @module PythonJSBridge\n * @author Algorithm Visualization Platform Team\n * @version 2.1.0\n * \n * @description\n * A sophisticated bidirectional communication bridge between JavaScript frontend and Python\n * backend for algorithm visualization. This module enables seamless execution of Python-implemented\n * algorithms within the JavaScript environment, facilitating educational comparison of\n * language-specific algorithm implementations.\n * \n * The bridge implements a client-server architecture with HTTP/WebSocket communication,\n * JSON-based state serialization, and comprehensive error handling. It is designed to\n * support the visualization and analysis of complex algorithm execution across language\n * boundaries while maintaining performance monitoring capabilities.\n * \n * Architecture:\n * - Communication Layer: Asynchronous HTTP requests with WebSocket fallback\n * - Serialization Layer: Bidirectional state transformation with schema validation\n * - Execution Layer: Algorithm invocation with comprehensive instrumentation\n * - Analysis Layer: Cross-language performance metrics and comparison\n * \n * Design Principles:\n * - Language Boundary Transparency: Abstract away language differences\n * - Execution Fidelity: Preserve algorithmic behavior across implementations\n * - Instrumentation Non-interference: Minimize measurement impact\n * - Serialization Efficiency: Optimize state transfer for visualization\n */\n\n/**\n * Serialization utilities for cross-language state transformation\n * @private\n */\nclass StateSerializer {\n  /**\n   * Convert JavaScript camelCase objects to Python snake_case\n   * @param {Object} jsObject - Object with JavaScript-style property names\n   * @returns {Object} Equivalent object with Python-style property names\n   */\n  static toPythonFormat(jsObject) {\n    if (jsObject === null || typeof jsObject !== 'object') {\n      return jsObject;\n    }\n    if (Array.isArray(jsObject)) {\n      return jsObject.map(item => this.toPythonFormat(item));\n    }\n    const pythonObject = {};\n    for (const [key, value] of Object.entries(jsObject)) {\n      // Convert camelCase to snake_case\n      const pythonKey = key.replace(/([A-Z])/g, '_$1').toLowerCase();\n      pythonObject[pythonKey] = this.toPythonFormat(value);\n    }\n    return pythonObject;\n  }\n\n  /**\n   * Convert Python snake_case objects to JavaScript camelCase\n   * @param {Object} pythonObject - Object with Python-style property names\n   * @returns {Object} Equivalent object with JavaScript-style property names\n   */\n  static toJavaScriptFormat(pythonObject) {\n    if (pythonObject === null || typeof pythonObject !== 'object') {\n      return pythonObject;\n    }\n    if (Array.isArray(pythonObject)) {\n      return pythonObject.map(item => this.toJavaScriptFormat(item));\n    }\n    const jsObject = {};\n    for (const [key, value] of Object.entries(pythonObject)) {\n      // Convert snake_case to camelCase\n      const jsKey = key.replace(/_([a-z])/g, (_, character) => character.toUpperCase());\n      jsObject[jsKey] = this.toJavaScriptFormat(value);\n    }\n    return jsObject;\n  }\n\n  /**\n   * Validate structure of Python response against expected schema\n   * @param {Object} response - Response object from Python\n   * @param {Array<string>} requiredFields - Required fields in the response\n   * @throws {Error} If validation fails\n   */\n  static validateResponse(response, requiredFields) {\n    for (const field of requiredFields) {\n      if (response[field] === undefined) {\n        throw new Error(`Invalid response: missing required field '${field}'`);\n      }\n    }\n  }\n\n  /**\n   * Optimize array data for transmission by using compact representation\n   * @param {Array} array - Array of numbers\n   * @returns {Object} Compact representation of the array\n   */\n  static optimizeArrayData(array) {\n    if (!array || !array.length) return array;\n\n    // For small arrays, just return the original array\n    if (array.length < 1000) return array;\n\n    // For large arrays of numbers, use TypedArray binary representation\n    if (array.every(item => typeof item === 'number')) {\n      const typedArray = new Float64Array(array);\n      return {\n        type: 'typedarray',\n        data: typedArray.buffer,\n        length: array.length\n      };\n    }\n    return array;\n  }\n\n  /**\n   * Reconstruct array from optimized representation\n   * @param {Object|Array} optimized - Optimized array representation\n   * @returns {Array} Original array\n   */\n  static reconstructArray(optimized) {\n    if (!optimized || !optimized.type) return optimized;\n    if (optimized.type === 'typedarray') {\n      return Array.from(new Float64Array(optimized.data));\n    }\n    return optimized;\n  }\n}\n\n/**\n * Network communication layer for Python-JavaScript interaction\n * @private\n */\nclass CommunicationLayer {\n  /**\n   * Create a communication layer instance\n   * @param {Object} options - Configuration options\n   * @param {string} options.serverUrl - URL of the Python bridge server\n   * @param {number} options.timeout - Request timeout in milliseconds\n   * @param {boolean} options.useWebSockets - Whether to use WebSockets when available\n   */\n  constructor(options) {\n    this.serverUrl = options.serverUrl || 'http://localhost:5000/api';\n    this.timeout = options.timeout || 30000;\n    this.useWebSockets = options.useWebSockets !== false;\n    this.websocket = null;\n    this.websocketReady = false;\n    this.pendingRequests = new Map();\n    this.requestCounter = 0;\n    if (this.useWebSockets) {\n      this.initWebSocket();\n    }\n  }\n\n  /**\n   * Initialize WebSocket connection if supported and enabled\n   * @private\n   */\n  initWebSocket() {\n    try {\n      const wsUrl = this.serverUrl.replace(/^http/, 'ws') + '/ws';\n      this.websocket = new WebSocket(wsUrl);\n      this.websocket.onopen = () => {\n        this.websocketReady = true;\n        console.debug('WebSocket connection established');\n      };\n      this.websocket.onmessage = event => {\n        try {\n          const response = JSON.parse(event.data);\n          const requestId = response.requestId;\n          if (requestId && this.pendingRequests.has(requestId)) {\n            const {\n              resolve,\n              reject\n            } = this.pendingRequests.get(requestId);\n            this.pendingRequests.delete(requestId);\n            if (response.error) {\n              reject(new Error(response.error));\n            } else {\n              resolve(response.data);\n            }\n          }\n        } catch (error) {\n          console.error('Error processing WebSocket message:', error);\n        }\n      };\n      this.websocket.onerror = error => {\n        console.error('WebSocket error:', error);\n        this.websocketReady = false;\n      };\n      this.websocket.onclose = () => {\n        this.websocketReady = false;\n        console.debug('WebSocket connection closed');\n\n        // Retry WebSocket connection after delay\n        setTimeout(() => this.initWebSocket(), 5000);\n      };\n    } catch (error) {\n      console.error('Failed to initialize WebSocket:', error);\n      this.useWebSockets = false;\n    }\n  }\n\n  /**\n   * Send a request to the Python server\n   * @param {string} endpoint - API endpoint\n   * @param {Object} data - Request payload\n   * @returns {Promise<Object>} Response from server\n   * @throws {Error} If communication fails\n   */\n  async sendRequest(endpoint, data) {\n    // Try WebSocket if available\n    if (this.useWebSockets && this.websocketReady) {\n      try {\n        return await this.sendWebSocketRequest(endpoint, data);\n      } catch (wsError) {\n        console.warn('WebSocket request failed, falling back to HTTP:', wsError);\n        // Fall back to HTTP on WebSocket failure\n      }\n    }\n\n    // Use HTTP request\n    return this.sendHttpRequest(endpoint, data);\n  }\n\n  /**\n   * Send request via WebSocket\n   * @param {string} endpoint - API endpoint\n   * @param {Object} data - Request payload\n   * @returns {Promise<Object>} Response from server\n   * @private\n   */\n  async sendWebSocketRequest(endpoint, data) {\n    const requestId = ++this.requestCounter;\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        this.pendingRequests.delete(requestId);\n        reject(new Error('WebSocket request timeout'));\n      }, this.timeout);\n      this.pendingRequests.set(requestId, {\n        resolve: data => {\n          clearTimeout(timeoutId);\n          resolve(data);\n        },\n        reject: error => {\n          clearTimeout(timeoutId);\n          reject(error);\n        }\n      });\n      const message = JSON.stringify({\n        requestId,\n        endpoint,\n        data\n      });\n      this.websocket.send(message);\n    });\n  }\n\n  /**\n   * Send request via HTTP\n   * @param {string} endpoint - API endpoint\n   * @param {Object} data - Request payload\n   * @returns {Promise<Object>} Response from server\n   * @private\n   */\n  async sendHttpRequest(endpoint, data) {\n    const url = `${this.serverUrl}/${endpoint}`;\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP error ${response.status}: ${errorText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        throw new Error(`Request to ${endpoint} timed out after ${this.timeout}ms`);\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * Algorithm execution environment with cross-language capabilities\n * @private\n */\nclass AlgorithmExecutor {\n  /**\n   * Create an algorithm executor\n   * @param {CommunicationLayer} communicationLayer - Communication layer for Python execution\n   * @param {Object} options - Configuration options\n   */\n  constructor(communicationLayer, options = {}) {\n    this.communicationLayer = communicationLayer;\n    this.options = {\n      recordHistory: true,\n      recordMetrics: true,\n      timeoutMultiplier: 10,\n      ...options\n    };\n\n    // Map of algorithm names to Python module/class names\n    this.algorithmMapping = {\n      // Comparison-based algorithms\n      'bubble-sort': {\n        module: 'comparison.bubble_sort',\n        class: 'BubbleSort'\n      },\n      'cocktail-shaker-sort': {\n        module: 'comparison.cocktail_shaker_sort',\n        class: 'CocktailShakerSort'\n      },\n      'comb-sort': {\n        module: 'comparison.comb_sort',\n        class: 'CombSort'\n      },\n      'cycle-sort': {\n        module: 'comparison.cycle_sort',\n        class: 'CycleSort'\n      },\n      'gnome-sort': {\n        module: 'comparison.gnome_sort',\n        class: 'GnomeSort'\n      },\n      'heap-sort': {\n        module: 'comparison.heap_sort',\n        class: 'HeapSort'\n      },\n      'insertion-sort': {\n        module: 'comparison.insertion_sort',\n        class: 'InsertionSort'\n      },\n      'binary-insertion-sort': {\n        module: 'comparison.binary_insertion_sort',\n        class: 'BinaryInsertionSort'\n      },\n      'intro-sort': {\n        module: 'comparison.intro_sort',\n        class: 'IntroSort'\n      },\n      'merge-sort': {\n        module: 'comparison.merge_sort',\n        class: 'MergeSort'\n      },\n      'odd-even-sort': {\n        module: 'comparison.odd_even_sort',\n        class: 'OddEvenSort'\n      },\n      'quick-sort': {\n        module: 'comparison.quick_sort',\n        class: 'QuickSort'\n      },\n      'selection-sort': {\n        module: 'comparison.selection_sort',\n        class: 'SelectionSort'\n      },\n      'shell-sort': {\n        module: 'comparison.shell_sort',\n        class: 'ShellSort'\n      },\n      'tim-sort': {\n        module: 'comparison.tim_sort',\n        class: 'TimSort'\n      },\n      // Distribution algorithms\n      'bucket-sort': {\n        module: 'distribution.bucket_sort',\n        class: 'BucketSort'\n      },\n      'counting-sort': {\n        module: 'distribution.counting_sort',\n        class: 'CountingSort'\n      },\n      'pigeonhole-sort': {\n        module: 'distribution.pigeonhole_sort',\n        class: 'PigeonholeSort'\n      },\n      'radix-sort': {\n        module: 'distribution.radix_sort',\n        class: 'RadixSort'\n      },\n      // Network algorithms\n      'bitonic-sort': {\n        module: 'network.bitonic_sort',\n        class: 'BitonicSort'\n      },\n      'odd-even-merge-sort': {\n        module: 'network.odd_even_merge_sort',\n        class: 'OddEvenMergeSort'\n      },\n      // Special algorithms\n      'bogo-sort': {\n        module: 'special.bogo_sort',\n        class: 'BogoSort'\n      },\n      'pancake-sort': {\n        module: 'special.pancake_sort',\n        class: 'PancakeSort'\n      },\n      // Selection algorithms\n      'quick-select': {\n        module: 'selection.quick_select',\n        class: 'QuickSelect'\n      },\n      'median-of-medians': {\n        module: 'selection.median_of_medians',\n        class: 'MedianOfMedians'\n      }\n    };\n  }\n\n  /**\n   * Execute a Python algorithm implementation\n   * @param {string} algorithmName - Name of the algorithm to execute\n   * @param {Array} data - Input data array\n   * @param {Object} options - Algorithm options\n   * @returns {Promise<Object>} Execution results with sorted array and metrics\n   * @throws {Error} If execution fails\n   */\n  async executeAlgorithm(algorithmName, data, options = {}) {\n    const mapping = this.algorithmMapping[algorithmName];\n    if (!mapping) {\n      throw new Error(`Unknown algorithm: ${algorithmName}`);\n    }\n\n    // Determine timeout based on input size and algorithm\n    const timeout = this.calculateTimeout(algorithmName, data.length);\n\n    // Prepare execution options\n    const executionOptions = {\n      ...this.options,\n      ...options,\n      timeout\n    };\n\n    // Convert options to Python format\n    const pythonOptions = StateSerializer.toPythonFormat(executionOptions);\n\n    // Prepare request payload\n    const payload = {\n      algorithm: {\n        module: mapping.module,\n        class: mapping.class\n      },\n      data: StateSerializer.optimizeArrayData(data),\n      options: pythonOptions\n    };\n    try {\n      // Send execution request\n      const response = await this.communicationLayer.sendRequest('execute', payload);\n\n      // Validate response\n      StateSerializer.validateResponse(response, ['result', 'metrics']);\n\n      // Convert response to JavaScript format\n      return StateSerializer.toJavaScriptFormat(response);\n    } catch (error) {\n      throw new Error(`Failed to execute algorithm ${algorithmName}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Calculate an appropriate timeout for algorithm execution\n   * @param {string} algorithmName - Name of the algorithm\n   * @param {number} dataSize - Size of the input data\n   * @returns {number} Timeout in milliseconds\n   * @private\n   */\n  calculateTimeout(algorithmName, dataSize) {\n    // Base timeout\n    let baseTimeout = 30000; // 30 seconds\n\n    // Adjust for algorithm complexity\n    const complexityMultipliers = {\n      'bogo-sort': 0.1,\n      // Very restricted timeout for bogosort\n      'bubble-sort': 1.5,\n      // O(n²)\n      'selection-sort': 1.5,\n      // O(n²)\n      'insertion-sort': 1.5,\n      // O(n²)\n      'cocktail-shaker-sort': 1.5,\n      // O(n²)\n      'gnome-sort': 1.5,\n      // O(n²)\n      'quick-sort': 1.0,\n      // O(n log n) average\n      'merge-sort': 1.0,\n      // O(n log n)\n      'heap-sort': 1.0,\n      // O(n log n)\n      'tim-sort': 0.8,\n      // O(n log n) with optimizations\n      'counting-sort': 0.5,\n      // O(n+k)\n      'radix-sort': 0.7 // O(d*n)\n    };\n    const multiplier = complexityMultipliers[algorithmName] || 1.0;\n\n    // Scale timeout based on data size\n    // Use different scaling functions based on algorithm complexity\n    let sizeAdjustedTimeout;\n    if (['bogo-sort'].includes(algorithmName)) {\n      // Very restricted for exponential algorithms\n      sizeAdjustedTimeout = baseTimeout * Math.min(1.0, 10 / dataSize);\n    } else if (['bubble-sort', 'selection-sort', 'insertion-sort', 'cocktail-shaker-sort', 'gnome-sort'].includes(algorithmName)) {\n      // Quadratic algorithms: scale with n²\n      const scaleFactor = Math.pow(dataSize / 1000, 2);\n      sizeAdjustedTimeout = baseTimeout * Math.min(10, 1 + scaleFactor);\n    } else {\n      // For n log n algorithms and better\n      const scaleFactor = dataSize / 1000 * Math.log10(Math.max(dataSize, 10));\n      sizeAdjustedTimeout = baseTimeout * Math.min(5, 1 + scaleFactor / 10);\n    }\n    return Math.ceil(sizeAdjustedTimeout * multiplier * this.options.timeoutMultiplier);\n  }\n}\n\n/**\n * Performance analysis utilities for cross-language algorithm comparison\n * @private\n */\nclass PerformanceAnalyzer {\n  /**\n   * Analyze performance differences between JavaScript and Python implementations\n   * @param {Object} jsMetrics - JavaScript performance metrics\n   * @param {Object} pyMetrics - Python performance metrics\n   * @returns {Object} Detailed performance comparison\n   */\n  static compareImplementations(jsMetrics, pyMetrics) {\n    // Convert Python time to milliseconds (if it's in seconds)\n    const pyTimeInMs = pyMetrics.executionTime < 10 ? pyMetrics.executionTime * 1000 : pyMetrics.executionTime;\n\n    // Calculate speed ratio\n    const speedRatio = jsMetrics.executionTime / pyTimeInMs;\n\n    // Determine which implementation is faster\n    const fasterImplementation = speedRatio < 1 ? 'python' : 'javascript';\n    const speedDifference = speedRatio < 1 ? 1 / speedRatio : speedRatio;\n\n    // Compare operation counts\n    const operationComparison = {\n      comparisons: {\n        js: jsMetrics.comparisons,\n        py: pyMetrics.comparisons,\n        difference: jsMetrics.comparisons - pyMetrics.comparisons,\n        percentageDiff: this.calculatePercentageDifference(jsMetrics.comparisons, pyMetrics.comparisons)\n      },\n      swaps: {\n        js: jsMetrics.swaps,\n        py: pyMetrics.swaps,\n        difference: jsMetrics.swaps - pyMetrics.swaps,\n        percentageDiff: this.calculatePercentageDifference(jsMetrics.swaps, pyMetrics.swaps)\n      },\n      memoryAccesses: {\n        js: jsMetrics.memoryAccesses || jsMetrics.reads + jsMetrics.writes,\n        py: pyMetrics.memoryAccesses || pyMetrics.reads + pyMetrics.writes,\n        difference: (jsMetrics.memoryAccesses || jsMetrics.reads + jsMetrics.writes) - (pyMetrics.memoryAccesses || pyMetrics.reads + pyMetrics.writes),\n        percentageDiff: this.calculatePercentageDifference(jsMetrics.memoryAccesses || jsMetrics.reads + jsMetrics.writes, pyMetrics.memoryAccesses || pyMetrics.reads + pyMetrics.writes)\n      }\n    };\n\n    // Return comprehensive comparison\n    return {\n      executionTime: {\n        js: jsMetrics.executionTime,\n        py: pyTimeInMs,\n        difference: jsMetrics.executionTime - pyTimeInMs,\n        percentageDiff: this.calculatePercentageDifference(jsMetrics.executionTime, pyTimeInMs)\n      },\n      speedRatio,\n      fasterImplementation,\n      speedDifference: speedDifference.toFixed(2) + 'x',\n      operations: operationComparison,\n      summary: this.generatePerformanceSummary(fasterImplementation, speedDifference, operationComparison)\n    };\n  }\n\n  /**\n   * Calculate percentage difference between two values\n   * @param {number} a - First value\n   * @param {number} b - Second value\n   * @returns {number} Percentage difference\n   * @private\n   */\n  static calculatePercentageDifference(a, b) {\n    if (a === b) return 0;\n    if (a === 0 || b === 0) return a === 0 ? -100 : 100;\n    const avg = (a + b) / 2;\n    return (a - b) / avg * 100;\n  }\n\n  /**\n   * Generate a human-readable performance summary\n   * @param {string} fasterImpl - Identifier of faster implementation\n   * @param {number} speedDiff - Speed difference factor\n   * @param {Object} operations - Operation count comparison\n   * @returns {string} Human-readable summary\n   * @private\n   */\n  static generatePerformanceSummary(fasterImpl, speedDiff, operations) {\n    const comparisonEfficiency = operations.comparisons.percentageDiff;\n    const memoryEfficiency = operations.memoryAccesses.percentageDiff;\n    let summary = `The ${fasterImpl} implementation is approximately ${speedDiff.toFixed(2)}x faster. `;\n    if (Math.abs(comparisonEfficiency) > 10) {\n      summary += `It performs ${Math.abs(comparisonEfficiency).toFixed(0)}% ${comparisonEfficiency > 0 ? 'more' : 'fewer'} comparisons. `;\n    }\n    if (Math.abs(memoryEfficiency) > 10) {\n      summary += `It makes ${Math.abs(memoryEfficiency).toFixed(0)}% ${memoryEfficiency > 0 ? 'more' : 'fewer'} memory accesses.`;\n    }\n    return summary;\n  }\n}\n\n/**\n * Error handling and validation utilities for the bridge\n * @private\n */\nclass BridgeErrorHandler {\n  /**\n   * Process an error to create a structured error object\n   * @param {Error} error - Original error\n   * @param {string} context - Error context\n   * @returns {Object} Structured error object\n   */\n  static processError(error, context) {\n    // Determine error category\n    const category = this.categorizeError(error);\n\n    // Create structured error object\n    return {\n      category,\n      context,\n      message: error.message,\n      originalError: error,\n      timestamp: new Date().toISOString(),\n      recoverable: this.isRecoverable(category)\n    };\n  }\n\n  /**\n   * Categorize an error based on its properties\n   * @param {Error} error - Error to categorize\n   * @returns {string} Error category\n   * @private\n   */\n  static categorizeError(error) {\n    const {\n      message\n    } = error;\n    if (message.includes('timeout') || message.includes('network') || message.includes('connection') || message.includes('HTTP error')) {\n      return this.ErrorCategories.COMMUNICATION;\n    }\n    if (message.includes('execution') || message.includes('algorithm') || message.includes('runtime')) {\n      return this.ErrorCategories.EXECUTION;\n    }\n    if (message.includes('serialize') || message.includes('parse') || message.includes('JSON')) {\n      return this.ErrorCategories.SERIALIZATION;\n    }\n    if (message.includes('validation') || message.includes('invalid') || message.includes('missing')) {\n      return this.ErrorCategories.VALIDATION;\n    }\n    return this.ErrorCategories.UNKNOWN;\n  }\n\n  /**\n   * Determine if an error is potentially recoverable\n   * @param {string} category - Error category\n   * @returns {boolean} Whether the error is potentially recoverable\n   * @private\n   */\n  static isRecoverable(category) {\n    // Communication errors might be temporary and recoverable\n    return category === this.ErrorCategories.COMMUNICATION;\n  }\n\n  /**\n   * Create a validation error\n   * @param {string} message - Error message\n   * @returns {Error} Validation error\n   */\n  static createValidationError(message) {\n    const error = new Error(`Validation error: ${message}`);\n    error.name = 'ValidationError';\n    return error;\n  }\n}\n\n/**\n * @class PythonJSBridge\n * @description High-performance communication bridge for executing Python algorithms in JavaScript\n */\n/**\n * Error categories for structured error handling\n * @enum {string}\n */\nBridgeErrorHandler.ErrorCategories = {\n  COMMUNICATION: 'communication',\n  EXECUTION: 'execution',\n  SERIALIZATION: 'serialization',\n  VALIDATION: 'validation',\n  UNKNOWN: 'unknown'\n};\nclass PythonJSBridge {\n  /**\n   * Create a new Python-JavaScript bridge\n   * @param {Object} options - Configuration options\n   * @param {string} [options.serverUrl='http://localhost:5000/api'] - URL of the Python bridge server\n   * @param {number} [options.timeout=30000] - Request timeout in milliseconds\n   * @param {boolean} [options.useWebSockets=true] - Whether to use WebSockets when available\n   * @param {boolean} [options.debug=false] - Enable debug logging\n   * @param {Object} [options.execution] - Algorithm execution options\n   * @param {boolean} [options.cacheResults=true] - Cache execution results for identical inputs\n   */\n  constructor(options = {}) {\n    this.options = {\n      serverUrl: 'http://localhost:5000/api',\n      timeout: 30000,\n      useWebSockets: true,\n      debug: false,\n      cacheResults: true,\n      ...options\n    };\n\n    // Initialize communication layer\n    this.communicationLayer = new CommunicationLayer({\n      serverUrl: this.options.serverUrl,\n      timeout: this.options.timeout,\n      useWebSockets: this.options.useWebSockets\n    });\n\n    // Initialize algorithm executor\n    this.algorithmExecutor = new AlgorithmExecutor(this.communicationLayer, {\n      recordHistory: true,\n      recordMetrics: true,\n      timeoutMultiplier: options.timeoutMultiplier || 1.0\n    });\n\n    // Initialize execution cache\n    this.executionCache = new Map();\n\n    // Log initialization status\n    if (this.options.debug) {\n      console.debug('PythonJSBridge initialized with options:', this.options);\n    }\n  }\n\n  /**\n   * Execute a Python algorithm implementation\n   * @param {string} algorithmName - Name of the algorithm to execute\n   * @param {Array} data - Input data array\n   * @param {Object} options - Algorithm options\n   * @returns {Promise<Object>} Execution results including sorted array and metrics\n   * @throws {Error} If execution fails\n   */\n  async executeAlgorithm(algorithmName, data, options = {}) {\n    try {\n      // Generate cache key for this execution\n      const cacheKey = this.generateCacheKey(algorithmName, data, options);\n\n      // Check cache if enabled\n      if (this.options.cacheResults && this.executionCache.has(cacheKey)) {\n        if (this.options.debug) {\n          console.debug(`Using cached result for ${algorithmName}`);\n        }\n        return this.executionCache.get(cacheKey);\n      }\n\n      // Log execution start\n      if (this.options.debug) {\n        console.debug(`Executing ${algorithmName} on ${data.length} elements`);\n        console.time(`${algorithmName}-execution`);\n      }\n\n      // Execute algorithm\n      const result = await this.algorithmExecutor.executeAlgorithm(algorithmName, data, options);\n\n      // Log execution complete\n      if (this.options.debug) {\n        console.timeEnd(`${algorithmName}-execution`);\n        console.debug(`${algorithmName} metrics:`, result.metrics);\n      }\n\n      // Cache result if enabled\n      if (this.options.cacheResults) {\n        this.executionCache.set(cacheKey, result);\n      }\n      return result;\n    } catch (error) {\n      // Process error for more structured handling\n      const processedError = BridgeErrorHandler.processError(error, 'algorithm-execution');\n\n      // Log error details\n      if (this.options.debug) {\n        console.error(`Error executing ${algorithmName}:`, processedError);\n      }\n      throw new Error(`Failed to execute ${algorithmName}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Compare JavaScript and Python implementations of the same algorithm\n   * @param {Object} jsAlgorithm - JavaScript algorithm instance\n   * @param {string} algorithmName - Algorithm name for Python mapping\n   * @param {Array} data - Input data array\n   * @param {Object} options - Algorithm options\n   * @returns {Promise<Object>} Comparison results\n   */\n  async compareImplementations(jsAlgorithm, algorithmName, data, options = {}) {\n    // Validate inputs\n    if (!jsAlgorithm || typeof jsAlgorithm.execute !== 'function') {\n      throw BridgeErrorHandler.createValidationError('Invalid JavaScript algorithm instance');\n    }\n    if (!algorithmName || typeof algorithmName !== 'string') {\n      throw BridgeErrorHandler.createValidationError('Invalid algorithm name');\n    }\n    if (!Array.isArray(data)) {\n      throw BridgeErrorHandler.createValidationError('Data must be an array');\n    }\n    try {\n      // Clone data to avoid mutations affecting comparisons\n      const inputData = [...data];\n      if (this.options.debug) {\n        console.debug(`Starting comparison of ${algorithmName} implementations`);\n        console.time('comparison-total');\n      }\n\n      // Execute JavaScript implementation\n      const jsStartTime = performance.now();\n      const jsResult = await Promise.resolve(jsAlgorithm.execute([...inputData], options));\n      const jsEndTime = performance.now();\n      const jsExecutionTime = jsEndTime - jsStartTime;\n      if (this.options.debug) {\n        console.debug(`JS ${algorithmName} completed in ${jsExecutionTime.toFixed(2)}ms`);\n      }\n\n      // Execute Python implementation\n      const pyResult = await this.executeAlgorithm(algorithmName, inputData, options);\n      if (this.options.debug) {\n        console.timeEnd('comparison-total');\n      }\n\n      // Get metrics\n      const jsMetrics = {\n        ...jsAlgorithm.metrics,\n        executionTime: jsExecutionTime\n      };\n\n      // Analyze performance difference\n      const performanceAnalysis = PerformanceAnalyzer.compareImplementations(jsMetrics, pyResult.metrics);\n\n      // Verify results match (both implementations produced same output)\n      const resultsMatch = this.compareArrays(jsResult, pyResult.result);\n\n      // Return comprehensive comparison report\n      return {\n        algorithm: algorithmName,\n        inputSize: data.length,\n        options: options,\n        javascript: {\n          result: jsResult,\n          metrics: jsMetrics,\n          history: jsAlgorithm.history || []\n        },\n        python: {\n          result: pyResult.result,\n          metrics: pyResult.metrics,\n          history: pyResult.history || []\n        },\n        performance: performanceAnalysis,\n        correctness: {\n          resultsMatch,\n          message: resultsMatch ? 'Both implementations produced identical results' : 'Implementations produced different results'\n        },\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      const processedError = BridgeErrorHandler.processError(error, 'implementation-comparison');\n      if (this.options.debug) {\n        console.error('Comparison failed:', processedError);\n      }\n      throw new Error(`Comparison failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Execute all steps of a Python algorithm to extract execution history\n   * @param {string} algorithmName - Name of the algorithm\n   * @param {Array} data - Input data array\n   * @param {Object} options - Algorithm options\n   * @returns {Promise<Array>} Execution history steps\n   */\n  async getAlgorithmHistory(algorithmName, data, options = {}) {\n    // Add history recording option\n    const executionOptions = {\n      ...options,\n      recordHistory: true\n    };\n    try {\n      // Execute algorithm\n      const result = await this.executeAlgorithm(algorithmName, data, executionOptions);\n\n      // Return the execution history\n      return result.history || [];\n    } catch (error) {\n      throw new Error(`Failed to get algorithm history: ${error.message}`);\n    }\n  }\n\n  /**\n   * Test Python server connection and API availability\n   * @returns {Promise<Object>} Connection test results\n   */\n  async testConnection() {\n    try {\n      const startTime = performance.now();\n      const response = await this.communicationLayer.sendRequest('ping', {\n        timestamp: startTime\n      });\n      const endTime = performance.now();\n      return {\n        success: true,\n        roundTripTime: endTime - startTime,\n        serverInfo: response.serverInfo || {},\n        algorithms: response.algorithms || []\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Generate a cache key for an algorithm execution\n   * @param {string} algorithmName - Algorithm name\n   * @param {Array} data - Input data\n   * @param {Object} options - Execution options\n   * @returns {string} Cache key\n   * @private\n   */\n  generateCacheKey(algorithmName, data, options) {\n    // For large arrays, use a hash of the data instead of the full array\n    const dataDigest = this.generateDataDigest(data);\n    const optionsString = JSON.stringify(options);\n    return `${algorithmName}:${dataDigest}:${optionsString}`;\n  }\n\n  /**\n   * Generate a digest of the data array for caching\n   * @param {Array} data - Input data array\n   * @returns {string} Data digest\n   * @private\n   */\n  generateDataDigest(data) {\n    if (!data || !data.length) return 'empty';\n    if (data.length <= 10) {\n      return JSON.stringify(data);\n    }\n\n    // For large arrays, use key statistical properties and samples\n    const firstTen = data.slice(0, 10);\n    const lastTen = data.slice(-10);\n\n    // Calculate basic statistics\n    const sum = data.reduce((acc, val) => acc + val, 0);\n    const mean = sum / data.length;\n\n    // Get min and max\n    const min = Math.min(...data);\n    const max = Math.max(...data);\n\n    // Calculate a simple hash from these properties\n    return `len:${data.length};mean:${mean.toFixed(2)};min:${min};max:${max};samples:${JSON.stringify([...firstTen, ...lastTen])}`;\n  }\n\n  /**\n   * Compare two arrays for equality\n   * @param {Array} arr1 - First array\n   * @param {Array} arr2 - Second array\n   * @returns {boolean} True if arrays are equal\n   * @private\n   */\n  compareArrays(arr1, arr2) {\n    if (!arr1 || !arr2) return false;\n    if (arr1.length !== arr2.length) return false;\n    for (let i = 0; i < arr1.length; i++) {\n      // Use approximate comparison for floating point values\n      if (typeof arr1[i] === 'number' && typeof arr2[i] === 'number') {\n        // Allow small floating point differences\n        if (Math.abs(arr1[i] - arr2[i]) > 1e-10) {\n          return false;\n        }\n      } else if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Clear the execution cache\n   */\n  clearCache() {\n    this.executionCache.clear();\n    if (this.options.debug) {\n      console.debug('Execution cache cleared');\n    }\n  }\n\n  /**\n   * Get the list of available Python algorithms\n   * @returns {Promise<Array<string>>} List of available algorithm names\n   */\n  async getAvailableAlgorithms() {\n    try {\n      const response = await this.communicationLayer.sendRequest('algorithms', {});\n      return response.algorithms || [];\n    } catch (error) {\n      throw new Error(`Failed to get available algorithms: ${error.message}`);\n    }\n  }\n}\nexport default PythonJSBridge;","map":{"version":3,"names":["StateSerializer","toPythonFormat","jsObject","Array","isArray","map","item","pythonObject","key","value","Object","entries","pythonKey","replace","toLowerCase","toJavaScriptFormat","jsKey","_","character","toUpperCase","validateResponse","response","requiredFields","field","undefined","Error","optimizeArrayData","array","length","every","typedArray","Float64Array","type","data","buffer","reconstructArray","optimized","from","CommunicationLayer","constructor","options","serverUrl","timeout","useWebSockets","websocket","websocketReady","pendingRequests","Map","requestCounter","initWebSocket","wsUrl","WebSocket","onopen","console","debug","onmessage","event","JSON","parse","requestId","has","resolve","reject","get","delete","error","onerror","onclose","setTimeout","sendRequest","endpoint","sendWebSocketRequest","wsError","warn","sendHttpRequest","Promise","timeoutId","set","clearTimeout","message","stringify","send","url","controller","AbortController","abort","fetch","method","headers","body","signal","ok","errorText","text","status","json","name","AlgorithmExecutor","communicationLayer","recordHistory","recordMetrics","timeoutMultiplier","algorithmMapping","module","class","executeAlgorithm","algorithmName","mapping","calculateTimeout","executionOptions","pythonOptions","payload","algorithm","dataSize","baseTimeout","complexityMultipliers","multiplier","sizeAdjustedTimeout","includes","Math","min","scaleFactor","pow","log10","max","ceil","PerformanceAnalyzer","compareImplementations","jsMetrics","pyMetrics","pyTimeInMs","executionTime","speedRatio","fasterImplementation","speedDifference","operationComparison","comparisons","js","py","difference","percentageDiff","calculatePercentageDifference","swaps","memoryAccesses","reads","writes","toFixed","operations","summary","generatePerformanceSummary","a","b","avg","fasterImpl","speedDiff","comparisonEfficiency","memoryEfficiency","abs","BridgeErrorHandler","processError","context","category","categorizeError","originalError","timestamp","Date","toISOString","recoverable","isRecoverable","ErrorCategories","COMMUNICATION","EXECUTION","SERIALIZATION","VALIDATION","UNKNOWN","createValidationError","PythonJSBridge","cacheResults","algorithmExecutor","executionCache","cacheKey","generateCacheKey","time","result","timeEnd","metrics","processedError","jsAlgorithm","execute","inputData","jsStartTime","performance","now","jsResult","jsEndTime","jsExecutionTime","pyResult","performanceAnalysis","resultsMatch","compareArrays","inputSize","javascript","history","python","correctness","getAlgorithmHistory","testConnection","startTime","endTime","success","roundTripTime","serverInfo","algorithms","dataDigest","generateDataDigest","optionsString","firstTen","slice","lastTen","sum","reduce","acc","val","mean","arr1","arr2","i","clearCache","clear","getAvailableAlgorithms"],"sources":["/Users/mohammadatashi/Documents/GitHub/Advanced-Algorithms-Laboratory/sorting-visualizer/src/utils/python-js-bridge.js"],"sourcesContent":["// src/utils/python-js-bridge.js\n\n/**\n * @file Python-JavaScript Communication Bridge\n * @module PythonJSBridge\n * @author Algorithm Visualization Platform Team\n * @version 2.1.0\n * \n * @description\n * A sophisticated bidirectional communication bridge between JavaScript frontend and Python\n * backend for algorithm visualization. This module enables seamless execution of Python-implemented\n * algorithms within the JavaScript environment, facilitating educational comparison of\n * language-specific algorithm implementations.\n * \n * The bridge implements a client-server architecture with HTTP/WebSocket communication,\n * JSON-based state serialization, and comprehensive error handling. It is designed to\n * support the visualization and analysis of complex algorithm execution across language\n * boundaries while maintaining performance monitoring capabilities.\n * \n * Architecture:\n * - Communication Layer: Asynchronous HTTP requests with WebSocket fallback\n * - Serialization Layer: Bidirectional state transformation with schema validation\n * - Execution Layer: Algorithm invocation with comprehensive instrumentation\n * - Analysis Layer: Cross-language performance metrics and comparison\n * \n * Design Principles:\n * - Language Boundary Transparency: Abstract away language differences\n * - Execution Fidelity: Preserve algorithmic behavior across implementations\n * - Instrumentation Non-interference: Minimize measurement impact\n * - Serialization Efficiency: Optimize state transfer for visualization\n */\n\n/**\n * Serialization utilities for cross-language state transformation\n * @private\n */\nclass StateSerializer {\n  /**\n   * Convert JavaScript camelCase objects to Python snake_case\n   * @param {Object} jsObject - Object with JavaScript-style property names\n   * @returns {Object} Equivalent object with Python-style property names\n   */\n  static toPythonFormat(jsObject) {\n    if (jsObject === null || typeof jsObject !== 'object') {\n      return jsObject;\n    }\n    \n    if (Array.isArray(jsObject)) {\n      return jsObject.map(item => this.toPythonFormat(item));\n    }\n    \n    const pythonObject = {};\n    \n    for (const [key, value] of Object.entries(jsObject)) {\n      // Convert camelCase to snake_case\n      const pythonKey = key.replace(/([A-Z])/g, '_$1').toLowerCase();\n      pythonObject[pythonKey] = this.toPythonFormat(value);\n    }\n    \n    return pythonObject;\n  }\n  \n  /**\n   * Convert Python snake_case objects to JavaScript camelCase\n   * @param {Object} pythonObject - Object with Python-style property names\n   * @returns {Object} Equivalent object with JavaScript-style property names\n   */\n  static toJavaScriptFormat(pythonObject) {\n    if (pythonObject === null || typeof pythonObject !== 'object') {\n      return pythonObject;\n    }\n    \n    if (Array.isArray(pythonObject)) {\n      return pythonObject.map(item => this.toJavaScriptFormat(item));\n    }\n    \n    const jsObject = {};\n    \n    for (const [key, value] of Object.entries(pythonObject)) {\n      // Convert snake_case to camelCase\n      const jsKey = key.replace(/_([a-z])/g, (_, character) => character.toUpperCase());\n      jsObject[jsKey] = this.toJavaScriptFormat(value);\n    }\n    \n    return jsObject;\n  }\n  \n  /**\n   * Validate structure of Python response against expected schema\n   * @param {Object} response - Response object from Python\n   * @param {Array<string>} requiredFields - Required fields in the response\n   * @throws {Error} If validation fails\n   */\n  static validateResponse(response, requiredFields) {\n    for (const field of requiredFields) {\n      if (response[field] === undefined) {\n        throw new Error(`Invalid response: missing required field '${field}'`);\n      }\n    }\n  }\n  \n  /**\n   * Optimize array data for transmission by using compact representation\n   * @param {Array} array - Array of numbers\n   * @returns {Object} Compact representation of the array\n   */\n  static optimizeArrayData(array) {\n    if (!array || !array.length) return array;\n    \n    // For small arrays, just return the original array\n    if (array.length < 1000) return array;\n    \n    // For large arrays of numbers, use TypedArray binary representation\n    if (array.every(item => typeof item === 'number')) {\n      const typedArray = new Float64Array(array);\n      return {\n        type: 'typedarray',\n        data: typedArray.buffer,\n        length: array.length\n      };\n    }\n    \n    return array;\n  }\n  \n  /**\n   * Reconstruct array from optimized representation\n   * @param {Object|Array} optimized - Optimized array representation\n   * @returns {Array} Original array\n   */\n  static reconstructArray(optimized) {\n    if (!optimized || !optimized.type) return optimized;\n    \n    if (optimized.type === 'typedarray') {\n      return Array.from(new Float64Array(optimized.data));\n    }\n    \n    return optimized;\n  }\n}\n\n/**\n * Network communication layer for Python-JavaScript interaction\n * @private\n */\nclass CommunicationLayer {\n  /**\n   * Create a communication layer instance\n   * @param {Object} options - Configuration options\n   * @param {string} options.serverUrl - URL of the Python bridge server\n   * @param {number} options.timeout - Request timeout in milliseconds\n   * @param {boolean} options.useWebSockets - Whether to use WebSockets when available\n   */\n  constructor(options) {\n    this.serverUrl = options.serverUrl || 'http://localhost:5000/api';\n    this.timeout = options.timeout || 30000;\n    this.useWebSockets = options.useWebSockets !== false;\n    this.websocket = null;\n    this.websocketReady = false;\n    this.pendingRequests = new Map();\n    this.requestCounter = 0;\n    \n    if (this.useWebSockets) {\n      this.initWebSocket();\n    }\n  }\n  \n  /**\n   * Initialize WebSocket connection if supported and enabled\n   * @private\n   */\n  initWebSocket() {\n    try {\n      const wsUrl = this.serverUrl.replace(/^http/, 'ws') + '/ws';\n      this.websocket = new WebSocket(wsUrl);\n      \n      this.websocket.onopen = () => {\n        this.websocketReady = true;\n        console.debug('WebSocket connection established');\n      };\n      \n      this.websocket.onmessage = (event) => {\n        try {\n          const response = JSON.parse(event.data);\n          const requestId = response.requestId;\n          \n          if (requestId && this.pendingRequests.has(requestId)) {\n            const { resolve, reject } = this.pendingRequests.get(requestId);\n            this.pendingRequests.delete(requestId);\n            \n            if (response.error) {\n              reject(new Error(response.error));\n            } else {\n              resolve(response.data);\n            }\n          }\n        } catch (error) {\n          console.error('Error processing WebSocket message:', error);\n        }\n      };\n      \n      this.websocket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        this.websocketReady = false;\n      };\n      \n      this.websocket.onclose = () => {\n        this.websocketReady = false;\n        console.debug('WebSocket connection closed');\n        \n        // Retry WebSocket connection after delay\n        setTimeout(() => this.initWebSocket(), 5000);\n      };\n    } catch (error) {\n      console.error('Failed to initialize WebSocket:', error);\n      this.useWebSockets = false;\n    }\n  }\n  \n  /**\n   * Send a request to the Python server\n   * @param {string} endpoint - API endpoint\n   * @param {Object} data - Request payload\n   * @returns {Promise<Object>} Response from server\n   * @throws {Error} If communication fails\n   */\n  async sendRequest(endpoint, data) {\n    // Try WebSocket if available\n    if (this.useWebSockets && this.websocketReady) {\n      try {\n        return await this.sendWebSocketRequest(endpoint, data);\n      } catch (wsError) {\n        console.warn('WebSocket request failed, falling back to HTTP:', wsError);\n        // Fall back to HTTP on WebSocket failure\n      }\n    }\n    \n    // Use HTTP request\n    return this.sendHttpRequest(endpoint, data);\n  }\n  \n  /**\n   * Send request via WebSocket\n   * @param {string} endpoint - API endpoint\n   * @param {Object} data - Request payload\n   * @returns {Promise<Object>} Response from server\n   * @private\n   */\n  async sendWebSocketRequest(endpoint, data) {\n    const requestId = ++this.requestCounter;\n    \n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        this.pendingRequests.delete(requestId);\n        reject(new Error('WebSocket request timeout'));\n      }, this.timeout);\n      \n      this.pendingRequests.set(requestId, {\n        resolve: (data) => {\n          clearTimeout(timeoutId);\n          resolve(data);\n        },\n        reject: (error) => {\n          clearTimeout(timeoutId);\n          reject(error);\n        }\n      });\n      \n      const message = JSON.stringify({\n        requestId,\n        endpoint,\n        data\n      });\n      \n      this.websocket.send(message);\n    });\n  }\n  \n  /**\n   * Send request via HTTP\n   * @param {string} endpoint - API endpoint\n   * @param {Object} data - Request payload\n   * @returns {Promise<Object>} Response from server\n   * @private\n   */\n  async sendHttpRequest(endpoint, data) {\n    const url = `${this.serverUrl}/${endpoint}`;\n    \n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n      \n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data),\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP error ${response.status}: ${errorText}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        throw new Error(`Request to ${endpoint} timed out after ${this.timeout}ms`);\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * Algorithm execution environment with cross-language capabilities\n * @private\n */\nclass AlgorithmExecutor {\n  /**\n   * Create an algorithm executor\n   * @param {CommunicationLayer} communicationLayer - Communication layer for Python execution\n   * @param {Object} options - Configuration options\n   */\n  constructor(communicationLayer, options = {}) {\n    this.communicationLayer = communicationLayer;\n    this.options = {\n      recordHistory: true,\n      recordMetrics: true,\n      timeoutMultiplier: 10,\n      ...options\n    };\n    \n    // Map of algorithm names to Python module/class names\n    this.algorithmMapping = {\n      // Comparison-based algorithms\n      'bubble-sort': { module: 'comparison.bubble_sort', class: 'BubbleSort' },\n      'cocktail-shaker-sort': { module: 'comparison.cocktail_shaker_sort', class: 'CocktailShakerSort' },\n      'comb-sort': { module: 'comparison.comb_sort', class: 'CombSort' },\n      'cycle-sort': { module: 'comparison.cycle_sort', class: 'CycleSort' },\n      'gnome-sort': { module: 'comparison.gnome_sort', class: 'GnomeSort' },\n      'heap-sort': { module: 'comparison.heap_sort', class: 'HeapSort' },\n      'insertion-sort': { module: 'comparison.insertion_sort', class: 'InsertionSort' },\n      'binary-insertion-sort': { module: 'comparison.binary_insertion_sort', class: 'BinaryInsertionSort' },\n      'intro-sort': { module: 'comparison.intro_sort', class: 'IntroSort' },\n      'merge-sort': { module: 'comparison.merge_sort', class: 'MergeSort' },\n      'odd-even-sort': { module: 'comparison.odd_even_sort', class: 'OddEvenSort' },\n      'quick-sort': { module: 'comparison.quick_sort', class: 'QuickSort' },\n      'selection-sort': { module: 'comparison.selection_sort', class: 'SelectionSort' },\n      'shell-sort': { module: 'comparison.shell_sort', class: 'ShellSort' },\n      'tim-sort': { module: 'comparison.tim_sort', class: 'TimSort' },\n      \n      // Distribution algorithms\n      'bucket-sort': { module: 'distribution.bucket_sort', class: 'BucketSort' },\n      'counting-sort': { module: 'distribution.counting_sort', class: 'CountingSort' },\n      'pigeonhole-sort': { module: 'distribution.pigeonhole_sort', class: 'PigeonholeSort' },\n      'radix-sort': { module: 'distribution.radix_sort', class: 'RadixSort' },\n      \n      // Network algorithms\n      'bitonic-sort': { module: 'network.bitonic_sort', class: 'BitonicSort' },\n      'odd-even-merge-sort': { module: 'network.odd_even_merge_sort', class: 'OddEvenMergeSort' },\n      \n      // Special algorithms\n      'bogo-sort': { module: 'special.bogo_sort', class: 'BogoSort' },\n      'pancake-sort': { module: 'special.pancake_sort', class: 'PancakeSort' },\n      \n      // Selection algorithms\n      'quick-select': { module: 'selection.quick_select', class: 'QuickSelect' },\n      'median-of-medians': { module: 'selection.median_of_medians', class: 'MedianOfMedians' }\n    };\n  }\n  \n  /**\n   * Execute a Python algorithm implementation\n   * @param {string} algorithmName - Name of the algorithm to execute\n   * @param {Array} data - Input data array\n   * @param {Object} options - Algorithm options\n   * @returns {Promise<Object>} Execution results with sorted array and metrics\n   * @throws {Error} If execution fails\n   */\n  async executeAlgorithm(algorithmName, data, options = {}) {\n    const mapping = this.algorithmMapping[algorithmName];\n    \n    if (!mapping) {\n      throw new Error(`Unknown algorithm: ${algorithmName}`);\n    }\n    \n    // Determine timeout based on input size and algorithm\n    const timeout = this.calculateTimeout(algorithmName, data.length);\n    \n    // Prepare execution options\n    const executionOptions = {\n      ...this.options,\n      ...options,\n      timeout\n    };\n    \n    // Convert options to Python format\n    const pythonOptions = StateSerializer.toPythonFormat(executionOptions);\n    \n    // Prepare request payload\n    const payload = {\n      algorithm: {\n        module: mapping.module,\n        class: mapping.class\n      },\n      data: StateSerializer.optimizeArrayData(data),\n      options: pythonOptions\n    };\n    \n    try {\n      // Send execution request\n      const response = await this.communicationLayer.sendRequest('execute', payload);\n      \n      // Validate response\n      StateSerializer.validateResponse(response, ['result', 'metrics']);\n      \n      // Convert response to JavaScript format\n      return StateSerializer.toJavaScriptFormat(response);\n    } catch (error) {\n      throw new Error(`Failed to execute algorithm ${algorithmName}: ${error.message}`);\n    }\n  }\n  \n  /**\n   * Calculate an appropriate timeout for algorithm execution\n   * @param {string} algorithmName - Name of the algorithm\n   * @param {number} dataSize - Size of the input data\n   * @returns {number} Timeout in milliseconds\n   * @private\n   */\n  calculateTimeout(algorithmName, dataSize) {\n    // Base timeout\n    let baseTimeout = 30000; // 30 seconds\n    \n    // Adjust for algorithm complexity\n    const complexityMultipliers = {\n      'bogo-sort': 0.1,            // Very restricted timeout for bogosort\n      'bubble-sort': 1.5,          // O(n²)\n      'selection-sort': 1.5,       // O(n²)\n      'insertion-sort': 1.5,       // O(n²)\n      'cocktail-shaker-sort': 1.5, // O(n²)\n      'gnome-sort': 1.5,           // O(n²)\n      'quick-sort': 1.0,           // O(n log n) average\n      'merge-sort': 1.0,           // O(n log n)\n      'heap-sort': 1.0,            // O(n log n)\n      'tim-sort': 0.8,             // O(n log n) with optimizations\n      'counting-sort': 0.5,        // O(n+k)\n      'radix-sort': 0.7            // O(d*n)\n    };\n    \n    const multiplier = complexityMultipliers[algorithmName] || 1.0;\n    \n    // Scale timeout based on data size\n    // Use different scaling functions based on algorithm complexity\n    let sizeAdjustedTimeout;\n    \n    if (['bogo-sort'].includes(algorithmName)) {\n      // Very restricted for exponential algorithms\n      sizeAdjustedTimeout = baseTimeout * Math.min(1.0, 10 / dataSize);\n    } else if (['bubble-sort', 'selection-sort', 'insertion-sort', 'cocktail-shaker-sort', 'gnome-sort'].includes(algorithmName)) {\n      // Quadratic algorithms: scale with n²\n      const scaleFactor = Math.pow(dataSize / 1000, 2);\n      sizeAdjustedTimeout = baseTimeout * Math.min(10, 1 + scaleFactor);\n    } else {\n      // For n log n algorithms and better\n      const scaleFactor = (dataSize / 1000) * Math.log10(Math.max(dataSize, 10));\n      sizeAdjustedTimeout = baseTimeout * Math.min(5, 1 + scaleFactor / 10);\n    }\n    \n    return Math.ceil(sizeAdjustedTimeout * multiplier * this.options.timeoutMultiplier);\n  }\n}\n\n/**\n * Performance analysis utilities for cross-language algorithm comparison\n * @private\n */\nclass PerformanceAnalyzer {\n  /**\n   * Analyze performance differences between JavaScript and Python implementations\n   * @param {Object} jsMetrics - JavaScript performance metrics\n   * @param {Object} pyMetrics - Python performance metrics\n   * @returns {Object} Detailed performance comparison\n   */\n  static compareImplementations(jsMetrics, pyMetrics) {\n    // Convert Python time to milliseconds (if it's in seconds)\n    const pyTimeInMs = pyMetrics.executionTime < 10 ? \n      pyMetrics.executionTime * 1000 : \n      pyMetrics.executionTime;\n    \n    // Calculate speed ratio\n    const speedRatio = jsMetrics.executionTime / pyTimeInMs;\n    \n    // Determine which implementation is faster\n    const fasterImplementation = speedRatio < 1 ? 'python' : 'javascript';\n    const speedDifference = speedRatio < 1 ? 1 / speedRatio : speedRatio;\n    \n    // Compare operation counts\n    const operationComparison = {\n      comparisons: {\n        js: jsMetrics.comparisons,\n        py: pyMetrics.comparisons,\n        difference: jsMetrics.comparisons - pyMetrics.comparisons,\n        percentageDiff: this.calculatePercentageDifference(\n          jsMetrics.comparisons, \n          pyMetrics.comparisons\n        )\n      },\n      swaps: {\n        js: jsMetrics.swaps,\n        py: pyMetrics.swaps,\n        difference: jsMetrics.swaps - pyMetrics.swaps,\n        percentageDiff: this.calculatePercentageDifference(\n          jsMetrics.swaps, \n          pyMetrics.swaps\n        )\n      },\n      memoryAccesses: {\n        js: jsMetrics.memoryAccesses || (jsMetrics.reads + jsMetrics.writes),\n        py: pyMetrics.memoryAccesses || (pyMetrics.reads + pyMetrics.writes),\n        difference: (jsMetrics.memoryAccesses || (jsMetrics.reads + jsMetrics.writes)) - \n                   (pyMetrics.memoryAccesses || (pyMetrics.reads + pyMetrics.writes)),\n        percentageDiff: this.calculatePercentageDifference(\n          jsMetrics.memoryAccesses || (jsMetrics.reads + jsMetrics.writes),\n          pyMetrics.memoryAccesses || (pyMetrics.reads + pyMetrics.writes)\n        )\n      }\n    };\n    \n    // Return comprehensive comparison\n    return {\n      executionTime: {\n        js: jsMetrics.executionTime,\n        py: pyTimeInMs,\n        difference: jsMetrics.executionTime - pyTimeInMs,\n        percentageDiff: this.calculatePercentageDifference(\n          jsMetrics.executionTime, \n          pyTimeInMs\n        )\n      },\n      speedRatio,\n      fasterImplementation,\n      speedDifference: speedDifference.toFixed(2) + 'x',\n      operations: operationComparison,\n      summary: this.generatePerformanceSummary(\n        fasterImplementation, \n        speedDifference, \n        operationComparison\n      )\n    };\n  }\n  \n  /**\n   * Calculate percentage difference between two values\n   * @param {number} a - First value\n   * @param {number} b - Second value\n   * @returns {number} Percentage difference\n   * @private\n   */\n  static calculatePercentageDifference(a, b) {\n    if (a === b) return 0;\n    if (a === 0 || b === 0) return a === 0 ? -100 : 100;\n    \n    const avg = (a + b) / 2;\n    return ((a - b) / avg) * 100;\n  }\n  \n  /**\n   * Generate a human-readable performance summary\n   * @param {string} fasterImpl - Identifier of faster implementation\n   * @param {number} speedDiff - Speed difference factor\n   * @param {Object} operations - Operation count comparison\n   * @returns {string} Human-readable summary\n   * @private\n   */\n  static generatePerformanceSummary(fasterImpl, speedDiff, operations) {\n    const comparisonEfficiency = operations.comparisons.percentageDiff;\n    const memoryEfficiency = operations.memoryAccesses.percentageDiff;\n    \n    let summary = `The ${fasterImpl} implementation is approximately ${speedDiff.toFixed(2)}x faster. `;\n    \n    if (Math.abs(comparisonEfficiency) > 10) {\n      summary += `It performs ${Math.abs(comparisonEfficiency).toFixed(0)}% ${comparisonEfficiency > 0 ? 'more' : 'fewer'} comparisons. `;\n    }\n    \n    if (Math.abs(memoryEfficiency) > 10) {\n      summary += `It makes ${Math.abs(memoryEfficiency).toFixed(0)}% ${memoryEfficiency > 0 ? 'more' : 'fewer'} memory accesses.`;\n    }\n    \n    return summary;\n  }\n}\n\n/**\n * Error handling and validation utilities for the bridge\n * @private\n */\nclass BridgeErrorHandler {\n  /**\n   * Error categories for structured error handling\n   * @enum {string}\n   */\n  static ErrorCategories = {\n    COMMUNICATION: 'communication',\n    EXECUTION: 'execution',\n    SERIALIZATION: 'serialization',\n    VALIDATION: 'validation',\n    UNKNOWN: 'unknown'\n  };\n  \n  /**\n   * Process an error to create a structured error object\n   * @param {Error} error - Original error\n   * @param {string} context - Error context\n   * @returns {Object} Structured error object\n   */\n  static processError(error, context) {\n    // Determine error category\n    const category = this.categorizeError(error);\n    \n    // Create structured error object\n    return {\n      category,\n      context,\n      message: error.message,\n      originalError: error,\n      timestamp: new Date().toISOString(),\n      recoverable: this.isRecoverable(category)\n    };\n  }\n  \n  /**\n   * Categorize an error based on its properties\n   * @param {Error} error - Error to categorize\n   * @returns {string} Error category\n   * @private\n   */\n  static categorizeError(error) {\n    const { message } = error;\n    \n    if (message.includes('timeout') || \n        message.includes('network') ||\n        message.includes('connection') ||\n        message.includes('HTTP error')) {\n      return this.ErrorCategories.COMMUNICATION;\n    }\n    \n    if (message.includes('execution') ||\n        message.includes('algorithm') ||\n        message.includes('runtime')) {\n      return this.ErrorCategories.EXECUTION;\n    }\n    \n    if (message.includes('serialize') ||\n        message.includes('parse') ||\n        message.includes('JSON')) {\n      return this.ErrorCategories.SERIALIZATION;\n    }\n    \n    if (message.includes('validation') ||\n        message.includes('invalid') ||\n        message.includes('missing')) {\n      return this.ErrorCategories.VALIDATION;\n    }\n    \n    return this.ErrorCategories.UNKNOWN;\n  }\n  \n  /**\n   * Determine if an error is potentially recoverable\n   * @param {string} category - Error category\n   * @returns {boolean} Whether the error is potentially recoverable\n   * @private\n   */\n  static isRecoverable(category) {\n    // Communication errors might be temporary and recoverable\n    return category === this.ErrorCategories.COMMUNICATION;\n  }\n  \n  /**\n   * Create a validation error\n   * @param {string} message - Error message\n   * @returns {Error} Validation error\n   */\n  static createValidationError(message) {\n    const error = new Error(`Validation error: ${message}`);\n    error.name = 'ValidationError';\n    return error;\n  }\n}\n\n/**\n * @class PythonJSBridge\n * @description High-performance communication bridge for executing Python algorithms in JavaScript\n */\nclass PythonJSBridge {\n  /**\n   * Create a new Python-JavaScript bridge\n   * @param {Object} options - Configuration options\n   * @param {string} [options.serverUrl='http://localhost:5000/api'] - URL of the Python bridge server\n   * @param {number} [options.timeout=30000] - Request timeout in milliseconds\n   * @param {boolean} [options.useWebSockets=true] - Whether to use WebSockets when available\n   * @param {boolean} [options.debug=false] - Enable debug logging\n   * @param {Object} [options.execution] - Algorithm execution options\n   * @param {boolean} [options.cacheResults=true] - Cache execution results for identical inputs\n   */\n  constructor(options = {}) {\n    this.options = {\n      serverUrl: 'http://localhost:5000/api',\n      timeout: 30000,\n      useWebSockets: true,\n      debug: false,\n      cacheResults: true,\n      ...options\n    };\n    \n    // Initialize communication layer\n    this.communicationLayer = new CommunicationLayer({\n      serverUrl: this.options.serverUrl,\n      timeout: this.options.timeout,\n      useWebSockets: this.options.useWebSockets\n    });\n    \n    // Initialize algorithm executor\n    this.algorithmExecutor = new AlgorithmExecutor(this.communicationLayer, {\n      recordHistory: true,\n      recordMetrics: true,\n      timeoutMultiplier: options.timeoutMultiplier || 1.0\n    });\n    \n    // Initialize execution cache\n    this.executionCache = new Map();\n    \n    // Log initialization status\n    if (this.options.debug) {\n      console.debug('PythonJSBridge initialized with options:', this.options);\n    }\n  }\n  \n  /**\n   * Execute a Python algorithm implementation\n   * @param {string} algorithmName - Name of the algorithm to execute\n   * @param {Array} data - Input data array\n   * @param {Object} options - Algorithm options\n   * @returns {Promise<Object>} Execution results including sorted array and metrics\n   * @throws {Error} If execution fails\n   */\n  async executeAlgorithm(algorithmName, data, options = {}) {\n    try {\n      // Generate cache key for this execution\n      const cacheKey = this.generateCacheKey(algorithmName, data, options);\n      \n      // Check cache if enabled\n      if (this.options.cacheResults && this.executionCache.has(cacheKey)) {\n        if (this.options.debug) {\n          console.debug(`Using cached result for ${algorithmName}`);\n        }\n        return this.executionCache.get(cacheKey);\n      }\n      \n      // Log execution start\n      if (this.options.debug) {\n        console.debug(`Executing ${algorithmName} on ${data.length} elements`);\n        console.time(`${algorithmName}-execution`);\n      }\n      \n      // Execute algorithm\n      const result = await this.algorithmExecutor.executeAlgorithm(algorithmName, data, options);\n      \n      // Log execution complete\n      if (this.options.debug) {\n        console.timeEnd(`${algorithmName}-execution`);\n        console.debug(`${algorithmName} metrics:`, result.metrics);\n      }\n      \n      // Cache result if enabled\n      if (this.options.cacheResults) {\n        this.executionCache.set(cacheKey, result);\n      }\n      \n      return result;\n    } catch (error) {\n      // Process error for more structured handling\n      const processedError = BridgeErrorHandler.processError(error, 'algorithm-execution');\n      \n      // Log error details\n      if (this.options.debug) {\n        console.error(`Error executing ${algorithmName}:`, processedError);\n      }\n      \n      throw new Error(`Failed to execute ${algorithmName}: ${error.message}`);\n    }\n  }\n  \n  /**\n   * Compare JavaScript and Python implementations of the same algorithm\n   * @param {Object} jsAlgorithm - JavaScript algorithm instance\n   * @param {string} algorithmName - Algorithm name for Python mapping\n   * @param {Array} data - Input data array\n   * @param {Object} options - Algorithm options\n   * @returns {Promise<Object>} Comparison results\n   */\n  async compareImplementations(jsAlgorithm, algorithmName, data, options = {}) {\n    // Validate inputs\n    if (!jsAlgorithm || typeof jsAlgorithm.execute !== 'function') {\n      throw BridgeErrorHandler.createValidationError('Invalid JavaScript algorithm instance');\n    }\n    \n    if (!algorithmName || typeof algorithmName !== 'string') {\n      throw BridgeErrorHandler.createValidationError('Invalid algorithm name');\n    }\n    \n    if (!Array.isArray(data)) {\n      throw BridgeErrorHandler.createValidationError('Data must be an array');\n    }\n    \n    try {\n      // Clone data to avoid mutations affecting comparisons\n      const inputData = [...data];\n      \n      if (this.options.debug) {\n        console.debug(`Starting comparison of ${algorithmName} implementations`);\n        console.time('comparison-total');\n      }\n      \n      // Execute JavaScript implementation\n      const jsStartTime = performance.now();\n      const jsResult = await Promise.resolve(jsAlgorithm.execute([...inputData], options));\n      const jsEndTime = performance.now();\n      const jsExecutionTime = jsEndTime - jsStartTime;\n      \n      if (this.options.debug) {\n        console.debug(`JS ${algorithmName} completed in ${jsExecutionTime.toFixed(2)}ms`);\n      }\n      \n      // Execute Python implementation\n      const pyResult = await this.executeAlgorithm(algorithmName, inputData, options);\n      \n      if (this.options.debug) {\n        console.timeEnd('comparison-total');\n      }\n      \n      // Get metrics\n      const jsMetrics = {\n        ...jsAlgorithm.metrics,\n        executionTime: jsExecutionTime\n      };\n      \n      // Analyze performance difference\n      const performanceAnalysis = PerformanceAnalyzer.compareImplementations(\n        jsMetrics,\n        pyResult.metrics\n      );\n      \n      // Verify results match (both implementations produced same output)\n      const resultsMatch = this.compareArrays(jsResult, pyResult.result);\n      \n      // Return comprehensive comparison report\n      return {\n        algorithm: algorithmName,\n        inputSize: data.length,\n        options: options,\n        javascript: {\n          result: jsResult,\n          metrics: jsMetrics,\n          history: jsAlgorithm.history || []\n        },\n        python: {\n          result: pyResult.result,\n          metrics: pyResult.metrics,\n          history: pyResult.history || []\n        },\n        performance: performanceAnalysis,\n        correctness: {\n          resultsMatch,\n          message: resultsMatch ? \n            'Both implementations produced identical results' : \n            'Implementations produced different results'\n        },\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      const processedError = BridgeErrorHandler.processError(error, 'implementation-comparison');\n      \n      if (this.options.debug) {\n        console.error('Comparison failed:', processedError);\n      }\n      \n      throw new Error(`Comparison failed: ${error.message}`);\n    }\n  }\n  \n  /**\n   * Execute all steps of a Python algorithm to extract execution history\n   * @param {string} algorithmName - Name of the algorithm\n   * @param {Array} data - Input data array\n   * @param {Object} options - Algorithm options\n   * @returns {Promise<Array>} Execution history steps\n   */\n  async getAlgorithmHistory(algorithmName, data, options = {}) {\n    // Add history recording option\n    const executionOptions = {\n      ...options,\n      recordHistory: true\n    };\n    \n    try {\n      // Execute algorithm\n      const result = await this.executeAlgorithm(algorithmName, data, executionOptions);\n      \n      // Return the execution history\n      return result.history || [];\n    } catch (error) {\n      throw new Error(`Failed to get algorithm history: ${error.message}`);\n    }\n  }\n  \n  /**\n   * Test Python server connection and API availability\n   * @returns {Promise<Object>} Connection test results\n   */\n  async testConnection() {\n    try {\n      const startTime = performance.now();\n      const response = await this.communicationLayer.sendRequest('ping', { timestamp: startTime });\n      const endTime = performance.now();\n      \n      return {\n        success: true,\n        roundTripTime: endTime - startTime,\n        serverInfo: response.serverInfo || {},\n        algorithms: response.algorithms || []\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  \n  /**\n   * Generate a cache key for an algorithm execution\n   * @param {string} algorithmName - Algorithm name\n   * @param {Array} data - Input data\n   * @param {Object} options - Execution options\n   * @returns {string} Cache key\n   * @private\n   */\n  generateCacheKey(algorithmName, data, options) {\n    // For large arrays, use a hash of the data instead of the full array\n    const dataDigest = this.generateDataDigest(data);\n    const optionsString = JSON.stringify(options);\n    \n    return `${algorithmName}:${dataDigest}:${optionsString}`;\n  }\n  \n  /**\n   * Generate a digest of the data array for caching\n   * @param {Array} data - Input data array\n   * @returns {string} Data digest\n   * @private\n   */\n  generateDataDigest(data) {\n    if (!data || !data.length) return 'empty';\n    \n    if (data.length <= 10) {\n      return JSON.stringify(data);\n    }\n    \n    // For large arrays, use key statistical properties and samples\n    const firstTen = data.slice(0, 10);\n    const lastTen = data.slice(-10);\n    \n    // Calculate basic statistics\n    const sum = data.reduce((acc, val) => acc + val, 0);\n    const mean = sum / data.length;\n    \n    // Get min and max\n    const min = Math.min(...data);\n    const max = Math.max(...data);\n    \n    // Calculate a simple hash from these properties\n    return `len:${data.length};mean:${mean.toFixed(2)};min:${min};max:${max};samples:${JSON.stringify([...firstTen, ...lastTen])}`;\n  }\n  \n  /**\n   * Compare two arrays for equality\n   * @param {Array} arr1 - First array\n   * @param {Array} arr2 - Second array\n   * @returns {boolean} True if arrays are equal\n   * @private\n   */\n  compareArrays(arr1, arr2) {\n    if (!arr1 || !arr2) return false;\n    if (arr1.length !== arr2.length) return false;\n    \n    for (let i = 0; i < arr1.length; i++) {\n      // Use approximate comparison for floating point values\n      if (typeof arr1[i] === 'number' && typeof arr2[i] === 'number') {\n        // Allow small floating point differences\n        if (Math.abs(arr1[i] - arr2[i]) > 1e-10) {\n          return false;\n        }\n      } else if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n  \n  /**\n   * Clear the execution cache\n   */\n  clearCache() {\n    this.executionCache.clear();\n    \n    if (this.options.debug) {\n      console.debug('Execution cache cleared');\n    }\n  }\n  \n  /**\n   * Get the list of available Python algorithms\n   * @returns {Promise<Array<string>>} List of available algorithm names\n   */\n  async getAvailableAlgorithms() {\n    try {\n      const response = await this.communicationLayer.sendRequest('algorithms', {});\n      return response.algorithms || [];\n    } catch (error) {\n      throw new Error(`Failed to get available algorithms: ${error.message}`);\n    }\n  }\n}\n\nexport default PythonJSBridge;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}