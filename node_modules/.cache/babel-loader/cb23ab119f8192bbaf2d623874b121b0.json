{"ast":null,"code":"var _jsxFileName = \"/Users/mohammadatashi/Documents/GitHub/Advanced-Algorithms-Laboratory/sorting-visualizer/src/components/AlgorithmComparison.js\";\n// src/components/algorithm-comparison.js\n\n/**\n * @file Algorithm Comparison Component\n * @module AlgorithmComparison\n * @description \n * A sophisticated component for comparative analysis of sorting algorithms, \n * providing side-by-side visualization of algorithm behavior, performance metrics,\n * and theoretical characteristics. Supports both JavaScript and Python implementations,\n * enabling cross-language analysis and educational insights.\n * \n * This component serves as the central analytical framework for the algorithm\n * visualization platform, offering synchronized execution, metrics collection,\n * and visual representation of algorithm execution dynamics.\n * \n * @author Advanced Sorting Algorithm Visualization Platform Team\n * @version 2.0.0\n */\n\nimport React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\nimport { WebGLRenderer } from '../visualization/renderers/webgl-renderer';\nimport { generateDataSet } from '../data/generators';\nimport PythonJSBridge from '../utils/python-js-bridge';\n\n// Import algorithm constructors\nimport BubbleSort from '../algorithms/comparison/bubble';\nimport MergeSort from '../algorithms/comparison/merge';\nimport QuickSort from '../algorithms/comparison/quick';\nimport HeapSort from '../algorithms/comparison/heap';\nimport InsertionSort from '../algorithms/comparison/insertion';\nimport SelectionSort from '../algorithms/comparison/selection';\nimport ShellSort from '../algorithms/comparison/shell';\nimport CountingSort from '../algorithms/distribution/counting';\nimport RadixSort from '../algorithms/distribution/radix';\nimport BucketSort from '../algorithms/distribution/bucket';\nimport BitonicSort from '../algorithms/network/bitonic';\nimport BogoSort from '../algorithms/special/bogo';\nimport QuickSelect from '../algorithms/selection/quick-select';\n\n// Import specialized visualizers\nimport HeapVisualizer from '../visualization/components/heap-visualizer';\nimport DistributionVisualizer from '../visualization/components/distribution-visualizer';\nimport TransformVisualizer from '../visualization/components/transform-visualizer';\n\n/**\n * Algorithm family categorization for organizational purposes\n * @constant {Object}\n * @private\n */\nconst ALGORITHM_FAMILIES = {\n  'comparison': {\n    name: 'Comparison-Based Sorts',\n    description: 'Algorithms that sort by comparing elements directly',\n    algorithms: ['bubble-sort', 'insertion-sort', 'selection-sort', 'merge-sort', 'quick-sort', 'heap-sort', 'shell-sort', 'tim-sort']\n  },\n  'distribution': {\n    name: 'Distribution Sorts',\n    description: 'Algorithms that use distribution of keys rather than comparisons',\n    algorithms: ['counting-sort', 'radix-sort', 'bucket-sort', 'pigeonhole-sort']\n  },\n  'network': {\n    name: 'Network & Parallel Sorts',\n    description: 'Algorithms designed for parallel processing or sorting networks',\n    algorithms: ['bitonic-sort', 'odd-even-merge-sort']\n  },\n  'special': {\n    name: 'Special-Case Sorts',\n    description: 'Algorithms with unique properties or educational value',\n    algorithms: ['bogo-sort', 'pancake-sort']\n  },\n  'selection': {\n    name: 'Selection Algorithms',\n    description: 'Algorithms for finding specific elements in collections',\n    algorithms: ['quick-select', 'median-of-medians']\n  }\n};\n\n/**\n * Algorithm constructor registry\n * Maps algorithm identifiers to their constructor functions\n * @constant {Object}\n * @private\n */\nconst ALGORITHM_CONSTRUCTORS = {\n  'bubble-sort': options => new BubbleSort({\n    optimize: true,\n    adaptive: true,\n    ...options\n  }),\n  'merge-sort': options => new MergeSort({\n    adaptive: true,\n    insertionThreshold: 10,\n    ...options\n  }),\n  'quick-sort': options => new QuickSort({\n    pivotStrategy: 'median-of-three',\n    threeWayPartition: true,\n    ...options\n  }),\n  'heap-sort': options => new HeapSort({\n    visualizeHeap: true,\n    optimizeLeafChecks: true,\n    ...options\n  }),\n  'insertion-sort': options => new InsertionSort({\n    ...options\n  }),\n  'selection-sort': options => new SelectionSort({\n    ...options\n  }),\n  'shell-sort': options => new ShellSort({\n    ...options\n  }),\n  'counting-sort': options => new CountingSort({\n    ...options\n  }),\n  'radix-sort': options => new RadixSort({\n    ...options\n  }),\n  'bucket-sort': options => new BucketSort({\n    ...options\n  }),\n  'bitonic-sort': options => new BitonicSort({\n    ...options\n  }),\n  'bogo-sort': options => new BogoSort({\n    ...options\n  }),\n  'quick-select': options => new QuickSelect({\n    ...options\n  })\n  // Additional algorithms can be added to the registry\n};\n\n/**\n * Algorithm visualization type mapping\n * Specifies which specialized visualizers should be used for different algorithms\n * @constant {Object}\n * @private\n */\nconst ALGORITHM_VISUALIZERS = {\n  'heap-sort': 'heap',\n  'counting-sort': 'distribution',\n  'radix-sort': 'distribution',\n  'bucket-sort': 'distribution',\n  'pigeonhole-sort': 'distribution',\n  'bitonic-sort': 'transform',\n  'odd-even-merge-sort': 'transform',\n  'pancake-sort': 'transform'\n};\n\n/**\n * Pre-configured test cases for algorithm comparison\n * @constant {Array}\n * @private\n */\nconst TEST_CASES = [{\n  id: 'random',\n  name: 'Random Data',\n  description: 'Randomly distributed values without patterns',\n  generate: size => generateDataSet('random', size)\n}, {\n  id: 'nearly-sorted',\n  name: 'Nearly Sorted',\n  description: '90% of elements already in correct position',\n  generate: size => generateDataSet('nearly-sorted', size, {\n    sortedRatio: 0.9\n  })\n}, {\n  id: 'reversed',\n  name: 'Reversed Order',\n  description: 'Elements in reverse sorted order (worst case for many algorithms)',\n  generate: size => generateDataSet('reversed', size)\n}, {\n  id: 'few-unique',\n  name: 'Few Unique Values',\n  description: 'Many duplicate values with limited cardinality',\n  generate: size => generateDataSet('few-unique', size, {\n    uniqueValues: Math.max(5, Math.ceil(Math.sqrt(size)))\n  })\n}, {\n  id: 'sorted',\n  name: 'Already Sorted',\n  description: 'Best case for most adaptive algorithms',\n  generate: size => generateDataSet('sorted', size)\n}];\n\n/**\n * Metric descriptions for educational purposes\n * @constant {Object}\n * @private\n */\nconst METRIC_INFO = {\n  comparisons: {\n    name: 'Comparisons',\n    description: 'Number of element comparisons performed during sorting',\n    relevantFor: ['comparison']\n  },\n  swaps: {\n    name: 'Swaps',\n    description: 'Number of element swap operations performed',\n    relevantFor: ['comparison']\n  },\n  memoryAccesses: {\n    name: 'Memory Accesses',\n    description: 'Total number of array reads and writes',\n    relevantFor: ['all']\n  },\n  executionTime: {\n    name: 'Execution Time',\n    description: 'Milliseconds required to complete the sort',\n    relevantFor: ['all']\n  },\n  recursionDepth: {\n    name: 'Max Recursion Depth',\n    description: 'Maximum depth of recursive calls',\n    relevantFor: ['comparison']\n  },\n  auxiliarySpace: {\n    name: 'Auxiliary Space',\n    description: 'Additional memory used during sorting (bytes)',\n    relevantFor: ['all']\n  }\n};\n\n/**\n * AlgorithmComparison component for side-by-side algorithm analysis\n * \n * @component\n * @param {Object} props - Component properties\n * @param {Object} props.options - Visualization options\n * @param {number} props.width - Canvas width\n * @param {number} props.height - Canvas height\n * @returns {React.Element} The rendered component\n */\nconst AlgorithmComparison = ({\n  options = {},\n  width = 1200,\n  height = 600\n}) => {\n  // Algorithm selection state\n  const [selectedAlgorithms, setSelectedAlgorithms] = useState(['quick-sort', 'merge-sort']);\n  const [algorithmInstances, setAlgorithmInstances] = useState([]);\n  const [comparisonMode, setComparisonMode] = useState('algorithm'); // 'algorithm' or 'implementation'\n\n  // Data configuration state\n  const [selectedTestCase, setSelectedTestCase] = useState('random');\n  const [dataSize, setDataSize] = useState(50);\n  const [customData, setCustomData] = useState([]);\n  const [useCustomData, setUseCustomData] = useState(false);\n\n  // Visualization state\n  const [renderers, setRenderers] = useState([]);\n  const [heapStructures, setHeapStructures] = useState([]);\n  const [distributionStates, setDistributionStates] = useState([]);\n  const [transformStates, setTransformStates] = useState([]);\n  const [comparisonResults, setComparisonResults] = useState(null);\n  const [isRunning, setIsRunning] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [maxSteps, setMaxSteps] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playbackSpeed, setPlaybackSpeed] = useState(1);\n\n  // Canvas references\n  const canvasRefs = useRef([]);\n\n  // Step history for each algorithm\n  const stepHistories = useRef([]);\n\n  // Animation reference\n  const animationRef = useRef(null);\n\n  // Bridge for Python communication\n  const bridgeRef = useRef(null);\n\n  /**\n   * Initialize bridge and set up algorithm instances on mount\n   */\n  useEffect(() => {\n    // Initialize the Python-JavaScript bridge\n    bridgeRef.current = new PythonJSBridge({\n      debug: false\n    });\n\n    // Set up algorithm instances based on initial selection\n    updateAlgorithmInstances();\n\n    // Clean up on unmount\n    return () => {\n      // Cancel any animations\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n\n      // Dispose renderers\n      renderers.forEach(renderer => {\n        if (renderer) renderer.dispose();\n      });\n    };\n  }, []);\n\n  /**\n   * Update algorithm instances when selection changes\n   */\n  useEffect(() => {\n    updateAlgorithmInstances();\n  }, [selectedAlgorithms]);\n\n  /**\n   * Update renderers when canvas refs or algorithm instances change\n   */\n  useEffect(() => {\n    if (canvasRefs.current.length > 0 && algorithmInstances.length > 0) {\n      initializeRenderers();\n    }\n  }, [canvasRefs.current.length, algorithmInstances.length]);\n\n  /**\n   * Generate test data when test case or size changes\n   */\n  useEffect(() => {\n    if (!useCustomData) {\n      generateTestData();\n    }\n  }, [selectedTestCase, dataSize, useCustomData]);\n\n  /**\n   * Run comparison when data changes and algorithms are ready\n   */\n  useEffect(() => {\n    if (algorithmInstances.length > 0 && (useCustomData && customData.length > 0 || !useCustomData && comparisonResults === null)) {\n      runComparison();\n    }\n  }, [algorithmInstances, useCustomData, customData]);\n\n  /**\n   * Create algorithm constructor instances based on selected algorithms\n   */\n  const updateAlgorithmInstances = useCallback(() => {\n    const instances = selectedAlgorithms.map(id => {\n      const constructor = ALGORITHM_CONSTRUCTORS[id];\n      if (!constructor) return null;\n      return constructor({});\n    }).filter(Boolean);\n    setAlgorithmInstances(instances);\n\n    // Reset step histories\n    stepHistories.current = instances.map(() => []);\n  }, [selectedAlgorithms]);\n\n  /**\n   * Initialize WebGL renderers for visualizing algorithms\n   */\n  const initializeRenderers = useCallback(() => {\n    const newRenderers = [];\n    for (let i = 0; i < algorithmInstances.length; i++) {\n      const canvas = canvasRefs.current[i];\n      if (!canvas) continue;\n      try {\n        const renderer = new WebGLRenderer(canvas, {\n          colorScheme: ['spectrum', 'heatmap', 'viridis', 'rainbow'][i % 4],\n          barWidth: 6,\n          spacing: 2,\n          background: [0.05, 0.05, 0.1, 1.0]\n        });\n        newRenderers.push(renderer);\n      } catch (error) {\n        console.error(`Failed to initialize renderer for algorithm ${i}:`, error);\n        newRenderers.push(null);\n      }\n    }\n    setRenderers(newRenderers);\n  }, [algorithmInstances, canvasRefs]);\n\n  /**\n   * Generate test data based on selected test case\n   */\n  const generateTestData = useCallback(() => {\n    const testCase = TEST_CASES.find(tc => tc.id === selectedTestCase);\n    if (!testCase) return;\n    try {\n      const data = testCase.generate(dataSize);\n      setCustomData(data);\n\n      // Update renderers with new data\n      renderers.forEach(renderer => {\n        if (renderer) renderer.setData(data);\n      });\n    } catch (error) {\n      console.error('Failed to generate test data:', error);\n    }\n  }, [selectedTestCase, dataSize, renderers]);\n\n  /**\n   * Run comparison between selected algorithms\n   */\n  const runComparison = useCallback(async () => {\n    if (algorithmInstances.length === 0 || isRunning) return;\n    setIsRunning(true);\n    setHeapStructures([]);\n    setDistributionStates([]);\n    setTransformStates([]);\n    try {\n      const data = useCustomData ? customData : getTestCaseData();\n      if (!data || data.length === 0) {\n        throw new Error('No data available for comparison');\n      }\n\n      // Reset step histories\n      stepHistories.current = algorithmInstances.map(() => []);\n\n      // Run algorithms and collect metrics\n      const results = [];\n      for (let i = 0; i < algorithmInstances.length; i++) {\n        const algorithm = algorithmInstances[i];\n\n        // Set up step history recorder\n        const stepCollector = step => {\n          stepHistories.current[i].push(step);\n        };\n\n        // Execute algorithm\n        const startTime = performance.now();\n        const result = await algorithm.execute([...data], {\n          onStep: stepCollector\n        });\n        const endTime = performance.now();\n\n        // Collect results\n        results.push({\n          algorithm: algorithm.name,\n          algorithmId: selectedAlgorithms[i],\n          sorted: result,\n          metrics: {\n            ...algorithm.metrics,\n            executionTime: endTime - startTime\n          },\n          steps: stepHistories.current[i].length\n        });\n\n        // Update renderer with initial data\n        if (renderers[i]) {\n          renderers[i].setData(data);\n        }\n      }\n\n      // If comparing with Python implementations\n      if (comparisonMode === 'implementation' && bridgeRef.current) {\n        for (let i = 0; i < selectedAlgorithms.length; i++) {\n          const algorithmId = selectedAlgorithms[i];\n          try {\n            // Get Python metrics for this algorithm\n            const pyResult = await bridgeRef.current.executeAlgorithm(algorithmId, data, algorithmInstances[i].options);\n\n            // Add Python history to step histories\n            const pySteps = pyResult.history.map(state => ({\n              ...state,\n              // Convert Python snake_case to camelCase\n              type: state.type.replace(/_([a-z])/g, g => g[1].toUpperCase()),\n              message: state.message\n            }));\n\n            // Add Python results to comparison\n            results[i].pythonMetrics = pyResult.metrics;\n            results[i].pythonSteps = pySteps;\n          } catch (error) {\n            console.error(`Failed to get Python metrics for ${algorithmId}:`, error);\n          }\n        }\n      }\n\n      // Find maximum number of steps across all algorithms\n      const maxStepsCount = Math.max(...results.map(r => r.steps), 0);\n      setComparisonResults(results);\n      setMaxSteps(maxStepsCount);\n      setCurrentStep(0);\n    } catch (error) {\n      console.error('Comparison failed:', error);\n    } finally {\n      setIsRunning(false);\n    }\n  }, [algorithmInstances, isRunning, useCustomData, customData, comparisonMode, selectedAlgorithms, renderers]);\n\n  /**\n   * Get data for the current test case\n   * @returns {Array} The test data array\n   * @private\n   */\n  const getTestCaseData = () => {\n    const testCase = TEST_CASES.find(tc => tc.id === selectedTestCase);\n    if (!testCase) return [];\n    return testCase.generate(dataSize);\n  };\n\n  /**\n   * Navigate to a specific step in the visualization\n   * @param {number} step - Step index to navigate to\n   */\n  const navigateToStep = useCallback(step => {\n    if (step < 0 || step >= maxSteps || !comparisonResults) return;\n    setCurrentStep(step);\n\n    // Update each algorithm visualization\n    for (let i = 0; i < algorithmInstances.length; i++) {\n      const stepHistory = stepHistories.current[i];\n\n      // Skip if no history or renderer\n      if (!stepHistory || step >= stepHistory.length || !renderers[i]) continue;\n      const stepData = stepHistory[step];\n\n      // Update renderer with step data\n      renderers[i].setData(stepData.array, false);\n\n      // Handle different operation types\n      switch (stepData.type) {\n        case 'comparison':\n          if (stepData.indices) renderers[i].markComparing(stepData.indices);\n          break;\n        case 'swap':\n          if (stepData.indices) renderers[i].highlight(stepData.indices);\n          break;\n        case 'sorted':\n          if (stepData.indices) renderers[i].markSorted(stepData.indices);\n          break;\n        case 'heapify':\n          // For heap sort, highlight the current node being heapified\n          if (stepData.node !== undefined) {\n            renderers[i].highlight([stepData.node]);\n            // Update heap structure visualization\n            updateSpecializedVisualizations(i, stepData);\n          }\n          break;\n        case 'distribution':\n        case 'bucket':\n          // Update distribution visualization\n          updateSpecializedVisualizations(i, stepData);\n          break;\n        case 'transform':\n          // Update transformation visualization\n          updateSpecializedVisualizations(i, stepData);\n          break;\n      }\n    }\n  }, [maxSteps, comparisonResults, algorithmInstances, renderers]);\n\n  /**\n   * Update specialized visualizations based on algorithm type\n   * @param {number} index - Algorithm index\n   * @param {Object} stepData - Current step data\n   * @private\n   */\n  const updateSpecializedVisualizations = (index, stepData) => {\n    const algorithmId = selectedAlgorithms[index];\n    const visualizerType = ALGORITHM_VISUALIZERS[algorithmId];\n    if (!visualizerType) return;\n\n    // Update appropriate visualization state\n    switch (visualizerType) {\n      case 'heap':\n        if (stepData.heapStructure || stepData.heap_structure) {\n          const heapData = stepData.heapStructure || stepData.heap_structure;\n          setHeapStructures(prev => {\n            const newStructures = [...prev];\n            newStructures[index] = heapData;\n            return newStructures;\n          });\n        }\n        break;\n      case 'distribution':\n        if (stepData.distributionState || stepData.distribution_state) {\n          const distData = stepData.distributionState || stepData.distribution_state;\n          setDistributionStates(prev => {\n            const newStates = [...prev];\n            newStates[index] = distData;\n            return newStates;\n          });\n        }\n        break;\n      case 'transform':\n        if (stepData.transformState || stepData.transform_state) {\n          const transformData = stepData.transformState || stepData.transform_state;\n          setTransformStates(prev => {\n            const newStates = [...prev];\n            newStates[index] = transformData;\n            return newStates;\n          });\n        }\n        break;\n    }\n  };\n\n  /**\n   * Start or stop visualization playback\n   */\n  const togglePlayback = useCallback(() => {\n    const newPlayingState = !isPlaying;\n    setIsPlaying(newPlayingState);\n    if (newPlayingState) {\n      // Start animation\n      const lastTimestamp = performance.now();\n      const animate = timestamp => {\n        if (!isPlaying) return;\n\n        // Control animation speed\n        const elapsed = timestamp - lastTimestamp;\n        if (elapsed > 1000 / (playbackSpeed * 10)) {\n          // Advance to next step\n          const nextStep = currentStep + 1;\n          if (nextStep >= maxSteps) {\n            // End of visualization, stop playback\n            setIsPlaying(false);\n            return;\n          }\n          navigateToStep(nextStep);\n          setCurrentStep(nextStep);\n        }\n        animationRef.current = requestAnimationFrame(animate);\n      };\n      animationRef.current = requestAnimationFrame(animate);\n    } else {\n      // Stop animation\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    }\n  }, [isPlaying, currentStep, maxSteps, playbackSpeed, navigateToStep]);\n\n  /**\n   * Handle algorithm selection change\n   * @param {number} index - The index of the algorithm to change\n   * @param {string} algorithmId - The new algorithm ID\n   */\n  const handleAlgorithmChange = useCallback((index, algorithmId) => {\n    setSelectedAlgorithms(prev => {\n      const newSelection = [...prev];\n      newSelection[index] = algorithmId;\n      return newSelection;\n    });\n  }, []);\n\n  /**\n   * Add another algorithm to the comparison\n   */\n  const addAlgorithm = useCallback(() => {\n    if (selectedAlgorithms.length >= 4) return; // Limit to 4 algorithms\n\n    // Find an algorithm not already selected\n    const availableAlgorithms = Object.keys(ALGORITHM_CONSTRUCTORS).filter(id => !selectedAlgorithms.includes(id));\n    if (availableAlgorithms.length > 0) {\n      setSelectedAlgorithms(prev => [...prev, availableAlgorithms[0]]);\n    }\n  }, [selectedAlgorithms]);\n\n  /**\n   * Remove an algorithm from the comparison\n   * @param {number} index - Index of algorithm to remove\n   */\n  const removeAlgorithm = useCallback(index => {\n    if (selectedAlgorithms.length <= 1) return; // Keep at least one algorithm\n\n    setSelectedAlgorithms(prev => prev.filter((_, i) => i !== index));\n\n    // Also remove renderer and step history\n    setRenderers(prev => prev.filter((_, i) => i !== index));\n    stepHistories.current = stepHistories.current.filter((_, i) => i !== index);\n  }, [selectedAlgorithms]);\n\n  /**\n   * Format execution time for display\n   * @param {number} timeMs - Time in milliseconds\n   * @returns {string} Formatted time string\n   * @private\n   */\n  const formatTime = timeMs => {\n    if (timeMs === undefined || timeMs === null) return 'N/A';\n    if (timeMs < 1) {\n      return `${(timeMs * 1000).toFixed(2)} μs`;\n    } else if (timeMs < 1000) {\n      return `${timeMs.toFixed(2)} ms`;\n    } else {\n      return `${(timeMs / 1000).toFixed(2)} s`;\n    }\n  };\n\n  /**\n   * Get color for metric comparison\n   * @param {number} value1 - First value\n   * @param {number} value2 - Second value\n   * @returns {string} CSS color class\n   * @private\n   */\n  const getComparisonColor = (value1, value2) => {\n    if (value1 === undefined || value2 === undefined) return '';\n    const diff = Math.abs(value1 - value2);\n    const min = Math.min(value1, value2);\n\n    // If difference is less than 1% of the minimum value, consider them equal\n    if (diff < 0.01 * min) return 'text-gray-700';\n    return value1 < value2 ? 'text-green-600' : 'text-red-600';\n  };\n\n  /**\n   * Get options for algorithm selection dropdown\n   * @param {number} index - Algorithm selector index\n   * @returns {Array} Array of option elements\n   * @private\n   */\n  const getAlgorithmOptions = useCallback(index => {\n    const options = [];\n\n    // Group algorithms by family\n    Object.entries(ALGORITHM_FAMILIES).forEach(([family, info]) => {\n      const familyOptions = info.algorithms.filter(id => ALGORITHM_CONSTRUCTORS[id]) // Only show implemented algorithms\n      .filter(id => index === 0 || !selectedAlgorithms.includes(id) || selectedAlgorithms[index] === id).map(id => /*#__PURE__*/React.createElement(\"option\", {\n        key: id,\n        value: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 11\n        }\n      }, id.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')));\n      if (familyOptions.length > 0) {\n        options.push(/*#__PURE__*/React.createElement(\"optgroup\", {\n          key: family,\n          label: info.name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 752,\n            columnNumber: 11\n          }\n        }, familyOptions));\n      }\n    });\n    return options;\n  }, [selectedAlgorithms]);\n\n  /**\n   * Get algorithm complexity description\n   * @param {Object} algorithm - Algorithm instance\n   * @returns {React.Element} Complexity information\n   * @private\n   */\n  const getComplexityInfo = useCallback(algorithm => {\n    if (!algorithm) return null;\n    const complexity = algorithm.getComplexity();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"complexity-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid grid-cols-2 gap-2 text-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 776,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 777,\n        columnNumber: 13\n      }\n    }, \"Time (Best):\"), \" \", complexity.time.best), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 13\n      }\n    }, \"Space (Best):\"), \" \", complexity.space.best), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 13\n      }\n    }, \"Time (Avg):\"), \" \", complexity.time.average), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 13\n      }\n    }, \"Space (Avg):\"), \" \", complexity.space.average), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789,\n        columnNumber: 13\n      }\n    }, \"Time (Worst):\"), \" \", complexity.time.worst), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 791,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 792,\n        columnNumber: 13\n      }\n    }, \"Space (Worst):\"), \" \", complexity.space.worst), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-span-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 13\n      }\n    }, \"Stable:\"), \" \", algorithm.isStable() ? 'Yes' : 'No', /*#__PURE__*/React.createElement(\"span\", {\n      className: \"mx-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796,\n        columnNumber: 13\n      }\n    }, \"\\u2022\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 797,\n        columnNumber: 13\n      }\n    }, \"In-Place:\"), \" \", algorithm.isInPlace() ? 'Yes' : 'No')));\n  }, []);\n\n  /**\n   * Render the algorithm visualizations\n   * @returns {React.Element} The visualization section\n   * @private\n   */\n  const renderAlgorithmVisualizations = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"algorithm-visualizations grid grid-cols-1 md:grid-cols-2 gap-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811,\n        columnNumber: 7\n      }\n    }, algorithmInstances.map((algorithm, index) => {\n      var _comparisonResults$in;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: \"algorithm-visualization bg-gray-100 p-4 rounded shadow-lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 813,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"flex justify-between items-center mb-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 814,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"flex-grow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 815,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"select\", {\n        value: selectedAlgorithms[index],\n        onChange: e => handleAlgorithmChange(index, e.target.value),\n        disabled: isRunning || isPlaying,\n        className: \"w-full p-2 border rounded\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 816,\n          columnNumber: 17\n        }\n      }, getAlgorithmOptions(index))), selectedAlgorithms.length > 1 && /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => removeAlgorithm(index),\n        disabled: isRunning || isPlaying,\n        className: \"ml-2 p-2 text-red-600 rounded hover:bg-red-50\",\n        title: \"Remove algorithm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 17\n        }\n      }, \"\\u2715\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"visualization-container relative\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 838,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"canvas\", {\n        ref: el => canvasRefs.current[index] = el,\n        width: width / Math.min(algorithmInstances.length, 2) - 50,\n        height: height / Math.ceil(algorithmInstances.length / 2) - 100,\n        className: \"bg-gray-900 rounded w-full\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 839,\n          columnNumber: 15\n        }\n      }), ALGORITHM_VISUALIZERS[selectedAlgorithms[index]] === 'heap' && heapStructures[index] && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mt-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 848,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"font-medium text-sm mb-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 849,\n          columnNumber: 19\n        }\n      }, \"Heap Structure\"), /*#__PURE__*/React.createElement(HeapVisualizer, {\n        heapStructure: heapStructures[index],\n        width: width / Math.min(algorithmInstances.length, 2) - 50,\n        height: 200,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 850,\n          columnNumber: 19\n        }\n      })), ALGORITHM_VISUALIZERS[selectedAlgorithms[index]] === 'distribution' && distributionStates[index] && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mt-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 859,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"font-medium text-sm mb-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 19\n        }\n      }, \"Distribution State\"), /*#__PURE__*/React.createElement(DistributionVisualizer, {\n        distributionState: distributionStates[index],\n        width: width / Math.min(algorithmInstances.length, 2) - 50,\n        height: 200,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 19\n        }\n      })), ALGORITHM_VISUALIZERS[selectedAlgorithms[index]] === 'transform' && transformStates[index] && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mt-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 870,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"font-medium text-sm mb-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 871,\n          columnNumber: 19\n        }\n      }, \"Transformation State\"), /*#__PURE__*/React.createElement(TransformVisualizer, {\n        transformState: transformStates[index],\n        width: width / Math.min(algorithmInstances.length, 2) - 50,\n        height: 200,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 872,\n          columnNumber: 19\n        }\n      }))), comparisonResults && comparisonResults[index] && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"metrics mt-4 grid grid-cols-2 gap-4 text-sm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 882,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-2 bg-white rounded shadow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 883,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"block text-xs font-medium text-gray-500\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 884,\n          columnNumber: 19\n        }\n      }, \"Execution Time:\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"text-lg font-bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 885,\n          columnNumber: 19\n        }\n      }, formatTime(comparisonResults[index].metrics.executionTime))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-2 bg-white rounded shadow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 887,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"block text-xs font-medium text-gray-500\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 19\n        }\n      }, \"Comparisons:\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"text-lg font-bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 889,\n          columnNumber: 19\n        }\n      }, (_comparisonResults$in = comparisonResults[index].metrics.comparisons) === null || _comparisonResults$in === void 0 ? void 0 : _comparisonResults$in.toLocaleString())), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-2 bg-white rounded shadow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 891,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"block text-xs font-medium text-gray-500\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 892,\n          columnNumber: 19\n        }\n      }, \"Swaps/Writes:\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"text-lg font-bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 893,\n          columnNumber: 19\n        }\n      }, (comparisonResults[index].metrics.swaps || 0).toLocaleString())), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-2 bg-white rounded shadow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 895,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"block text-xs font-medium text-gray-500\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 896,\n          columnNumber: 19\n        }\n      }, \"Memory Access:\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"text-lg font-bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 19\n        }\n      }, (comparisonResults[index].metrics.memoryAccesses || comparisonResults[index].metrics.reads + comparisonResults[index].metrics.writes || 0).toLocaleString()))), algorithm && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"algorithm-theory mt-4 bg-blue-50 p-3 rounded text-sm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 907,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"font-medium mb-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 17\n        }\n      }, \"Algorithm Characteristics\"), getComplexityInfo(algorithm)));\n    }), selectedAlgorithms.length < 4 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"add-algorithm-card bg-gray-100 p-4 rounded shadow-lg flex items-center justify-center cursor-pointer hover:bg-gray-200\",\n      onClick: addAlgorithm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 920,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-4xl text-gray-400 mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 921,\n        columnNumber: 15\n      }\n    }, \"+\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-gray-600 font-medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 922,\n        columnNumber: 15\n      }\n    }, \"Add Algorithm\"))));\n  };\n\n  /**\n   * Render the performance comparison section\n   * @returns {React.Element} The comparison section\n   * @private\n   */\n  const renderPerformanceComparison = () => {\n    var _algo1$metrics$compar, _algo2$metrics$compar, _ref, _ref2;\n    if (!comparisonResults || comparisonResults.length < 2) {\n      return null;\n    }\n\n    // Select the two algorithms to compare\n    const algo1 = comparisonResults[0];\n    const algo2 = comparisonResults[1];\n    if (!algo1 || !algo2) return null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"performance-comparison mt-8 bg-white p-6 rounded shadow-lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 947,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"text-xl font-semibold mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 948,\n        columnNumber: 9\n      }\n    }, \"Performance Comparison\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid grid-cols-3 gap-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comparison-metric p-4 bg-gray-50 rounded shadow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 951,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"text-base font-medium mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 952,\n        columnNumber: 13\n      }\n    }, \"Execution Time Ratio\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 953,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `text-xl font-bold ${getComparisonColor(algo1.metrics.executionTime, algo2.metrics.executionTime)}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 954,\n        columnNumber: 15\n      }\n    }, algo1.metrics.executionTime < algo2.metrics.executionTime ? `${algo1.algorithm} is ${(algo2.metrics.executionTime / algo1.metrics.executionTime).toFixed(2)}× faster` : `${algo2.algorithm} is ${(algo1.metrics.executionTime / algo2.metrics.executionTime).toFixed(2)}× faster`), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-sm text-gray-500 mt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 962,\n        columnNumber: 15\n      }\n    }, algo1.algorithm, \": \", formatTime(algo1.metrics.executionTime), \" vs.\", ' ', algo2.algorithm, \": \", formatTime(algo2.metrics.executionTime)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comparison-metric p-4 bg-gray-50 rounded shadow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 969,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"text-base font-medium mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 970,\n        columnNumber: 13\n      }\n    }, \"Comparison Operations\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 971,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `text-xl font-bold ${getComparisonColor(algo1.metrics.comparisons, algo2.metrics.comparisons)}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 972,\n        columnNumber: 15\n      }\n    }, Math.abs(algo1.metrics.comparisons - algo2.metrics.comparisons) < 5 ? \"Nearly identical\" : algo1.metrics.comparisons < algo2.metrics.comparisons ? `${algo1.algorithm} uses ${Math.round((1 - algo1.metrics.comparisons / algo2.metrics.comparisons) * 100)}% fewer` : `${algo2.algorithm} uses ${Math.round((1 - algo2.metrics.comparisons / algo1.metrics.comparisons) * 100)}% fewer`), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-sm text-gray-500 mt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 982,\n        columnNumber: 15\n      }\n    }, algo1.algorithm, \": \", (_algo1$metrics$compar = algo1.metrics.comparisons) === null || _algo1$metrics$compar === void 0 ? void 0 : _algo1$metrics$compar.toLocaleString(), \" vs.\", ' ', algo2.algorithm, \": \", (_algo2$metrics$compar = algo2.metrics.comparisons) === null || _algo2$metrics$compar === void 0 ? void 0 : _algo2$metrics$compar.toLocaleString()))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comparison-metric p-4 bg-gray-50 rounded shadow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 989,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"text-base font-medium mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 990,\n        columnNumber: 13\n      }\n    }, \"Memory Access Efficiency\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 991,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `text-xl font-bold ${getComparisonColor(algo1.metrics.memoryAccesses || algo1.metrics.reads + algo1.metrics.writes, algo2.metrics.memoryAccesses || algo2.metrics.reads + algo2.metrics.writes)}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 992,\n        columnNumber: 15\n      }\n    }, (algo1.metrics.memoryAccesses || algo1.metrics.reads + algo1.metrics.writes) < (algo2.metrics.memoryAccesses || algo2.metrics.reads + algo2.metrics.writes) ? `${algo1.algorithm} has better memory efficiency` : `${algo2.algorithm} has better memory efficiency`), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-sm text-gray-500 mt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1001,\n        columnNumber: 15\n      }\n    }, algo1.algorithm, \": \", (_ref = algo1.metrics.memoryAccesses || algo1.metrics.reads + algo1.metrics.writes) === null || _ref === void 0 ? void 0 : _ref.toLocaleString(), \" accesses vs.\", ' ', algo2.algorithm, \": \", (_ref2 = algo2.metrics.memoryAccesses || algo2.metrics.reads + algo2.metrics.writes) === null || _ref2 === void 0 ? void 0 : _ref2.toLocaleString(), \" accesses\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"algorithm-insights mt-6 bg-gray-50 p-4 rounded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1011,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"text-base font-medium mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1012,\n        columnNumber: 11\n      }\n    }, \"Algorithm Insights\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1013,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1014,\n        columnNumber: 13\n      }\n    }, \"This comparison demonstrates key differences between \", algo1.algorithm, \" and \", algo2.algorithm, \":\"), /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"list-disc pl-5 space-y-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1017,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1018,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1019,\n        columnNumber: 17\n      }\n    }, \"Performance characteristics:\"), \" \", algo1.metrics.executionTime < algo2.metrics.executionTime ? `${algo1.algorithm} demonstrates superior performance on this dataset,` : `${algo2.algorithm} demonstrates superior performance on this dataset,`, \"likely due to its \", algo1.metrics.executionTime < algo2.metrics.executionTime ? getAlgorithmAdvantage(algo1.algorithmId) : getAlgorithmAdvantage(algo2.algorithmId), \".\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1026,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1027,\n        columnNumber: 17\n      }\n    }, \"Operation efficiency:\"), \" \", algo1.metrics.comparisons < algo2.metrics.comparisons ? `${algo1.algorithm} performs fewer comparison operations,` : `${algo2.algorithm} performs fewer comparison operations,`, \"which impacts performance on larger datasets.\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1032,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1033,\n        columnNumber: 17\n      }\n    }, \"Memory pattern:\"), \" The \", (algo1.metrics.memoryAccesses || algo1.metrics.reads + algo1.metrics.writes) < (algo2.metrics.memoryAccesses || algo2.metrics.reads + algo2.metrics.writes) ? `${algo1.algorithm}'s memory access pattern is more efficient,` : `${algo2.algorithm}'s memory access pattern is more efficient,`, \"affecting cache performance and overall speed.\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1040,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1041,\n        columnNumber: 17\n      }\n    }, \"Algorithm complexity:\"), \" While \", algo1.algorithm, \" has \", algo1.metrics.executionTime < algo2.metrics.executionTime ? 'better practical performance' : 'theoretical advantages', \" on this dataset, different input patterns may favor \", algo2.algorithm, \".\")))));\n  };\n\n  /**\n   * Get a brief explanation of an algorithm's advantages\n   * @param {string} algorithmId - Algorithm identifier\n   * @returns {string} Advantage description\n   * @private\n   */\n  const getAlgorithmAdvantage = algorithmId => {\n    const advantages = {\n      'quick-sort': 'efficient partitioning and good average-case performance',\n      'merge-sort': 'stable divide-and-conquer approach',\n      'heap-sort': 'efficient in-place sorting with guaranteed O(n log n) performance',\n      'bubble-sort': 'simplicity and performance on nearly-sorted data',\n      'insertion-sort': 'adaptive behavior and low overhead on small datasets',\n      'selection-sort': 'minimal number of swaps',\n      'counting-sort': 'linear time complexity for limited range values',\n      'radix-sort': 'linear time complexity independent of value distribution',\n      'bucket-sort': 'efficient distribution technique for uniformly distributed data',\n      'shell-sort': 'improved insertion sort with better gap sequences',\n      'bitonic-sort': 'parallelizable network-based approach'\n    };\n    return advantages[algorithmId] || 'unique algorithmic properties';\n  };\n\n  /**\n   * Render the test case configuration section\n   * @returns {React.Element} The test case configuration UI\n   * @private\n   */\n  const renderTestCaseConfig = () => {\n    var _TEST_CASES$find;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"test-case-config mb-6 bg-white p-4 rounded shadow-lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1084,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"text-lg font-semibold mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1085,\n        columnNumber: 9\n      }\n    }, \"Test Configuration\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-3 gap-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1087,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"test-case-select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1088,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"block text-sm font-medium mb-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1089,\n        columnNumber: 13\n      }\n    }, \"Test Case:\"), /*#__PURE__*/React.createElement(\"select\", {\n      value: selectedTestCase,\n      onChange: e => setSelectedTestCase(e.target.value),\n      disabled: isRunning || isPlaying || useCustomData,\n      className: \"w-full p-2 border rounded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1090,\n        columnNumber: 13\n      }\n    }, TEST_CASES.map(testCase => /*#__PURE__*/React.createElement(\"option\", {\n      key: testCase.id,\n      value: testCase.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1097,\n        columnNumber: 17\n      }\n    }, testCase.name))), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"mt-1 text-xs text-gray-500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1102,\n        columnNumber: 13\n      }\n    }, (_TEST_CASES$find = TEST_CASES.find(tc => tc.id === selectedTestCase)) === null || _TEST_CASES$find === void 0 ? void 0 : _TEST_CASES$find.description)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"data-size-select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1107,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"block text-sm font-medium mb-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1108,\n        columnNumber: 13\n      }\n    }, \"Data Size:\"), /*#__PURE__*/React.createElement(\"select\", {\n      value: dataSize,\n      onChange: e => setDataSize(parseInt(e.target.value)),\n      disabled: isRunning || isPlaying || useCustomData,\n      className: \"w-full p-2 border rounded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1109,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1115,\n        columnNumber: 15\n      }\n    }, \"10 elements (Tiny)\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"25\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116,\n        columnNumber: 15\n      }\n    }, \"25 elements (Small)\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"50\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1117,\n        columnNumber: 15\n      }\n    }, \"50 elements (Medium)\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1118,\n        columnNumber: 15\n      }\n    }, \"100 elements (Large)\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"250\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1119,\n        columnNumber: 15\n      }\n    }, \"250 elements (X-Large)\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1120,\n        columnNumber: 15\n      }\n    }, \"500 elements (Huge)\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comparison-actions flex items-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1124,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: runComparison,\n      disabled: isRunning || isPlaying,\n      className: \"w-full py-2 px-4 bg-blue-600 text-white rounded shadow hover:bg-blue-700 disabled:bg-gray-400\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1125,\n        columnNumber: 13\n      }\n    }, isRunning ? 'Running...' : 'Run Comparison'))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comparison-mode mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1135,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"block text-sm font-medium mb-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1136,\n        columnNumber: 11\n      }\n    }, \"Comparison Mode:\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex space-x-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1137,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"flex items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1138,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      value: \"algorithm\",\n      checked: comparisonMode === 'algorithm',\n      onChange: () => setComparisonMode('algorithm'),\n      disabled: isRunning || isPlaying,\n      className: \"mr-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1139,\n        columnNumber: 15\n      }\n    }), \"Algorithm Comparison\"), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"flex items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1149,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      value: \"implementation\",\n      checked: comparisonMode === 'implementation',\n      onChange: () => setComparisonMode('implementation'),\n      disabled: isRunning || isPlaying,\n      className: \"mr-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1150,\n        columnNumber: 15\n      }\n    }), \"JS vs Python Implementation\"))));\n  };\n\n  /**\n   * Render the visualization controls\n   * @returns {React.Element} The visualization control UI\n   * @private\n   */\n  const renderVisControls = () => {\n    if (!comparisonResults) return null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"visualization-controls mb-6 bg-white p-4 rounded shadow-lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1175,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"text-lg font-semibold mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1176,\n        columnNumber: 9\n      }\n    }, \"Visualization Controls\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"playback-controls flex flex-wrap items-center space-x-2 mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1178,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => navigateToStep(0),\n      disabled: currentStep === 0 || isPlaying,\n      className: \"p-2 bg-gray-200 rounded disabled:opacity-50\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1179,\n        columnNumber: 11\n      }\n    }, \"\\u23EE\\uFE0F First\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => navigateToStep(currentStep - 1),\n      disabled: currentStep === 0 || isPlaying,\n      className: \"p-2 bg-gray-200 rounded disabled:opacity-50\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1186,\n        columnNumber: 11\n      }\n    }, \"\\u23EA Prev\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: togglePlayback,\n      className: \"px-4 py-2 bg-blue-600 text-white rounded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1193,\n        columnNumber: 11\n      }\n    }, isPlaying ? '⏸️ Pause' : '▶️ Play'), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => navigateToStep(currentStep + 1),\n      disabled: currentStep >= maxSteps - 1 || isPlaying,\n      className: \"p-2 bg-gray-200 rounded disabled:opacity-50\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1199,\n        columnNumber: 11\n      }\n    }, \"\\u23E9 Next\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => navigateToStep(maxSteps - 1),\n      disabled: currentStep >= maxSteps - 1 || isPlaying,\n      className: \"p-2 bg-gray-200 rounded disabled:opacity-50\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1206,\n        columnNumber: 11\n      }\n    }, \"\\u23ED\\uFE0F Last\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex items-center ml-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1214,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"mr-2 text-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1215,\n        columnNumber: 13\n      }\n    }, \"Speed:\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"range\",\n      min: \"0.1\",\n      max: \"5\",\n      step: \"0.1\",\n      value: playbackSpeed,\n      onChange: e => setPlaybackSpeed(parseFloat(e.target.value)),\n      className: \"w-32\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1216,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"ml-2 text-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1225,\n        columnNumber: 13\n      }\n    }, playbackSpeed, \"x\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ml-4 text-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1228,\n        columnNumber: 11\n      }\n    }, \"Step: \", currentStep, \" / \", maxSteps)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar w-full bg-gray-200 rounded overflow-hidden\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1233,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"bg-blue-600 h-2 transition-all duration-300\",\n      style: {\n        width: `${currentStep / (maxSteps || 1) * 100}%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1234,\n        columnNumber: 11\n      }\n    })), algorithmInstances.map((algorithm, index) => {\n      const stepHistory = stepHistories.current[index];\n      if (!stepHistory || currentStep >= stepHistory.length) return null;\n      const stepData = stepHistory[currentStep];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: \"step-info mt-3 p-2 bg-gray-50 rounded text-sm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1248,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1249,\n          columnNumber: 15\n        }\n      }, algorithm.name, \":\"), \" \", stepData.message || `Step ${currentStep}`);\n    }));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"algorithm-comparison-component\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1258,\n      columnNumber: 5\n    }\n  }, renderTestCaseConfig(), renderVisControls(), renderAlgorithmVisualizations(), renderPerformanceComparison());\n};\nexport default AlgorithmComparison;","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","useCallback","WebGLRenderer","generateDataSet","PythonJSBridge","BubbleSort","MergeSort","QuickSort","HeapSort","InsertionSort","SelectionSort","ShellSort","CountingSort","RadixSort","BucketSort","BitonicSort","BogoSort","QuickSelect","HeapVisualizer","DistributionVisualizer","TransformVisualizer","ALGORITHM_FAMILIES","name","description","algorithms","ALGORITHM_CONSTRUCTORS","options","optimize","adaptive","insertionThreshold","pivotStrategy","threeWayPartition","visualizeHeap","optimizeLeafChecks","ALGORITHM_VISUALIZERS","TEST_CASES","id","generate","size","sortedRatio","uniqueValues","Math","max","ceil","sqrt","METRIC_INFO","comparisons","relevantFor","swaps","memoryAccesses","executionTime","recursionDepth","auxiliarySpace","AlgorithmComparison","width","height","selectedAlgorithms","setSelectedAlgorithms","algorithmInstances","setAlgorithmInstances","comparisonMode","setComparisonMode","selectedTestCase","setSelectedTestCase","dataSize","setDataSize","customData","setCustomData","useCustomData","setUseCustomData","renderers","setRenderers","heapStructures","setHeapStructures","distributionStates","setDistributionStates","transformStates","setTransformStates","comparisonResults","setComparisonResults","isRunning","setIsRunning","currentStep","setCurrentStep","maxSteps","setMaxSteps","isPlaying","setIsPlaying","playbackSpeed","setPlaybackSpeed","canvasRefs","stepHistories","animationRef","bridgeRef","current","debug","updateAlgorithmInstances","cancelAnimationFrame","forEach","renderer","dispose","length","initializeRenderers","generateTestData","runComparison","instances","map","constructor","filter","Boolean","newRenderers","i","canvas","colorScheme","barWidth","spacing","background","push","error","console","testCase","find","tc","data","setData","getTestCaseData","Error","results","algorithm","stepCollector","step","startTime","performance","now","result","execute","onStep","endTime","algorithmId","sorted","metrics","steps","pyResult","executeAlgorithm","pySteps","history","state","type","replace","g","toUpperCase","message","pythonMetrics","pythonSteps","maxStepsCount","r","navigateToStep","stepHistory","stepData","array","indices","markComparing","highlight","markSorted","node","undefined","updateSpecializedVisualizations","index","visualizerType","heapStructure","heap_structure","heapData","prev","newStructures","distributionState","distribution_state","distData","newStates","transformState","transform_state","transformData","togglePlayback","newPlayingState","lastTimestamp","animate","timestamp","elapsed","nextStep","requestAnimationFrame","handleAlgorithmChange","newSelection","addAlgorithm","availableAlgorithms","Object","keys","includes","removeAlgorithm","_","formatTime","timeMs","toFixed","getComparisonColor","value1","value2","diff","abs","min","getAlgorithmOptions","entries","family","info","familyOptions","createElement","key","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","split","word","charAt","slice","join","label","getComplexityInfo","complexity","getComplexity","className","time","best","space","average","worst","isStable","isInPlace","renderAlgorithmVisualizations","_comparisonResults$in","onChange","e","target","disabled","onClick","title","ref","el","toLocaleString","reads","writes","renderPerformanceComparison","_algo1$metrics$compar","_algo2$metrics$compar","_ref","_ref2","algo1","algo2","round","getAlgorithmAdvantage","advantages","renderTestCaseConfig","_TEST_CASES$find","parseInt","checked","renderVisControls","parseFloat","style"],"sources":["/Users/mohammadatashi/Documents/GitHub/Advanced-Algorithms-Laboratory/sorting-visualizer/src/components/AlgorithmComparison.js"],"sourcesContent":["// src/components/algorithm-comparison.js\n\n/**\n * @file Algorithm Comparison Component\n * @module AlgorithmComparison\n * @description \n * A sophisticated component for comparative analysis of sorting algorithms, \n * providing side-by-side visualization of algorithm behavior, performance metrics,\n * and theoretical characteristics. Supports both JavaScript and Python implementations,\n * enabling cross-language analysis and educational insights.\n * \n * This component serves as the central analytical framework for the algorithm\n * visualization platform, offering synchronized execution, metrics collection,\n * and visual representation of algorithm execution dynamics.\n * \n * @author Advanced Sorting Algorithm Visualization Platform Team\n * @version 2.0.0\n */\n\nimport React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\nimport { WebGLRenderer } from '../visualization/renderers/webgl-renderer';\nimport { generateDataSet } from '../data/generators';\nimport PythonJSBridge from '../utils/python-js-bridge';\n\n// Import algorithm constructors\nimport BubbleSort from '../algorithms/comparison/bubble';\nimport MergeSort from '../algorithms/comparison/merge';\nimport QuickSort from '../algorithms/comparison/quick';\nimport HeapSort from '../algorithms/comparison/heap';\nimport InsertionSort from '../algorithms/comparison/insertion';\nimport SelectionSort from '../algorithms/comparison/selection';\nimport ShellSort from '../algorithms/comparison/shell';\nimport CountingSort from '../algorithms/distribution/counting';\nimport RadixSort from '../algorithms/distribution/radix';\nimport BucketSort from '../algorithms/distribution/bucket';\nimport BitonicSort from '../algorithms/network/bitonic';\nimport BogoSort from '../algorithms/special/bogo';\nimport QuickSelect from '../algorithms/selection/quick-select';\n\n// Import specialized visualizers\nimport HeapVisualizer from '../visualization/components/heap-visualizer';\nimport DistributionVisualizer from '../visualization/components/distribution-visualizer';\nimport TransformVisualizer from '../visualization/components/transform-visualizer';\n\n/**\n * Algorithm family categorization for organizational purposes\n * @constant {Object}\n * @private\n */\nconst ALGORITHM_FAMILIES = {\n  'comparison': {\n    name: 'Comparison-Based Sorts',\n    description: 'Algorithms that sort by comparing elements directly',\n    algorithms: [\n      'bubble-sort',\n      'insertion-sort',\n      'selection-sort',\n      'merge-sort',\n      'quick-sort',\n      'heap-sort',\n      'shell-sort',\n      'tim-sort'\n    ]\n  },\n  'distribution': {\n    name: 'Distribution Sorts',\n    description: 'Algorithms that use distribution of keys rather than comparisons',\n    algorithms: [\n      'counting-sort',\n      'radix-sort',\n      'bucket-sort',\n      'pigeonhole-sort'\n    ]\n  },\n  'network': {\n    name: 'Network & Parallel Sorts',\n    description: 'Algorithms designed for parallel processing or sorting networks',\n    algorithms: [\n      'bitonic-sort',\n      'odd-even-merge-sort'\n    ]\n  },\n  'special': {\n    name: 'Special-Case Sorts',\n    description: 'Algorithms with unique properties or educational value',\n    algorithms: [\n      'bogo-sort',\n      'pancake-sort'\n    ]\n  },\n  'selection': {\n    name: 'Selection Algorithms',\n    description: 'Algorithms for finding specific elements in collections',\n    algorithms: [\n      'quick-select',\n      'median-of-medians'\n    ]\n  }\n};\n\n/**\n * Algorithm constructor registry\n * Maps algorithm identifiers to their constructor functions\n * @constant {Object}\n * @private\n */\nconst ALGORITHM_CONSTRUCTORS = {\n  'bubble-sort': (options) => new BubbleSort({ optimize: true, adaptive: true, ...options }),\n  'merge-sort': (options) => new MergeSort({ adaptive: true, insertionThreshold: 10, ...options }),\n  'quick-sort': (options) => new QuickSort({ pivotStrategy: 'median-of-three', threeWayPartition: true, ...options }),\n  'heap-sort': (options) => new HeapSort({ visualizeHeap: true, optimizeLeafChecks: true, ...options }),\n  'insertion-sort': (options) => new InsertionSort({ ...options }),\n  'selection-sort': (options) => new SelectionSort({ ...options }),\n  'shell-sort': (options) => new ShellSort({ ...options }),\n  'counting-sort': (options) => new CountingSort({ ...options }),\n  'radix-sort': (options) => new RadixSort({ ...options }),\n  'bucket-sort': (options) => new BucketSort({ ...options }),\n  'bitonic-sort': (options) => new BitonicSort({ ...options }),\n  'bogo-sort': (options) => new BogoSort({ ...options }),\n  'quick-select': (options) => new QuickSelect({ ...options })\n  // Additional algorithms can be added to the registry\n};\n\n/**\n * Algorithm visualization type mapping\n * Specifies which specialized visualizers should be used for different algorithms\n * @constant {Object}\n * @private\n */\nconst ALGORITHM_VISUALIZERS = {\n  'heap-sort': 'heap',\n  'counting-sort': 'distribution',\n  'radix-sort': 'distribution',\n  'bucket-sort': 'distribution',\n  'pigeonhole-sort': 'distribution',\n  'bitonic-sort': 'transform',\n  'odd-even-merge-sort': 'transform',\n  'pancake-sort': 'transform'\n};\n\n/**\n * Pre-configured test cases for algorithm comparison\n * @constant {Array}\n * @private\n */\nconst TEST_CASES = [\n  {\n    id: 'random',\n    name: 'Random Data',\n    description: 'Randomly distributed values without patterns',\n    generate: (size) => generateDataSet('random', size)\n  },\n  {\n    id: 'nearly-sorted',\n    name: 'Nearly Sorted',\n    description: '90% of elements already in correct position',\n    generate: (size) => generateDataSet('nearly-sorted', size, { sortedRatio: 0.9 })\n  },\n  {\n    id: 'reversed',\n    name: 'Reversed Order',\n    description: 'Elements in reverse sorted order (worst case for many algorithms)',\n    generate: (size) => generateDataSet('reversed', size)\n  },\n  {\n    id: 'few-unique',\n    name: 'Few Unique Values',\n    description: 'Many duplicate values with limited cardinality',\n    generate: (size) => generateDataSet('few-unique', size, { uniqueValues: Math.max(5, Math.ceil(Math.sqrt(size))) })\n  },\n  {\n    id: 'sorted',\n    name: 'Already Sorted',\n    description: 'Best case for most adaptive algorithms',\n    generate: (size) => generateDataSet('sorted', size)\n  }\n];\n\n/**\n * Metric descriptions for educational purposes\n * @constant {Object}\n * @private\n */\nconst METRIC_INFO = {\n  comparisons: {\n    name: 'Comparisons',\n    description: 'Number of element comparisons performed during sorting',\n    relevantFor: ['comparison']\n  },\n  swaps: {\n    name: 'Swaps',\n    description: 'Number of element swap operations performed',\n    relevantFor: ['comparison']\n  },\n  memoryAccesses: {\n    name: 'Memory Accesses',\n    description: 'Total number of array reads and writes',\n    relevantFor: ['all']\n  },\n  executionTime: {\n    name: 'Execution Time',\n    description: 'Milliseconds required to complete the sort',\n    relevantFor: ['all']\n  },\n  recursionDepth: {\n    name: 'Max Recursion Depth',\n    description: 'Maximum depth of recursive calls',\n    relevantFor: ['comparison']\n  },\n  auxiliarySpace: {\n    name: 'Auxiliary Space',\n    description: 'Additional memory used during sorting (bytes)',\n    relevantFor: ['all']\n  }\n};\n\n/**\n * AlgorithmComparison component for side-by-side algorithm analysis\n * \n * @component\n * @param {Object} props - Component properties\n * @param {Object} props.options - Visualization options\n * @param {number} props.width - Canvas width\n * @param {number} props.height - Canvas height\n * @returns {React.Element} The rendered component\n */\nconst AlgorithmComparison = ({ \n  options = {},\n  width = 1200,\n  height = 600\n}) => {\n  // Algorithm selection state\n  const [selectedAlgorithms, setSelectedAlgorithms] = useState(['quick-sort', 'merge-sort']);\n  const [algorithmInstances, setAlgorithmInstances] = useState([]);\n  const [comparisonMode, setComparisonMode] = useState('algorithm'); // 'algorithm' or 'implementation'\n  \n  // Data configuration state\n  const [selectedTestCase, setSelectedTestCase] = useState('random');\n  const [dataSize, setDataSize] = useState(50);\n  const [customData, setCustomData] = useState([]);\n  const [useCustomData, setUseCustomData] = useState(false);\n  \n  // Visualization state\n  const [renderers, setRenderers] = useState([]);\n  const [heapStructures, setHeapStructures] = useState([]);\n  const [distributionStates, setDistributionStates] = useState([]);\n  const [transformStates, setTransformStates] = useState([]);\n  const [comparisonResults, setComparisonResults] = useState(null);\n  const [isRunning, setIsRunning] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [maxSteps, setMaxSteps] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playbackSpeed, setPlaybackSpeed] = useState(1);\n  \n  // Canvas references\n  const canvasRefs = useRef([]);\n  \n  // Step history for each algorithm\n  const stepHistories = useRef([]);\n  \n  // Animation reference\n  const animationRef = useRef(null);\n  \n  // Bridge for Python communication\n  const bridgeRef = useRef(null);\n  \n  /**\n   * Initialize bridge and set up algorithm instances on mount\n   */\n  useEffect(() => {\n    // Initialize the Python-JavaScript bridge\n    bridgeRef.current = new PythonJSBridge({ debug: false });\n    \n    // Set up algorithm instances based on initial selection\n    updateAlgorithmInstances();\n    \n    // Clean up on unmount\n    return () => {\n      // Cancel any animations\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      \n      // Dispose renderers\n      renderers.forEach(renderer => {\n        if (renderer) renderer.dispose();\n      });\n    };\n  }, []);\n  \n  /**\n   * Update algorithm instances when selection changes\n   */\n  useEffect(() => {\n    updateAlgorithmInstances();\n  }, [selectedAlgorithms]);\n  \n  /**\n   * Update renderers when canvas refs or algorithm instances change\n   */\n  useEffect(() => {\n    if (canvasRefs.current.length > 0 && algorithmInstances.length > 0) {\n      initializeRenderers();\n    }\n  }, [canvasRefs.current.length, algorithmInstances.length]);\n  \n  /**\n   * Generate test data when test case or size changes\n   */\n  useEffect(() => {\n    if (!useCustomData) {\n      generateTestData();\n    }\n  }, [selectedTestCase, dataSize, useCustomData]);\n  \n  /**\n   * Run comparison when data changes and algorithms are ready\n   */\n  useEffect(() => {\n    if (algorithmInstances.length > 0 && \n        ((useCustomData && customData.length > 0) || \n         (!useCustomData && comparisonResults === null))) {\n      runComparison();\n    }\n  }, [algorithmInstances, useCustomData, customData]);\n  \n  /**\n   * Create algorithm constructor instances based on selected algorithms\n   */\n  const updateAlgorithmInstances = useCallback(() => {\n    const instances = selectedAlgorithms.map(id => {\n      const constructor = ALGORITHM_CONSTRUCTORS[id];\n      if (!constructor) return null;\n      return constructor({});\n    }).filter(Boolean);\n    \n    setAlgorithmInstances(instances);\n    \n    // Reset step histories\n    stepHistories.current = instances.map(() => []);\n  }, [selectedAlgorithms]);\n  \n  /**\n   * Initialize WebGL renderers for visualizing algorithms\n   */\n  const initializeRenderers = useCallback(() => {\n    const newRenderers = [];\n    \n    for (let i = 0; i < algorithmInstances.length; i++) {\n      const canvas = canvasRefs.current[i];\n      if (!canvas) continue;\n      \n      try {\n        const renderer = new WebGLRenderer(canvas, {\n          colorScheme: ['spectrum', 'heatmap', 'viridis', 'rainbow'][i % 4],\n          barWidth: 6,\n          spacing: 2,\n          background: [0.05, 0.05, 0.1, 1.0]\n        });\n        \n        newRenderers.push(renderer);\n      } catch (error) {\n        console.error(`Failed to initialize renderer for algorithm ${i}:`, error);\n        newRenderers.push(null);\n      }\n    }\n    \n    setRenderers(newRenderers);\n  }, [algorithmInstances, canvasRefs]);\n  \n  /**\n   * Generate test data based on selected test case\n   */\n  const generateTestData = useCallback(() => {\n    const testCase = TEST_CASES.find(tc => tc.id === selectedTestCase);\n    if (!testCase) return;\n    \n    try {\n      const data = testCase.generate(dataSize);\n      setCustomData(data);\n      \n      // Update renderers with new data\n      renderers.forEach(renderer => {\n        if (renderer) renderer.setData(data);\n      });\n    } catch (error) {\n      console.error('Failed to generate test data:', error);\n    }\n  }, [selectedTestCase, dataSize, renderers]);\n  \n  /**\n   * Run comparison between selected algorithms\n   */\n  const runComparison = useCallback(async () => {\n    if (algorithmInstances.length === 0 || isRunning) return;\n    \n    setIsRunning(true);\n    setHeapStructures([]);\n    setDistributionStates([]);\n    setTransformStates([]);\n    \n    try {\n      const data = useCustomData ? customData : getTestCaseData();\n      \n      if (!data || data.length === 0) {\n        throw new Error('No data available for comparison');\n      }\n      \n      // Reset step histories\n      stepHistories.current = algorithmInstances.map(() => []);\n      \n      // Run algorithms and collect metrics\n      const results = [];\n      \n      for (let i = 0; i < algorithmInstances.length; i++) {\n        const algorithm = algorithmInstances[i];\n        \n        // Set up step history recorder\n        const stepCollector = (step) => {\n          stepHistories.current[i].push(step);\n        };\n        \n        // Execute algorithm\n        const startTime = performance.now();\n        const result = await algorithm.execute([...data], { onStep: stepCollector });\n        const endTime = performance.now();\n        \n        // Collect results\n        results.push({\n          algorithm: algorithm.name,\n          algorithmId: selectedAlgorithms[i],\n          sorted: result,\n          metrics: {\n            ...algorithm.metrics,\n            executionTime: endTime - startTime\n          },\n          steps: stepHistories.current[i].length\n        });\n        \n        // Update renderer with initial data\n        if (renderers[i]) {\n          renderers[i].setData(data);\n        }\n      }\n      \n      // If comparing with Python implementations\n      if (comparisonMode === 'implementation' && bridgeRef.current) {\n        for (let i = 0; i < selectedAlgorithms.length; i++) {\n          const algorithmId = selectedAlgorithms[i];\n          \n          try {\n            // Get Python metrics for this algorithm\n            const pyResult = await bridgeRef.current.executeAlgorithm(\n              algorithmId, \n              data,\n              algorithmInstances[i].options\n            );\n            \n            // Add Python history to step histories\n            const pySteps = pyResult.history.map(state => ({\n              ...state,\n              // Convert Python snake_case to camelCase\n              type: state.type.replace(/_([a-z])/g, g => g[1].toUpperCase()),\n              message: state.message\n            }));\n            \n            // Add Python results to comparison\n            results[i].pythonMetrics = pyResult.metrics;\n            results[i].pythonSteps = pySteps;\n          } catch (error) {\n            console.error(`Failed to get Python metrics for ${algorithmId}:`, error);\n          }\n        }\n      }\n      \n      // Find maximum number of steps across all algorithms\n      const maxStepsCount = Math.max(...results.map(r => r.steps), 0);\n      \n      setComparisonResults(results);\n      setMaxSteps(maxStepsCount);\n      setCurrentStep(0);\n    } catch (error) {\n      console.error('Comparison failed:', error);\n    } finally {\n      setIsRunning(false);\n    }\n  }, [\n    algorithmInstances, \n    isRunning, \n    useCustomData, \n    customData, \n    comparisonMode, \n    selectedAlgorithms, \n    renderers\n  ]);\n  \n  /**\n   * Get data for the current test case\n   * @returns {Array} The test data array\n   * @private\n   */\n  const getTestCaseData = () => {\n    const testCase = TEST_CASES.find(tc => tc.id === selectedTestCase);\n    if (!testCase) return [];\n    return testCase.generate(dataSize);\n  };\n  \n  /**\n   * Navigate to a specific step in the visualization\n   * @param {number} step - Step index to navigate to\n   */\n  const navigateToStep = useCallback((step) => {\n    if (step < 0 || step >= maxSteps || !comparisonResults) return;\n    \n    setCurrentStep(step);\n    \n    // Update each algorithm visualization\n    for (let i = 0; i < algorithmInstances.length; i++) {\n      const stepHistory = stepHistories.current[i];\n      \n      // Skip if no history or renderer\n      if (!stepHistory || step >= stepHistory.length || !renderers[i]) continue;\n      \n      const stepData = stepHistory[step];\n      \n      // Update renderer with step data\n      renderers[i].setData(stepData.array, false);\n      \n      // Handle different operation types\n      switch (stepData.type) {\n        case 'comparison':\n          if (stepData.indices) renderers[i].markComparing(stepData.indices);\n          break;\n        case 'swap':\n          if (stepData.indices) renderers[i].highlight(stepData.indices);\n          break;\n        case 'sorted':\n          if (stepData.indices) renderers[i].markSorted(stepData.indices);\n          break;\n        case 'heapify':\n          // For heap sort, highlight the current node being heapified\n          if (stepData.node !== undefined) {\n            renderers[i].highlight([stepData.node]);\n            // Update heap structure visualization\n            updateSpecializedVisualizations(i, stepData);\n          }\n          break;\n        case 'distribution':\n        case 'bucket':\n          // Update distribution visualization\n          updateSpecializedVisualizations(i, stepData);\n          break;\n        case 'transform':\n          // Update transformation visualization\n          updateSpecializedVisualizations(i, stepData);\n          break;\n      }\n    }\n  }, [maxSteps, comparisonResults, algorithmInstances, renderers]);\n  \n  /**\n   * Update specialized visualizations based on algorithm type\n   * @param {number} index - Algorithm index\n   * @param {Object} stepData - Current step data\n   * @private\n   */\n  const updateSpecializedVisualizations = (index, stepData) => {\n    const algorithmId = selectedAlgorithms[index];\n    const visualizerType = ALGORITHM_VISUALIZERS[algorithmId];\n    \n    if (!visualizerType) return;\n    \n    // Update appropriate visualization state\n    switch (visualizerType) {\n      case 'heap':\n        if (stepData.heapStructure || stepData.heap_structure) {\n          const heapData = stepData.heapStructure || stepData.heap_structure;\n          setHeapStructures(prev => {\n            const newStructures = [...prev];\n            newStructures[index] = heapData;\n            return newStructures;\n          });\n        }\n        break;\n      case 'distribution':\n        if (stepData.distributionState || stepData.distribution_state) {\n          const distData = stepData.distributionState || stepData.distribution_state;\n          setDistributionStates(prev => {\n            const newStates = [...prev];\n            newStates[index] = distData;\n            return newStates;\n          });\n        }\n        break;\n      case 'transform':\n        if (stepData.transformState || stepData.transform_state) {\n          const transformData = stepData.transformState || stepData.transform_state;\n          setTransformStates(prev => {\n            const newStates = [...prev];\n            newStates[index] = transformData;\n            return newStates;\n          });\n        }\n        break;\n    }\n  };\n  \n  /**\n   * Start or stop visualization playback\n   */\n  const togglePlayback = useCallback(() => {\n    const newPlayingState = !isPlaying;\n    setIsPlaying(newPlayingState);\n    \n    if (newPlayingState) {\n      // Start animation\n      const lastTimestamp = performance.now();\n      \n      const animate = (timestamp) => {\n        if (!isPlaying) return;\n        \n        // Control animation speed\n        const elapsed = timestamp - lastTimestamp;\n        \n        if (elapsed > (1000 / (playbackSpeed * 10))) {\n          // Advance to next step\n          const nextStep = currentStep + 1;\n          \n          if (nextStep >= maxSteps) {\n            // End of visualization, stop playback\n            setIsPlaying(false);\n            return;\n          }\n          \n          navigateToStep(nextStep);\n          setCurrentStep(nextStep);\n        }\n        \n        animationRef.current = requestAnimationFrame(animate);\n      };\n      \n      animationRef.current = requestAnimationFrame(animate);\n    } else {\n      // Stop animation\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    }\n  }, [isPlaying, currentStep, maxSteps, playbackSpeed, navigateToStep]);\n  \n  /**\n   * Handle algorithm selection change\n   * @param {number} index - The index of the algorithm to change\n   * @param {string} algorithmId - The new algorithm ID\n   */\n  const handleAlgorithmChange = useCallback((index, algorithmId) => {\n    setSelectedAlgorithms(prev => {\n      const newSelection = [...prev];\n      newSelection[index] = algorithmId;\n      return newSelection;\n    });\n  }, []);\n  \n  /**\n   * Add another algorithm to the comparison\n   */\n  const addAlgorithm = useCallback(() => {\n    if (selectedAlgorithms.length >= 4) return; // Limit to 4 algorithms\n    \n    // Find an algorithm not already selected\n    const availableAlgorithms = Object.keys(ALGORITHM_CONSTRUCTORS)\n      .filter(id => !selectedAlgorithms.includes(id));\n    \n    if (availableAlgorithms.length > 0) {\n      setSelectedAlgorithms(prev => [...prev, availableAlgorithms[0]]);\n    }\n  }, [selectedAlgorithms]);\n  \n  /**\n   * Remove an algorithm from the comparison\n   * @param {number} index - Index of algorithm to remove\n   */\n  const removeAlgorithm = useCallback((index) => {\n    if (selectedAlgorithms.length <= 1) return; // Keep at least one algorithm\n    \n    setSelectedAlgorithms(prev => prev.filter((_, i) => i !== index));\n    \n    // Also remove renderer and step history\n    setRenderers(prev => prev.filter((_, i) => i !== index));\n    stepHistories.current = stepHistories.current.filter((_, i) => i !== index);\n  }, [selectedAlgorithms]);\n  \n  /**\n   * Format execution time for display\n   * @param {number} timeMs - Time in milliseconds\n   * @returns {string} Formatted time string\n   * @private\n   */\n  const formatTime = (timeMs) => {\n    if (timeMs === undefined || timeMs === null) return 'N/A';\n    \n    if (timeMs < 1) {\n      return `${(timeMs * 1000).toFixed(2)} μs`;\n    } else if (timeMs < 1000) {\n      return `${timeMs.toFixed(2)} ms`;\n    } else {\n      return `${(timeMs / 1000).toFixed(2)} s`;\n    }\n  };\n  \n  /**\n   * Get color for metric comparison\n   * @param {number} value1 - First value\n   * @param {number} value2 - Second value\n   * @returns {string} CSS color class\n   * @private\n   */\n  const getComparisonColor = (value1, value2) => {\n    if (value1 === undefined || value2 === undefined) return '';\n    \n    const diff = Math.abs(value1 - value2);\n    const min = Math.min(value1, value2);\n    \n    // If difference is less than 1% of the minimum value, consider them equal\n    if (diff < 0.01 * min) return 'text-gray-700';\n    \n    return value1 < value2 ? 'text-green-600' : 'text-red-600';\n  };\n  \n  /**\n   * Get options for algorithm selection dropdown\n   * @param {number} index - Algorithm selector index\n   * @returns {Array} Array of option elements\n   * @private\n   */\n  const getAlgorithmOptions = useCallback((index) => {\n    const options = [];\n    \n    // Group algorithms by family\n    Object.entries(ALGORITHM_FAMILIES).forEach(([family, info]) => {\n      const familyOptions = info.algorithms\n        .filter(id => ALGORITHM_CONSTRUCTORS[id]) // Only show implemented algorithms\n        .filter(id => index === 0 || !selectedAlgorithms.includes(id) || selectedAlgorithms[index] === id)\n        .map(id => (\n          <option key={id} value={id}>\n            {id.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}\n          </option>\n        ));\n      \n      if (familyOptions.length > 0) {\n        options.push(\n          <optgroup key={family} label={info.name}>\n            {familyOptions}\n          </optgroup>\n        );\n      }\n    });\n    \n    return options;\n  }, [selectedAlgorithms]);\n  \n  /**\n   * Get algorithm complexity description\n   * @param {Object} algorithm - Algorithm instance\n   * @returns {React.Element} Complexity information\n   * @private\n   */\n  const getComplexityInfo = useCallback((algorithm) => {\n    if (!algorithm) return null;\n    \n    const complexity = algorithm.getComplexity();\n    \n    return (\n      <div className=\"complexity-info\">\n        <div className=\"grid grid-cols-2 gap-2 text-sm\">\n          <div>\n            <span className=\"font-medium\">Time (Best):</span> {complexity.time.best}\n          </div>\n          <div>\n            <span className=\"font-medium\">Space (Best):</span> {complexity.space.best}\n          </div>\n          <div>\n            <span className=\"font-medium\">Time (Avg):</span> {complexity.time.average}\n          </div>\n          <div>\n            <span className=\"font-medium\">Space (Avg):</span> {complexity.space.average}\n          </div>\n          <div>\n            <span className=\"font-medium\">Time (Worst):</span> {complexity.time.worst}\n          </div>\n          <div>\n            <span className=\"font-medium\">Space (Worst):</span> {complexity.space.worst}\n          </div>\n          <div className=\"col-span-2\">\n            <span className=\"font-medium\">Stable:</span> {algorithm.isStable() ? 'Yes' : 'No'}\n            <span className=\"mx-3\">•</span>\n            <span className=\"font-medium\">In-Place:</span> {algorithm.isInPlace() ? 'Yes' : 'No'}\n          </div>\n        </div>\n      </div>\n    );\n  }, []);\n  \n  /**\n   * Render the algorithm visualizations\n   * @returns {React.Element} The visualization section\n   * @private\n   */\n  const renderAlgorithmVisualizations = () => {\n    return (\n      <div className=\"algorithm-visualizations grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {algorithmInstances.map((algorithm, index) => (\n          <div key={index} className=\"algorithm-visualization bg-gray-100 p-4 rounded shadow-lg\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <div className=\"flex-grow\">\n                <select \n                  value={selectedAlgorithms[index]}\n                  onChange={(e) => handleAlgorithmChange(index, e.target.value)}\n                  disabled={isRunning || isPlaying}\n                  className=\"w-full p-2 border rounded\"\n                >\n                  {getAlgorithmOptions(index)}\n                </select>\n              </div>\n              \n              {selectedAlgorithms.length > 1 && (\n                <button \n                  onClick={() => removeAlgorithm(index)}\n                  disabled={isRunning || isPlaying}\n                  className=\"ml-2 p-2 text-red-600 rounded hover:bg-red-50\"\n                  title=\"Remove algorithm\"\n                >\n                  ✕\n                </button>\n              )}\n            </div>\n            \n            <div className=\"visualization-container relative\">\n              <canvas \n                ref={el => canvasRefs.current[index] = el}\n                width={width / Math.min(algorithmInstances.length, 2) - 50}\n                height={height / Math.ceil(algorithmInstances.length / 2) - 100}\n                className=\"bg-gray-900 rounded w-full\"\n              />\n              \n              {/* Specialized visualizations based on algorithm type */}\n              {ALGORITHM_VISUALIZERS[selectedAlgorithms[index]] === 'heap' && heapStructures[index] && (\n                <div className=\"mt-4\">\n                  <h4 className=\"font-medium text-sm mb-1\">Heap Structure</h4>\n                  <HeapVisualizer \n                    heapStructure={heapStructures[index]} \n                    width={width / Math.min(algorithmInstances.length, 2) - 50}\n                    height={200}\n                  />\n                </div>\n              )}\n              \n              {ALGORITHM_VISUALIZERS[selectedAlgorithms[index]] === 'distribution' && distributionStates[index] && (\n                <div className=\"mt-4\">\n                  <h4 className=\"font-medium text-sm mb-1\">Distribution State</h4>\n                  <DistributionVisualizer \n                    distributionState={distributionStates[index]} \n                    width={width / Math.min(algorithmInstances.length, 2) - 50}\n                    height={200}\n                  />\n                </div>\n              )}\n              \n              {ALGORITHM_VISUALIZERS[selectedAlgorithms[index]] === 'transform' && transformStates[index] && (\n                <div className=\"mt-4\">\n                  <h4 className=\"font-medium text-sm mb-1\">Transformation State</h4>\n                  <TransformVisualizer \n                    transformState={transformStates[index]} \n                    width={width / Math.min(algorithmInstances.length, 2) - 50}\n                    height={200}\n                  />\n                </div>\n              )}\n            </div>\n            \n            {comparisonResults && comparisonResults[index] && (\n              <div className=\"metrics mt-4 grid grid-cols-2 gap-4 text-sm\">\n                <div className=\"p-2 bg-white rounded shadow\">\n                  <span className=\"block text-xs font-medium text-gray-500\">Execution Time:</span>\n                  <span className=\"text-lg font-bold\">{formatTime(comparisonResults[index].metrics.executionTime)}</span>\n                </div>\n                <div className=\"p-2 bg-white rounded shadow\">\n                  <span className=\"block text-xs font-medium text-gray-500\">Comparisons:</span>\n                  <span className=\"text-lg font-bold\">{comparisonResults[index].metrics.comparisons?.toLocaleString()}</span>\n                </div>\n                <div className=\"p-2 bg-white rounded shadow\">\n                  <span className=\"block text-xs font-medium text-gray-500\">Swaps/Writes:</span>\n                  <span className=\"text-lg font-bold\">{(comparisonResults[index].metrics.swaps || 0).toLocaleString()}</span>\n                </div>\n                <div className=\"p-2 bg-white rounded shadow\">\n                  <span className=\"block text-xs font-medium text-gray-500\">Memory Access:</span>\n                  <span className=\"text-lg font-bold\">\n                    {(comparisonResults[index].metrics.memoryAccesses || \n                      comparisonResults[index].metrics.reads + comparisonResults[index].metrics.writes || 0\n                     ).toLocaleString()}\n                  </span>\n                </div>\n              </div>\n            )}\n            \n            {algorithm && (\n              <div className=\"algorithm-theory mt-4 bg-blue-50 p-3 rounded text-sm\">\n                <h4 className=\"font-medium mb-2\">Algorithm Characteristics</h4>\n                {getComplexityInfo(algorithm)}\n              </div>\n            )}\n          </div>\n        ))}\n        \n        {selectedAlgorithms.length < 4 && (\n          <div \n            className=\"add-algorithm-card bg-gray-100 p-4 rounded shadow-lg flex items-center justify-center cursor-pointer hover:bg-gray-200\"\n            onClick={addAlgorithm}\n          >\n            <div className=\"text-center\">\n              <div className=\"text-4xl text-gray-400 mb-2\">+</div>\n              <div className=\"text-gray-600 font-medium\">Add Algorithm</div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n  \n  /**\n   * Render the performance comparison section\n   * @returns {React.Element} The comparison section\n   * @private\n   */\n  const renderPerformanceComparison = () => {\n    if (!comparisonResults || comparisonResults.length < 2) {\n      return null;\n    }\n    \n    // Select the two algorithms to compare\n    const algo1 = comparisonResults[0];\n    const algo2 = comparisonResults[1];\n    \n    if (!algo1 || !algo2) return null;\n    \n    return (\n      <div className=\"performance-comparison mt-8 bg-white p-6 rounded shadow-lg\">\n        <h3 className=\"text-xl font-semibold mb-4\">Performance Comparison</h3>\n        \n        <div className=\"grid grid-cols-3 gap-6\">\n          <div className=\"comparison-metric p-4 bg-gray-50 rounded shadow\">\n            <h4 className=\"text-base font-medium mb-2\">Execution Time Ratio</h4>\n            <div className=\"text-center\">\n              <div className={`text-xl font-bold ${getComparisonColor(\n                algo1.metrics.executionTime,\n                algo2.metrics.executionTime\n              )}`}>\n                {algo1.metrics.executionTime < algo2.metrics.executionTime\n                  ? `${algo1.algorithm} is ${(algo2.metrics.executionTime / algo1.metrics.executionTime).toFixed(2)}× faster`\n                  : `${algo2.algorithm} is ${(algo1.metrics.executionTime / algo2.metrics.executionTime).toFixed(2)}× faster`}\n              </div>\n              <div className=\"text-sm text-gray-500 mt-1\">\n                {algo1.algorithm}: {formatTime(algo1.metrics.executionTime)} vs. \n                {' '}{algo2.algorithm}: {formatTime(algo2.metrics.executionTime)}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"comparison-metric p-4 bg-gray-50 rounded shadow\">\n            <h4 className=\"text-base font-medium mb-2\">Comparison Operations</h4>\n            <div className=\"text-center\">\n              <div className={`text-xl font-bold ${getComparisonColor(\n                algo1.metrics.comparisons,\n                algo2.metrics.comparisons\n              )}`}>\n                {Math.abs(algo1.metrics.comparisons - algo2.metrics.comparisons) < 5\n                  ? \"Nearly identical\"\n                  : algo1.metrics.comparisons < algo2.metrics.comparisons\n                    ? `${algo1.algorithm} uses ${Math.round((1 - algo1.metrics.comparisons / algo2.metrics.comparisons) * 100)}% fewer`\n                    : `${algo2.algorithm} uses ${Math.round((1 - algo2.metrics.comparisons / algo1.metrics.comparisons) * 100)}% fewer`}\n              </div>\n              <div className=\"text-sm text-gray-500 mt-1\">\n                {algo1.algorithm}: {algo1.metrics.comparisons?.toLocaleString()} vs. \n                {' '}{algo2.algorithm}: {algo2.metrics.comparisons?.toLocaleString()}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"comparison-metric p-4 bg-gray-50 rounded shadow\">\n            <h4 className=\"text-base font-medium mb-2\">Memory Access Efficiency</h4>\n            <div className=\"text-center\">\n              <div className={`text-xl font-bold ${getComparisonColor(\n                algo1.metrics.memoryAccesses || (algo1.metrics.reads + algo1.metrics.writes),\n                algo2.metrics.memoryAccesses || (algo2.metrics.reads + algo2.metrics.writes)\n              )}`}>\n                {(algo1.metrics.memoryAccesses || (algo1.metrics.reads + algo1.metrics.writes)) < \n                 (algo2.metrics.memoryAccesses || (algo2.metrics.reads + algo2.metrics.writes))\n                  ? `${algo1.algorithm} has better memory efficiency`\n                  : `${algo2.algorithm} has better memory efficiency`}\n              </div>\n              <div className=\"text-sm text-gray-500 mt-1\">\n                {algo1.algorithm}: {(algo1.metrics.memoryAccesses || \n                                     (algo1.metrics.reads + algo1.metrics.writes))?.toLocaleString()} accesses vs. \n                {' '}{algo2.algorithm}: {(algo2.metrics.memoryAccesses || \n                                         (algo2.metrics.reads + algo2.metrics.writes))?.toLocaleString()} accesses\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"algorithm-insights mt-6 bg-gray-50 p-4 rounded\">\n          <h4 className=\"text-base font-medium mb-2\">Algorithm Insights</h4>\n          <div className=\"text-sm\">\n            <p className=\"mb-2\">\n              This comparison demonstrates key differences between {algo1.algorithm} and {algo2.algorithm}:\n            </p>\n            <ul className=\"list-disc pl-5 space-y-1\">\n              <li>\n                <strong>Performance characteristics:</strong> {algo1.metrics.executionTime < algo2.metrics.executionTime\n                ? `${algo1.algorithm} demonstrates superior performance on this dataset,`\n                : `${algo2.algorithm} demonstrates superior performance on this dataset,`} \n                likely due to its {algo1.metrics.executionTime < algo2.metrics.executionTime\n                ? getAlgorithmAdvantage(algo1.algorithmId)\n                : getAlgorithmAdvantage(algo2.algorithmId)}.\n              </li>\n              <li>\n                <strong>Operation efficiency:</strong> {algo1.metrics.comparisons < algo2.metrics.comparisons\n                ? `${algo1.algorithm} performs fewer comparison operations,`\n                : `${algo2.algorithm} performs fewer comparison operations,`} \n                which impacts performance on larger datasets.\n              </li>\n              <li>\n                <strong>Memory pattern:</strong> The {(algo1.metrics.memoryAccesses || \n                                     (algo1.metrics.reads + algo1.metrics.writes)) < \n                 (algo2.metrics.memoryAccesses || (algo2.metrics.reads + algo2.metrics.writes))\n                ? `${algo1.algorithm}'s memory access pattern is more efficient,`\n                : `${algo2.algorithm}'s memory access pattern is more efficient,`} \n                affecting cache performance and overall speed.\n              </li>\n              <li>\n                <strong>Algorithm complexity:</strong> While {algo1.algorithm} has {algo1.metrics.executionTime < algo2.metrics.executionTime\n                ? 'better practical performance'\n                : 'theoretical advantages'} on this dataset, \n                different input patterns may favor {algo2.algorithm}.\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  \n  /**\n   * Get a brief explanation of an algorithm's advantages\n   * @param {string} algorithmId - Algorithm identifier\n   * @returns {string} Advantage description\n   * @private\n   */\n  const getAlgorithmAdvantage = (algorithmId) => {\n    const advantages = {\n      'quick-sort': 'efficient partitioning and good average-case performance',\n      'merge-sort': 'stable divide-and-conquer approach',\n      'heap-sort': 'efficient in-place sorting with guaranteed O(n log n) performance',\n      'bubble-sort': 'simplicity and performance on nearly-sorted data',\n      'insertion-sort': 'adaptive behavior and low overhead on small datasets',\n      'selection-sort': 'minimal number of swaps',\n      'counting-sort': 'linear time complexity for limited range values',\n      'radix-sort': 'linear time complexity independent of value distribution',\n      'bucket-sort': 'efficient distribution technique for uniformly distributed data',\n      'shell-sort': 'improved insertion sort with better gap sequences',\n      'bitonic-sort': 'parallelizable network-based approach'\n    };\n    \n    return advantages[algorithmId] || 'unique algorithmic properties';\n  };\n  \n  /**\n   * Render the test case configuration section\n   * @returns {React.Element} The test case configuration UI\n   * @private\n   */\n  const renderTestCaseConfig = () => {\n    return (\n      <div className=\"test-case-config mb-6 bg-white p-4 rounded shadow-lg\">\n        <h3 className=\"text-lg font-semibold mb-3\">Test Configuration</h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"test-case-select\">\n            <label className=\"block text-sm font-medium mb-1\">Test Case:</label>\n            <select \n              value={selectedTestCase}\n              onChange={(e) => setSelectedTestCase(e.target.value)}\n              disabled={isRunning || isPlaying || useCustomData}\n              className=\"w-full p-2 border rounded\"\n            >\n              {TEST_CASES.map(testCase => (\n                <option key={testCase.id} value={testCase.id}>\n                  {testCase.name}\n                </option>\n              ))}\n            </select>\n            <p className=\"mt-1 text-xs text-gray-500\">\n              {TEST_CASES.find(tc => tc.id === selectedTestCase)?.description}\n            </p>\n          </div>\n          \n          <div className=\"data-size-select\">\n            <label className=\"block text-sm font-medium mb-1\">Data Size:</label>\n            <select \n              value={dataSize}\n              onChange={(e) => setDataSize(parseInt(e.target.value))}\n              disabled={isRunning || isPlaying || useCustomData}\n              className=\"w-full p-2 border rounded\"\n            >\n              <option value=\"10\">10 elements (Tiny)</option>\n              <option value=\"25\">25 elements (Small)</option>\n              <option value=\"50\">50 elements (Medium)</option>\n              <option value=\"100\">100 elements (Large)</option>\n              <option value=\"250\">250 elements (X-Large)</option>\n              <option value=\"500\">500 elements (Huge)</option>\n            </select>\n          </div>\n          \n          <div className=\"comparison-actions flex items-end\">\n            <button \n              onClick={runComparison}\n              disabled={isRunning || isPlaying}\n              className=\"w-full py-2 px-4 bg-blue-600 text-white rounded shadow hover:bg-blue-700 disabled:bg-gray-400\"\n            >\n              {isRunning ? 'Running...' : 'Run Comparison'}\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"comparison-mode mt-4\">\n          <label className=\"block text-sm font-medium mb-1\">Comparison Mode:</label>\n          <div className=\"flex space-x-4\">\n            <label className=\"flex items-center\">\n              <input \n                type=\"radio\" \n                value=\"algorithm\" \n                checked={comparisonMode === 'algorithm'} \n                onChange={() => setComparisonMode('algorithm')}\n                disabled={isRunning || isPlaying}\n                className=\"mr-2\"\n              />\n              Algorithm Comparison\n            </label>\n            <label className=\"flex items-center\">\n              <input \n                type=\"radio\" \n                value=\"implementation\" \n                checked={comparisonMode === 'implementation'} \n                onChange={() => setComparisonMode('implementation')}\n                disabled={isRunning || isPlaying}\n                className=\"mr-2\"\n              />\n              JS vs Python Implementation\n            </label>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  \n  /**\n   * Render the visualization controls\n   * @returns {React.Element} The visualization control UI\n   * @private\n   */\n  const renderVisControls = () => {\n    if (!comparisonResults) return null;\n    \n    return (\n      <div className=\"visualization-controls mb-6 bg-white p-4 rounded shadow-lg\">\n        <h3 className=\"text-lg font-semibold mb-3\">Visualization Controls</h3>\n        \n        <div className=\"playback-controls flex flex-wrap items-center space-x-2 mb-3\">\n          <button \n            onClick={() => navigateToStep(0)}\n            disabled={currentStep === 0 || isPlaying}\n            className=\"p-2 bg-gray-200 rounded disabled:opacity-50\"\n          >\n            ⏮️ First\n          </button>\n          <button \n            onClick={() => navigateToStep(currentStep - 1)}\n            disabled={currentStep === 0 || isPlaying}\n            className=\"p-2 bg-gray-200 rounded disabled:opacity-50\"\n          >\n            ⏪ Prev\n          </button>\n          <button \n            onClick={togglePlayback}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n          >\n            {isPlaying ? '⏸️ Pause' : '▶️ Play'}\n          </button>\n          <button \n            onClick={() => navigateToStep(currentStep + 1)}\n            disabled={currentStep >= maxSteps - 1 || isPlaying}\n            className=\"p-2 bg-gray-200 rounded disabled:opacity-50\"\n          >\n            ⏩ Next\n          </button>\n          <button \n            onClick={() => navigateToStep(maxSteps - 1)}\n            disabled={currentStep >= maxSteps - 1 || isPlaying}\n            className=\"p-2 bg-gray-200 rounded disabled:opacity-50\"\n          >\n            ⏭️ Last\n          </button>\n          \n          <div className=\"flex items-center ml-4\">\n            <label className=\"mr-2 text-sm\">Speed:</label>\n            <input\n              type=\"range\"\n              min=\"0.1\"\n              max=\"5\"\n              step=\"0.1\"\n              value={playbackSpeed}\n              onChange={(e) => setPlaybackSpeed(parseFloat(e.target.value))}\n              className=\"w-32\"\n            />\n            <span className=\"ml-2 text-sm\">{playbackSpeed}x</span>\n          </div>\n          \n          <div className=\"ml-4 text-sm\">\n            Step: {currentStep} / {maxSteps}\n          </div>\n        </div>\n        \n        <div className=\"progress-bar w-full bg-gray-200 rounded overflow-hidden\">\n          <div \n            className=\"bg-blue-600 h-2 transition-all duration-300\"\n            style={{ width: `${(currentStep / (maxSteps || 1)) * 100}%` }}\n          ></div>\n        </div>\n        \n        {/* Current step information */}\n        {algorithmInstances.map((algorithm, index) => {\n          const stepHistory = stepHistories.current[index];\n          if (!stepHistory || currentStep >= stepHistory.length) return null;\n          \n          const stepData = stepHistory[currentStep];\n          \n          return (\n            <div key={index} className=\"step-info mt-3 p-2 bg-gray-50 rounded text-sm\">\n              <strong>{algorithm.name}:</strong> {stepData.message || `Step ${currentStep}`}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n  \n  return (\n    <div className=\"algorithm-comparison-component\">\n      {/* Test configuration section */}\n      {renderTestCaseConfig()}\n      \n      {/* Visualization controls */}\n      {renderVisControls()}\n      \n      {/* Algorithm visualizations */}\n      {renderAlgorithmVisualizations()}\n      \n      {/* Performance comparison */}\n      {renderPerformanceComparison()}\n    </div>\n  );\n};\n\nexport default AlgorithmComparison;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}