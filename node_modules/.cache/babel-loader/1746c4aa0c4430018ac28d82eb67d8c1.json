{"ast":null,"code":"var _jsxFileName = \"/Users/mohammadatashi/Documents/GitHub/Advanced-Algorithms-Laboratory/sorting-visualizer/src/visualization/components/transform-visualizer.js\";\n// src/visualization/components/transform-visualizer.js\n\n/**\n * @file TransformVisualizer - Specialized visualization component for transformation-based sorting algorithms\n * @author Algorithm Visualization Platform Team\n * @version 2.0.0\n * \n * @description\n * This component provides specialized visualization for sorting algorithms that involve\n * non-standard transformations of the array, such as:\n * \n * - Pancake Sort (prefix reversals)\n * - Cycle Sort (element placement through cycles)\n * - Shell Sort (interleaved subsequence sorting)\n * - Pigeonhole Sort (distribution and collection)\n * \n * The visualization employs a combination of advanced SVG animations, data-driven \n * transformations, and specialized visual metaphors to illuminate the unique operational\n * characteristics of these algorithms. Each transformation type has a dedicated\n * rendering strategy optimized for educational clarity.\n * \n * Performance characteristics:\n * - Time complexity: O(n) for rendering n elements\n * - Animation complexity: O(t) where t is the number of transformations\n * - Memory usage: O(n) for maintaining the visualization state\n */\n\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @constant {Object} TRANSFORM_TYPES - Enumeration of supported transformation types\n * @property {string} PANCAKE - Prefix reversal operations (Pancake Sort)\n * @property {string} CYCLE - Cycle detection and rotation (Cycle Sort)\n * @property {string} SHELL - Interleaved subsequence sorting (Shell Sort)\n * @property {string} PIGEONHOLE - Distribution and collection (Pigeonhole Sort)\n * @property {string} COMB - Gap-based comparison (Comb Sort)\n * @property {string} ODD_EVEN - Parallel even/odd exchanges (Odd-Even Sort)\n * @property {string} GNOME - Local backward stepping (Gnome Sort)\n * @property {string} COCKTAIL - Bidirectional bubble sort (Cocktail Shaker Sort)\n * @property {string} GENERIC - Generic transformation visualization\n */\nconst TRANSFORM_TYPES = {\n  PANCAKE: 'pancake',\n  CYCLE: 'cycle',\n  SHELL: 'shell',\n  PIGEONHOLE: 'pigeonhole',\n  COMB: 'comb',\n  ODD_EVEN: 'odd-even',\n  GNOME: 'gnome',\n  COCKTAIL: 'cocktail',\n  GENERIC: 'generic'\n};\n\n/**\n * @constant {Object} COLOR_PALETTE - Color configuration for visualizations\n */\nconst COLOR_PALETTE = {\n  background: '#f8f9fa',\n  barDefault: '#4a6bdf',\n  barHighlight: '#ffab00',\n  barComparing: '#ff5252',\n  barSwap: '#1de9b6',\n  barSorted: '#00c853',\n  textPrimary: '#212121',\n  textSecondary: '#757575',\n  gridLines: '#e0e0e0',\n  axisLines: '#9e9e9e',\n  // Specialized colors for transformations\n  pancakeFlip: '#9c27b0',\n  cycleDetection: '#1e88e5',\n  shellGap: '#f57c00',\n  pigeonholeDistribution: '#7cb342',\n  combGap: '#6d4c41',\n  oddEvenPhase: '#00acc1',\n  gnomeStep: '#ec407a',\n  cocktailDirection: '#7e57c2'\n};\n\n/**\n * TransformVisualizer Component\n * \n * A specialized visualization component for transformation-based sorting algorithms\n * that renders the unique operations and state transitions in an intuitive, educational manner.\n * \n * @component\n */\nconst TransformVisualizer = ({\n  data,\n  transformationType,\n  currentStep,\n  stepHistory,\n  width,\n  height,\n  colorPalette,\n  animationDuration,\n  showLabels,\n  showAxes,\n  showGrid\n}) => {\n  // Component state\n  const [renderedData, setRenderedData] = useState([]);\n  const [highlightedIndices, setHighlightedIndices] = useState([]);\n  const [transformState, setTransformState] = useState({});\n  const [animations, setAnimations] = useState([]);\n\n  // Refs for DOM manipulation and animations\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const animationRef = useRef(null);\n\n  // Derived state using memoization for performance\n  const mergedPalette = useMemo(() => ({\n    ...COLOR_PALETTE,\n    ...colorPalette\n  }), [colorPalette]);\n\n  // Constants for visualization\n  const BAR_PADDING = 2;\n  const LABEL_HEIGHT = 20;\n  const AXIS_PADDING = showAxes ? 40 : 0;\n  const LABEL_PADDING = showLabels ? LABEL_HEIGHT : 0;\n\n  // Calculate available dimensions for the visualization\n  const availableWidth = width - 2 * AXIS_PADDING;\n  const availableHeight = height - LABEL_PADDING - AXIS_PADDING;\n\n  // Calculate bar dimensions based on available space and data length\n  const barWidth = Math.max(2, availableWidth / (data.length || 1) - BAR_PADDING);\n\n  /**\n   * Find the maximum value in the data array for normalization\n   * @type {number}\n   */\n  const maxValue = useMemo(() => Math.max(...data, 1), [data]);\n\n  /**\n   * Updates the visualization based on the current step\n   */\n  useEffect(() => {\n    if (!stepHistory || stepHistory.length === 0 || currentStep >= stepHistory.length) {\n      return;\n    }\n\n    // Get the current step data\n    const stepData = stepHistory[currentStep];\n    const stepArray = stepData.array || [];\n\n    // Clear any ongoing animations\n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n      animationRef.current = null;\n    }\n\n    // Update visualization with current state\n    setRenderedData(stepArray);\n    setHighlightedIndices(stepData.indices || []);\n\n    // Extract transformation-specific state\n    const newTransformState = extractTransformState(stepData, transformationType);\n    setTransformState(newTransformState);\n\n    // Generate animations for the current transformation\n    const newAnimations = generateAnimations(stepData, transformationType, animationDuration);\n    setAnimations(newAnimations);\n  }, [currentStep, stepHistory, transformationType, animationDuration]);\n\n  /**\n   * Extracts transformation-specific state from step data\n   * @param {Object} stepData - Data for the current step\n   * @param {string} transformType - Type of transformation\n   * @returns {Object} Transformation state for visualization\n   * @private\n   */\n  const extractTransformState = (stepData, transformType) => {\n    // Base state with common properties\n    const baseState = {\n      type: transformType,\n      active: false,\n      message: stepData.message || ''\n    };\n\n    // Early return if step data doesn't contain transformation info\n    if (!stepData.type) {\n      return baseState;\n    }\n\n    // Extract transformation-specific data based on algorithm type\n    switch (transformType) {\n      case TRANSFORM_TYPES.PANCAKE:\n        return {\n          ...baseState,\n          active: stepData.type === 'pancake-flip',\n          flipIndex: stepData.flipIndex,\n          prevFlipIndex: stepData.prevFlipIndex,\n          isFlipping: stepData.isFlipping\n        };\n      case TRANSFORM_TYPES.CYCLE:\n        return {\n          ...baseState,\n          active: stepData.type === 'cycle-detection' || stepData.type === 'cycle-rotation',\n          cycleStart: stepData.cycleStart,\n          cycleIndices: stepData.cycleIndices || [],\n          currentPosition: stepData.currentPosition,\n          isRotating: stepData.type === 'cycle-rotation'\n        };\n      case TRANSFORM_TYPES.SHELL:\n        return {\n          ...baseState,\n          active: stepData.type === 'shell-sort-pass',\n          gap: stepData.gap,\n          groups: stepData.groups || [],\n          currentGroup: stepData.currentGroup,\n          groupProgress: stepData.groupProgress\n        };\n      case TRANSFORM_TYPES.PIGEONHOLE:\n        return {\n          ...baseState,\n          active: stepData.type === 'distribution' || stepData.type === 'collection',\n          phase: stepData.type,\n          buckets: stepData.buckets || [],\n          bucketIndices: stepData.bucketIndices || {},\n          distributionMap: stepData.distributionMap || []\n        };\n      case TRANSFORM_TYPES.COMB:\n        return {\n          ...baseState,\n          active: stepData.type === 'comb-comparison',\n          gap: stepData.gap,\n          shrinkFactor: stepData.shrinkFactor,\n          comparingPairs: stepData.comparingPairs || []\n        };\n      case TRANSFORM_TYPES.ODD_EVEN:\n        return {\n          ...baseState,\n          active: stepData.type === 'odd-phase' || stepData.type === 'even-phase',\n          phase: stepData.type === 'odd-phase' ? 'odd' : 'even',\n          comparingPairs: stepData.comparingPairs || [],\n          swappedPairs: stepData.swappedPairs || []\n        };\n      case TRANSFORM_TYPES.GNOME:\n        return {\n          ...baseState,\n          active: stepData.type === 'gnome-step',\n          position: stepData.position,\n          direction: stepData.direction,\n          // 'forward' or 'backward'\n          comparing: stepData.comparing || []\n        };\n      case TRANSFORM_TYPES.COCKTAIL:\n        return {\n          ...baseState,\n          active: stepData.type === 'cocktail-step',\n          direction: stepData.direction,\n          // 'forward' or 'backward'\n          rangeLow: stepData.rangeLow,\n          rangeHigh: stepData.rangeHigh,\n          comparing: stepData.comparing || []\n        };\n      default:\n        return {\n          ...baseState,\n          active: !!stepData.type.includes('transform'),\n          indices: stepData.indices || [],\n          operation: stepData.operation\n        };\n    }\n  };\n\n  /**\n   * Generates animations for the current transformation\n   * @param {Object} stepData - Data for the current step\n   * @param {string} transformType - Type of transformation\n   * @param {number} duration - Animation duration in milliseconds\n   * @returns {Array} Array of animation definitions\n   * @private\n   */\n  const generateAnimations = (stepData, transformType, duration) => {\n    // Early return if step data doesn't contain transformation info\n    if (!stepData.type) {\n      return [];\n    }\n    const animations = [];\n\n    // Generate animation based on transformation type\n    switch (transformType) {\n      case TRANSFORM_TYPES.PANCAKE:\n        if (stepData.type === 'pancake-flip' && stepData.flipIndex !== undefined) {\n          // Generate flip animation\n          const flipIndex = stepData.flipIndex;\n          for (let i = 0; i <= Math.floor(flipIndex / 2); i++) {\n            animations.push({\n              type: 'swap',\n              index1: i,\n              index2: flipIndex - i,\n              duration: duration,\n              delay: i * (duration / 10)\n            });\n          }\n        }\n        break;\n      case TRANSFORM_TYPES.CYCLE:\n        if (stepData.type === 'cycle-rotation' && Array.isArray(stepData.cycleIndices)) {\n          // Generate cycle rotation animation\n          const cycleIndices = stepData.cycleIndices;\n          for (let i = 0; i < cycleIndices.length - 1; i++) {\n            animations.push({\n              type: 'move',\n              fromIndex: cycleIndices[i],\n              toIndex: cycleIndices[i + 1],\n              duration: duration / cycleIndices.length,\n              delay: i * (duration / cycleIndices.length)\n            });\n          }\n\n          // Complete the cycle\n          if (cycleIndices.length > 1) {\n            animations.push({\n              type: 'move',\n              fromIndex: cycleIndices[cycleIndices.length - 1],\n              toIndex: cycleIndices[0],\n              duration: duration / cycleIndices.length,\n              delay: (cycleIndices.length - 1) * (duration / cycleIndices.length)\n            });\n          }\n        }\n        break;\n      case TRANSFORM_TYPES.SHELL:\n        if (stepData.type === 'shell-sort-pass' && stepData.gap !== undefined) {\n          // Generate shell sort group animations\n          const groups = stepData.groups || [];\n          groups.forEach((group, groupIndex) => {\n            group.forEach((index, i) => {\n              if (i < group.length - 1) {\n                animations.push({\n                  type: 'compare',\n                  index1: index,\n                  index2: group[i + 1],\n                  duration: duration / 2,\n                  delay: groupIndex * (duration / groups.length)\n                });\n              }\n            });\n          });\n        }\n        break;\n      case TRANSFORM_TYPES.PIGEONHOLE:\n        if (stepData.type === 'distribution') {\n          // Generate distribution animations\n          const distributionMap = stepData.distributionMap || [];\n          distributionMap.forEach((targetBucket, sourceIndex) => {\n            animations.push({\n              type: 'move-to-bucket',\n              fromIndex: sourceIndex,\n              toBucket: targetBucket,\n              duration: duration,\n              delay: sourceIndex * (duration / distributionMap.length / 2)\n            });\n          });\n        } else if (stepData.type === 'collection') {\n          // Generate collection animations\n          const buckets = stepData.buckets || [];\n          let currentIndex = 0;\n          buckets.forEach((bucket, bucketIndex) => {\n            bucket.forEach((value, valueIndex) => {\n              animations.push({\n                type: 'move-from-bucket',\n                fromBucket: bucketIndex,\n                bucketIndex: valueIndex,\n                toIndex: currentIndex,\n                duration: duration,\n                delay: currentIndex * (duration / data.length / 2)\n              });\n              currentIndex++;\n            });\n          });\n        }\n        break;\n      case TRANSFORM_TYPES.COMB:\n        if (stepData.type === 'comb-comparison' && Array.isArray(stepData.comparingPairs)) {\n          // Generate comb comparison animations\n          stepData.comparingPairs.forEach((pair, pairIndex) => {\n            animations.push({\n              type: 'compare',\n              index1: pair[0],\n              index2: pair[1],\n              duration: duration / 2,\n              delay: pairIndex * (duration / stepData.comparingPairs.length)\n            });\n\n            // If there was a swap\n            if (stepData.swappedPairs && stepData.swappedPairs.some(swapPair => swapPair[0] === pair[0] && swapPair[1] === pair[1])) {\n              animations.push({\n                type: 'swap',\n                index1: pair[0],\n                index2: pair[1],\n                duration: duration / 2,\n                delay: pairIndex * (duration / stepData.comparingPairs.length) + duration / 2\n              });\n            }\n          });\n        }\n        break;\n      case TRANSFORM_TYPES.ODD_EVEN:\n        if ((stepData.type === 'odd-phase' || stepData.type === 'even-phase') && Array.isArray(stepData.comparingPairs)) {\n          // Generate odd-even phase animations\n          stepData.comparingPairs.forEach((pair, pairIndex) => {\n            animations.push({\n              type: 'compare',\n              index1: pair[0],\n              index2: pair[1],\n              duration: duration / 3,\n              delay: pairIndex * (duration / stepData.comparingPairs.length / 3)\n            });\n\n            // If there was a swap\n            if (stepData.swappedPairs && stepData.swappedPairs.some(swapPair => swapPair[0] === pair[0] && swapPair[1] === pair[1])) {\n              animations.push({\n                type: 'swap',\n                index1: pair[0],\n                index2: pair[1],\n                duration: duration / 3,\n                delay: pairIndex * (duration / stepData.comparingPairs.length / 3) + duration / 3\n              });\n            }\n          });\n        }\n        break;\n      case TRANSFORM_TYPES.GNOME:\n        if (stepData.type === 'gnome-step' && stepData.position !== undefined) {\n          // Generate gnome step animation\n          if (stepData.direction === 'backward' && stepData.comparing && stepData.comparing.length === 2) {\n            animations.push({\n              type: 'swap',\n              index1: stepData.comparing[0],\n              index2: stepData.comparing[1],\n              duration: duration,\n              delay: 0\n            });\n          } else if (stepData.direction === 'forward') {\n            animations.push({\n              type: 'highlight',\n              index: stepData.position,\n              duration: duration,\n              delay: 0\n            });\n          }\n        }\n        break;\n      case TRANSFORM_TYPES.COCKTAIL:\n        if (stepData.type === 'cocktail-step' && stepData.comparing && stepData.comparing.length === 2) {\n          // Generate cocktail step animation\n          animations.push({\n            type: 'compare',\n            index1: stepData.comparing[0],\n            index2: stepData.comparing[1],\n            duration: duration / 2,\n            delay: 0\n          });\n\n          // If there was a swap\n          if (stepData.swapped) {\n            animations.push({\n              type: 'swap',\n              index1: stepData.comparing[0],\n              index2: stepData.comparing[1],\n              duration: duration / 2,\n              delay: duration / 2\n            });\n          }\n        }\n        break;\n      default:\n        // Generic transformation animations\n        if (stepData.indices && stepData.indices.length > 0) {\n          stepData.indices.forEach(index => {\n            animations.push({\n              type: 'highlight',\n              index: index,\n              duration: duration,\n              delay: 0\n            });\n          });\n        }\n    }\n    return animations;\n  };\n\n  /**\n   * Returns the appropriate component to visualize the current transformation\n   * @returns {JSX.Element} The specialized visualization component\n   */\n  const renderTransformVisualization = () => {\n    switch (transformationType) {\n      case TRANSFORM_TYPES.PANCAKE:\n        return renderPancakeVisualization();\n      case TRANSFORM_TYPES.CYCLE:\n        return renderCycleVisualization();\n      case TRANSFORM_TYPES.SHELL:\n        return renderShellVisualization();\n      case TRANSFORM_TYPES.PIGEONHOLE:\n        return renderPigeonholeVisualization();\n      case TRANSFORM_TYPES.COMB:\n        return renderCombVisualization();\n      case TRANSFORM_TYPES.ODD_EVEN:\n        return renderOddEvenVisualization();\n      case TRANSFORM_TYPES.GNOME:\n        return renderGnomeVisualization();\n      case TRANSFORM_TYPES.COCKTAIL:\n        return renderCocktailVisualization();\n      default:\n        return renderGenericVisualization();\n    }\n  };\n\n  /**\n   * Renders the pancake sorting visualization - specialized for prefix reversal operations\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderPancakeVisualization = () => {\n    const {\n      flipIndex,\n      isFlipping\n    } = transformState;\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      ref: svgRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 7\n      }\n    }, showGrid && renderGrid(), showAxes && renderAxes(), /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${AXIS_PADDING}, ${AXIS_PADDING})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 9\n      }\n    }, renderedData.map((value, index) => {\n      const isHighlighted = highlightedIndices.includes(index);\n      const isFlipped = flipIndex !== undefined && index <= flipIndex;\n\n      // Calculate bar properties\n      const barHeight = value / maxValue * availableHeight;\n      const x = index * (barWidth + BAR_PADDING);\n      const y = availableHeight - barHeight;\n\n      // Animation transformations\n      let transform = '';\n      if (isFlipping && isFlipped) {\n        // Calculate rotation based on position in the flip range\n        const relativePos = (flipIndex - index) / flipIndex;\n        const rotationAxis = flipIndex * (barWidth + BAR_PADDING) / 2;\n        transform = `rotate(${180 * relativePos}, ${rotationAxis}, ${availableHeight / 2})`;\n      }\n\n      // Determine bar color\n      let fill = mergedPalette.barDefault;\n      if (isHighlighted) {\n        fill = mergedPalette.barHighlight;\n      } else if (isFlipped) {\n        fill = mergedPalette.pancakeFlip;\n      }\n      return /*#__PURE__*/React.createElement(\"rect\", {\n        key: `bar-${index}`,\n        x: x,\n        y: y,\n        width: barWidth,\n        height: barHeight,\n        fill: fill,\n        stroke: isHighlighted ? '#000' : 'none',\n        strokeWidth: isHighlighted ? 1 : 0,\n        transform: transform,\n        style: {\n          transition: 'all 0.3s ease-in-out'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 15\n        }\n      });\n    }), flipIndex !== undefined && /*#__PURE__*/React.createElement(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"line\", {\n      x1: 0,\n      y1: availableHeight + 5,\n      x2: (flipIndex + 1) * (barWidth + BAR_PADDING) - BAR_PADDING,\n      y2: availableHeight + 5,\n      stroke: mergedPalette.pancakeFlip,\n      strokeWidth: 3,\n      strokeDasharray: \"5,3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"path\", {\n      d: `M${(flipIndex + 1) * (barWidth + BAR_PADDING) / 2},${availableHeight + 15} \n                    A${availableWidth / 4},${availableHeight / 4} 0 0,1 \n                    ${(flipIndex + 1) * (barWidth + BAR_PADDING) - BAR_PADDING},${availableHeight + 15}`,\n      fill: \"none\",\n      stroke: mergedPalette.pancakeFlip,\n      strokeWidth: 2,\n      markerEnd: \"url(#arrowhead)\",\n      opacity: isFlipping ? 1 : 0.5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"defs\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"marker\", {\n      id: \"arrowhead\",\n      markerWidth: \"10\",\n      markerHeight: \"7\",\n      refX: \"10\",\n      refY: \"3.5\",\n      orient: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"polygon\", {\n      points: \"0 0, 10 3.5, 0 7\",\n      fill: mergedPalette.pancakeFlip,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 19\n      }\n    }))))), showLabels && renderLabels());\n  };\n\n  /**\n   * Renders the cycle sort visualization - specialized for cycle detection and rotation\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderCycleVisualization = () => {\n    const {\n      cycleStart,\n      cycleIndices,\n      isRotating,\n      currentPosition\n    } = transformState;\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      ref: svgRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 7\n      }\n    }, showGrid && renderGrid(), showAxes && renderAxes(), /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${AXIS_PADDING}, ${AXIS_PADDING})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 9\n      }\n    }, renderedData.map((value, index) => {\n      const isHighlighted = highlightedIndices.includes(index);\n      const isInCycle = cycleIndices && cycleIndices.includes(index);\n      const isCycleStart = index === cycleStart;\n      const isCurrentPosition = index === currentPosition;\n\n      // Calculate bar properties\n      const barHeight = value / maxValue * availableHeight;\n      const x = index * (barWidth + BAR_PADDING);\n      const y = availableHeight - barHeight;\n\n      // Determine bar color\n      let fill = mergedPalette.barDefault;\n      if (isCurrentPosition) {\n        fill = mergedPalette.barHighlight;\n      } else if (isCycleStart) {\n        fill = mergedPalette.barSwap;\n      } else if (isInCycle) {\n        fill = mergedPalette.cycleDetection;\n      } else if (isHighlighted) {\n        fill = mergedPalette.barHighlight;\n      }\n      return /*#__PURE__*/React.createElement(\"rect\", {\n        key: `bar-${index}`,\n        x: x,\n        y: y,\n        width: barWidth,\n        height: barHeight,\n        fill: fill,\n        stroke: isHighlighted || isInCycle ? '#000' : 'none',\n        strokeWidth: isHighlighted || isInCycle ? 1 : 0,\n        style: {\n          transition: 'all 0.3s ease-in-out'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 15\n        }\n      });\n    }), cycleIndices && cycleIndices.length > 0 && /*#__PURE__*/React.createElement(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 13\n      }\n    }, cycleIndices.map((index, i) => {\n      const nextIndex = cycleIndices[(i + 1) % cycleIndices.length];\n      const startX = index * (barWidth + BAR_PADDING) + barWidth / 2;\n      const startY = availableHeight - renderedData[index] / maxValue * availableHeight - 10;\n      const endX = nextIndex * (barWidth + BAR_PADDING) + barWidth / 2;\n      const endY = availableHeight - renderedData[nextIndex] / maxValue * availableHeight - 10;\n\n      // Create curved path between cycle elements\n      const controlPointY = Math.min(startY, endY) - 50;\n      return /*#__PURE__*/React.createElement(\"path\", {\n        key: `cycle-${i}`,\n        d: `M${startX},${startY} C${startX},${controlPointY} ${endX},${controlPointY} ${endX},${endY}`,\n        fill: \"none\",\n        stroke: mergedPalette.cycleDetection,\n        strokeWidth: 2,\n        strokeDasharray: isRotating ? \"5,5\" : \"none\",\n        markerEnd: \"url(#cycleArrow)\",\n        opacity: 0.7,\n        style: {\n          transition: 'all 0.3s ease-in-out'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 19\n        }\n      });\n    }), /*#__PURE__*/React.createElement(\"defs\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"marker\", {\n      id: \"cycleArrow\",\n      markerWidth: \"10\",\n      markerHeight: \"7\",\n      refX: \"10\",\n      refY: \"3.5\",\n      orient: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"polygon\", {\n      points: \"0 0, 10 3.5, 0 7\",\n      fill: mergedPalette.cycleDetection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 19\n      }\n    }))))), showLabels && renderLabels());\n  };\n\n  /**\n   * Renders the shell sort visualization - specialized for interleaved subsequence sorting\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderShellVisualization = () => {\n    const {\n      gap,\n      groups,\n      currentGroup\n    } = transformState;\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      ref: svgRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781,\n        columnNumber: 7\n      }\n    }, showGrid && renderGrid(), showAxes && renderAxes(), /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${AXIS_PADDING}, ${AXIS_PADDING})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789,\n        columnNumber: 9\n      }\n    }, gap && groups && groups.length > 0 && /*#__PURE__*/React.createElement(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 792,\n        columnNumber: 13\n      }\n    }, groups.map((group, groupIndex) => {\n      const isCurrentGroup = groupIndex === currentGroup;\n      return /*#__PURE__*/React.createElement(\"g\", {\n        key: `group-${groupIndex}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 797,\n          columnNumber: 19\n        }\n      }, group.map((index, i) => {\n        // Only connect consecutive elements in the same group\n        if (i < group.length - 1) {\n          const startX = index * (barWidth + BAR_PADDING) + barWidth / 2;\n          const endX = group[i + 1] * (barWidth + BAR_PADDING) + barWidth / 2;\n          return /*#__PURE__*/React.createElement(\"line\", {\n            key: `connection-${groupIndex}-${i}`,\n            x1: startX,\n            y1: availableHeight + 15,\n            x2: endX,\n            y2: availableHeight + 15,\n            stroke: isCurrentGroup ? mergedPalette.shellGap : mergedPalette.gridLines,\n            strokeWidth: isCurrentGroup ? 2 : 1,\n            strokeDasharray: isCurrentGroup ? \"none\" : \"5,5\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 805,\n              columnNumber: 27\n            }\n          });\n        }\n        return null;\n      }));\n    })), renderedData.map((value, index) => {\n      const isHighlighted = highlightedIndices.includes(index);\n\n      // Determine if this index is part of the current group\n      const isCurrentGroupElement = groups && currentGroup !== undefined && groups[currentGroup] && groups[currentGroup].includes(index);\n\n      // Calculate bar properties\n      const barHeight = value / maxValue * availableHeight;\n      const x = index * (barWidth + BAR_PADDING);\n      const y = availableHeight - barHeight;\n\n      // Determine bar color\n      let fill = mergedPalette.barDefault;\n      if (isHighlighted) {\n        fill = mergedPalette.barHighlight;\n      } else if (isCurrentGroupElement) {\n        fill = mergedPalette.shellGap;\n      }\n      return /*#__PURE__*/React.createElement(\"rect\", {\n        key: `bar-${index}`,\n        x: x,\n        y: y,\n        width: barWidth,\n        height: barHeight,\n        fill: fill,\n        stroke: isHighlighted || isCurrentGroupElement ? '#000' : 'none',\n        strokeWidth: isHighlighted || isCurrentGroupElement ? 1 : 0,\n        style: {\n          transition: 'all 0.3s ease-in-out'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 849,\n          columnNumber: 15\n        }\n      });\n    }), gap && /*#__PURE__*/React.createElement(\"text\", {\n      x: availableWidth - 60,\n      y: 30,\n      fill: mergedPalette.textPrimary,\n      fontSize: 14,\n      fontWeight: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 865,\n        columnNumber: 13\n      }\n    }, \"Gap: \", gap)), showLabels && renderLabels());\n  };\n\n  /**\n   * Renders the pigeonhole sort visualization - specialized for distribution and collection\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderPigeonholeVisualization = () => {\n    const {\n      phase,\n      buckets,\n      distributionMap\n    } = transformState;\n    const isDistribution = phase === 'distribution';\n    const isCollection = phase === 'collection';\n\n    // Bucket rendering constants\n    const bucketWidth = Math.min(50, availableWidth / ((buckets === null || buckets === void 0 ? void 0 : buckets.length) || 1) - 10);\n    const bucketSpacing = 10;\n    const bucketY = availableHeight / 2;\n    const bucketHeight = availableHeight / 2;\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      ref: svgRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 900,\n        columnNumber: 7\n      }\n    }, showGrid && renderGrid(), showAxes && renderAxes(), /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${AXIS_PADDING}, ${AXIS_PADDING})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 908,\n        columnNumber: 9\n      }\n    }, renderedData.map((value, index) => {\n      const isHighlighted = highlightedIndices.includes(index);\n      const isDistributing = isDistribution && distributionMap && distributionMap[index] !== undefined;\n\n      // Calculate bar properties\n      const barHeight = value / maxValue * availableHeight / 2; // Half height for distribution view\n      const x = index * (barWidth + BAR_PADDING);\n      const y = availableHeight / 2 - barHeight; // Position in top half\n\n      // Determine bar color\n      let fill = mergedPalette.barDefault;\n      if (isHighlighted) {\n        fill = mergedPalette.barHighlight;\n      } else if (isDistributing) {\n        fill = mergedPalette.pigeonholeDistribution;\n      }\n\n      // For collection phase, don't render original array\n      if (isCollection) {\n        return null;\n      }\n      return /*#__PURE__*/React.createElement(\"rect\", {\n        key: `bar-${index}`,\n        x: x,\n        y: y,\n        width: barWidth,\n        height: barHeight,\n        fill: fill,\n        stroke: isHighlighted ? '#000' : 'none',\n        strokeWidth: isHighlighted ? 1 : 0,\n        style: {\n          transition: 'all 0.3s ease-in-out'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 932,\n          columnNumber: 15\n        }\n      });\n    })), isDistribution && distributionMap && /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${AXIS_PADDING}, ${AXIS_PADDING})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 949,\n        columnNumber: 11\n      }\n    }, distributionMap.map((bucketIndex, arrayIndex) => {\n      const sourceX = arrayIndex * (barWidth + BAR_PADDING) + barWidth / 2;\n      const sourceY = availableHeight / 2;\n      const targetX = (bucketWidth + bucketSpacing) * bucketIndex + bucketWidth / 2;\n      const targetY = bucketY;\n      return /*#__PURE__*/React.createElement(\"line\", {\n        key: `dist-arrow-${arrayIndex}`,\n        x1: sourceX,\n        y1: sourceY,\n        x2: targetX,\n        y2: targetY,\n        stroke: mergedPalette.pigeonholeDistribution,\n        strokeWidth: 1,\n        strokeDasharray: \"5,3\",\n        markerEnd: \"url(#pigeonholeArrow)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 957,\n          columnNumber: 17\n        }\n      });\n    }), /*#__PURE__*/React.createElement(\"defs\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 972,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"marker\", {\n      id: \"pigeonholeArrow\",\n      markerWidth: \"10\",\n      markerHeight: \"7\",\n      refX: \"10\",\n      refY: \"3.5\",\n      orient: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 973,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"polygon\", {\n      points: \"0 0, 10 3.5, 0 7\",\n      fill: mergedPalette.pigeonholeDistribution,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 981,\n        columnNumber: 17\n      }\n    })))), buckets && buckets.length > 0 && /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${AXIS_PADDING}, ${AXIS_PADDING})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 992,\n        columnNumber: 11\n      }\n    }, buckets.map((bucket, bucketIndex) => {\n      return /*#__PURE__*/React.createElement(\"g\", {\n        key: `bucket-${bucketIndex}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 995,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"rect\", {\n        x: (bucketWidth + bucketSpacing) * bucketIndex,\n        y: bucketY,\n        width: bucketWidth,\n        height: bucketHeight,\n        fill: mergedPalette.background,\n        stroke: mergedPalette.gridLines,\n        strokeWidth: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 997,\n          columnNumber: 19\n        }\n      }), /*#__PURE__*/React.createElement(\"text\", {\n        x: (bucketWidth + bucketSpacing) * bucketIndex + bucketWidth / 2,\n        y: bucketY - 5,\n        textAnchor: \"middle\",\n        fill: mergedPalette.textPrimary,\n        fontSize: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1008,\n          columnNumber: 19\n        }\n      }, bucketIndex), bucket.map((value, valueIndex) => {\n        const itemHeight = Math.min(20, (bucketHeight - 10) / bucket.length);\n        const itemY = bucketY + 5 + valueIndex * itemHeight;\n        return /*#__PURE__*/React.createElement(\"rect\", {\n          key: `bucket-item-${bucketIndex}-${valueIndex}`,\n          x: (bucketWidth + bucketSpacing) * bucketIndex + 5,\n          y: itemY,\n          width: bucketWidth - 10,\n          height: itemHeight - 2,\n          fill: mergedPalette.pigeonholeDistribution,\n          rx: 2,\n          ry: 2,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1024,\n            columnNumber: 23\n          }\n        });\n      }));\n    })), (isDistribution || isCollection) && /*#__PURE__*/React.createElement(\"text\", {\n      x: width - 150,\n      y: 30,\n      fill: mergedPalette.textPrimary,\n      fontSize: 14,\n      fontWeight: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1044,\n        columnNumber: 11\n      }\n    }, \"Phase: \", phase), showLabels && renderLabels());\n  };\n\n  /**\n   * Renders the comb sort visualization - specialized for varying gap comparisons\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderCombVisualization = () => {\n    const {\n      gap,\n      comparingPairs,\n      shrinkFactor\n    } = transformState;\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      ref: svgRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1070,\n        columnNumber: 7\n      }\n    }, showGrid && renderGrid(), showAxes && renderAxes(), /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${AXIS_PADDING}, ${AXIS_PADDING})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1078,\n        columnNumber: 9\n      }\n    }, renderedData.map((value, index) => {\n      const isHighlighted = highlightedIndices.includes(index);\n      const isComparing = comparingPairs && comparingPairs.some(pair => pair.includes(index));\n\n      // Calculate bar properties\n      const barHeight = value / maxValue * availableHeight;\n      const x = index * (barWidth + BAR_PADDING);\n      const y = availableHeight - barHeight;\n\n      // Determine bar color\n      let fill = mergedPalette.barDefault;\n      if (isHighlighted) {\n        fill = mergedPalette.barHighlight;\n      } else if (isComparing) {\n        fill = mergedPalette.combGap;\n      }\n      return /*#__PURE__*/React.createElement(\"rect\", {\n        key: `bar-${index}`,\n        x: x,\n        y: y,\n        width: barWidth,\n        height: barHeight,\n        fill: fill,\n        stroke: isHighlighted || isComparing ? '#000' : 'none',\n        strokeWidth: isHighlighted || isComparing ? 1 : 0,\n        style: {\n          transition: 'all 0.3s ease-in-out'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1099,\n          columnNumber: 15\n        }\n      });\n    }), comparingPairs && comparingPairs.length > 0 && /*#__PURE__*/React.createElement(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1115,\n        columnNumber: 13\n      }\n    }, comparingPairs.map((pair, pairIndex) => {\n      if (pair && pair.length === 2) {\n        const index1 = pair[0];\n        const index2 = pair[1];\n        const x1 = index1 * (barWidth + BAR_PADDING) + barWidth / 2;\n        const x2 = index2 * (barWidth + BAR_PADDING) + barWidth / 2;\n        return /*#__PURE__*/React.createElement(\"g\", {\n          key: `comb-pair-${pairIndex}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1124,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"line\", {\n          x1: x1,\n          y1: availableHeight + 10,\n          x2: x2,\n          y2: availableHeight + 10,\n          stroke: mergedPalette.combGap,\n          strokeWidth: 2,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1125,\n            columnNumber: 23\n          }\n        }), /*#__PURE__*/React.createElement(\"text\", {\n          x: (x1 + x2) / 2,\n          y: availableHeight + 25,\n          textAnchor: \"middle\",\n          fill: mergedPalette.textPrimary,\n          fontSize: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1135,\n            columnNumber: 23\n          }\n        }, \"gap: \", index2 - index1));\n      }\n      return null;\n    })), shrinkFactor && /*#__PURE__*/React.createElement(\"text\", {\n      x: availableWidth - 140,\n      y: 30,\n      fill: mergedPalette.textPrimary,\n      fontSize: 14,\n      fontWeight: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1154,\n        columnNumber: 13\n      }\n    }, \"Shrink factor: \", shrinkFactor.toFixed(2))), showLabels && renderLabels());\n  };\n\n  /**\n   * Renders the odd-even sort visualization - specialized for alternating phases\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderOddEvenVisualization = () => {\n    const {\n      phase,\n      comparingPairs,\n      swappedPairs\n    } = transformState;\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      ref: svgRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1181,\n        columnNumber: 7\n      }\n    }, showGrid && renderGrid(), showAxes && renderAxes(), /*#__PURE__*/React.createElement(\"rect\", {\n      x: 0,\n      y: 0,\n      width: width,\n      height: AXIS_PADDING - 5,\n      fill: phase === 'odd' ? mergedPalette.oddEvenPhase : mergedPalette.textSecondary,\n      opacity: 0.2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1189,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"text\", {\n      x: width / 2,\n      y: AXIS_PADDING - 10,\n      textAnchor: \"middle\",\n      fill: mergedPalette.textPrimary,\n      fontSize: 14,\n      fontWeight: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1198,\n        columnNumber: 9\n      }\n    }, phase === 'odd' ? 'Odd Phase' : 'Even Phase'), /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${AXIS_PADDING}, ${AXIS_PADDING})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1210,\n        columnNumber: 9\n      }\n    }, renderedData.map((value, index) => {\n      const isHighlighted = highlightedIndices.includes(index);\n      const isComparing = comparingPairs && comparingPairs.some(pair => pair.includes(index));\n      const isSwapped = swappedPairs && swappedPairs.some(pair => pair.includes(index));\n\n      // Calculate bar properties\n      const barHeight = value / maxValue * availableHeight;\n      const x = index * (barWidth + BAR_PADDING);\n      const y = availableHeight - barHeight;\n\n      // Determine bar color\n      let fill = mergedPalette.barDefault;\n      if (isSwapped) {\n        fill = mergedPalette.barSwap;\n      } else if (isComparing) {\n        fill = mergedPalette.oddEvenPhase;\n      } else if (isHighlighted) {\n        fill = mergedPalette.barHighlight;\n      }\n\n      // Determine if this is in an active pair based on phase\n      const isActivePositionInPhase = phase === 'odd' && index % 2 === 0 || phase === 'even' && index % 2 === 1;\n      return /*#__PURE__*/React.createElement(\"g\", {\n        key: `bar-${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1240,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"rect\", {\n        x: x,\n        y: y,\n        width: barWidth,\n        height: barHeight,\n        fill: fill,\n        stroke: isHighlighted || isComparing ? '#000' : 'none',\n        strokeWidth: isHighlighted || isComparing ? 1 : 0,\n        style: {\n          transition: 'all 0.3s ease-in-out'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1241,\n          columnNumber: 17\n        }\n      }), isActivePositionInPhase && index < renderedData.length - 1 && /*#__PURE__*/React.createElement(\"line\", {\n        x1: x + barWidth,\n        y1: availableHeight + 5,\n        x2: (index + 1) * (barWidth + BAR_PADDING),\n        y2: availableHeight + 5,\n        stroke: phase === 'odd' ? mergedPalette.oddEvenPhase : mergedPalette.textSecondary,\n        strokeWidth: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1254,\n          columnNumber: 19\n        }\n      }));\n    }), comparingPairs && comparingPairs.length > 0 && /*#__PURE__*/React.createElement(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1269,\n        columnNumber: 13\n      }\n    }, comparingPairs.map((pair, pairIndex) => {\n      if (pair && pair.length === 2) {\n        const index1 = pair[0];\n        const index2 = pair[1];\n        const x1 = index1 * (barWidth + BAR_PADDING) + barWidth / 2;\n        const x2 = index2 * (barWidth + BAR_PADDING) + barWidth / 2;\n        const y1 = availableHeight - renderedData[index1] / maxValue * availableHeight;\n        const y2 = availableHeight - renderedData[index2] / maxValue * availableHeight;\n\n        // Check if this pair was swapped\n        const wasSwapped = swappedPairs && swappedPairs.some(swapPair => swapPair[0] === pair[0] && swapPair[1] === pair[1]);\n        return /*#__PURE__*/React.createElement(\"g\", {\n          key: `comparison-${pairIndex}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1285,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"line\", {\n          x1: x1,\n          y1: Math.min(y1, y2) - 5,\n          x2: x2,\n          y2: Math.min(y1, y2) - 5,\n          stroke: wasSwapped ? mergedPalette.barSwap : mergedPalette.oddEvenPhase,\n          strokeWidth: wasSwapped ? 2 : 1,\n          strokeDasharray: wasSwapped ? \"none\" : \"5,3\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1286,\n            columnNumber: 23\n          }\n        }));\n      }\n      return null;\n    }))), showLabels && renderLabels());\n  };\n\n  /**\n   * Renders the gnome sort visualization - specialized for local backward stepping\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderGnomeVisualization = () => {\n    const {\n      position,\n      direction,\n      comparing\n    } = transformState;\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      ref: svgRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1319,\n        columnNumber: 7\n      }\n    }, showGrid && renderGrid(), showAxes && renderAxes(), /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${AXIS_PADDING}, ${AXIS_PADDING})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1327,\n        columnNumber: 9\n      }\n    }, renderedData.map((value, index) => {\n      const isHighlighted = highlightedIndices.includes(index);\n      const isCurrentPosition = index === position;\n      const isComparing = comparing && comparing.includes(index);\n\n      // Calculate bar properties\n      const barHeight = value / maxValue * availableHeight;\n      const x = index * (barWidth + BAR_PADDING);\n      const y = availableHeight - barHeight;\n\n      // Determine bar color\n      let fill = mergedPalette.barDefault;\n      if (isCurrentPosition) {\n        fill = mergedPalette.gnomeStep;\n      } else if (isComparing) {\n        fill = direction === 'backward' ? mergedPalette.barSwap : mergedPalette.barComparing;\n      } else if (isHighlighted) {\n        fill = mergedPalette.barHighlight;\n      }\n      return /*#__PURE__*/React.createElement(\"rect\", {\n        key: `bar-${index}`,\n        x: x,\n        y: y,\n        width: barWidth,\n        height: barHeight,\n        fill: fill,\n        stroke: isHighlighted || isCurrentPosition || isComparing ? '#000' : 'none',\n        strokeWidth: isHighlighted || isCurrentPosition || isComparing ? 1 : 0,\n        style: {\n          transition: 'all 0.3s ease-in-out'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1350,\n          columnNumber: 15\n        }\n      });\n    }), position !== undefined && direction && /*#__PURE__*/React.createElement(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1366,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"path\", {\n      d: direction === 'forward' ? `M${position * (barWidth + BAR_PADDING) + barWidth / 2},${availableHeight + 15} \n                       l10,0 l-5,-8 z` : `M${position * (barWidth + BAR_PADDING) + barWidth / 2},${availableHeight + 15} \n                       l-10,0 l5,-8 z`,\n      fill: direction === 'forward' ? mergedPalette.barDefault : mergedPalette.gnomeStep,\n      stroke: \"none\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1368,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"line\", {\n      x1: position * (barWidth + BAR_PADDING) + barWidth / 2,\n      y1: availableHeight + 5,\n      x2: position * (barWidth + BAR_PADDING) + barWidth / 2,\n      y2: availableHeight + 25,\n      stroke: mergedPalette.gnomeStep,\n      strokeWidth: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1381,\n        columnNumber: 15\n      }\n    }))), showLabels && renderLabels());\n  };\n\n  /**\n   * Renders the cocktail sort visualization - specialized for bidirectional passes\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderCocktailVisualization = () => {\n    const {\n      direction,\n      rangeLow,\n      rangeHigh,\n      comparing\n    } = transformState;\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      ref: svgRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1408,\n        columnNumber: 7\n      }\n    }, showGrid && renderGrid(), showAxes && renderAxes(), /*#__PURE__*/React.createElement(\"rect\", {\n      x: 0,\n      y: 0,\n      width: width,\n      height: AXIS_PADDING - 5,\n      fill: direction === 'forward' ? mergedPalette.cocktailDirection : mergedPalette.barHighlight,\n      opacity: 0.2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1416,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"text\", {\n      x: width / 2,\n      y: AXIS_PADDING - 10,\n      textAnchor: \"middle\",\n      fill: mergedPalette.textPrimary,\n      fontSize: 14,\n      fontWeight: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1425,\n        columnNumber: 9\n      }\n    }, direction === 'forward' ? 'Forward Pass' : 'Backward Pass'), /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${AXIS_PADDING}, ${AXIS_PADDING})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1437,\n        columnNumber: 9\n      }\n    }, rangeLow !== undefined && rangeHigh !== undefined && /*#__PURE__*/React.createElement(\"rect\", {\n      x: rangeLow * (barWidth + BAR_PADDING),\n      y: 0,\n      width: (rangeHigh - rangeLow + 1) * (barWidth + BAR_PADDING) - BAR_PADDING,\n      height: availableHeight,\n      fill: direction === 'forward' ? mergedPalette.cocktailDirection : mergedPalette.barHighlight,\n      opacity: 0.1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1440,\n        columnNumber: 13\n      }\n    }), renderedData.map((value, index) => {\n      const isHighlighted = highlightedIndices.includes(index);\n      const isComparing = comparing && comparing.includes(index);\n      const isInActiveRange = rangeLow !== undefined && rangeHigh !== undefined && index >= rangeLow && index <= rangeHigh;\n\n      // Calculate bar properties\n      const barHeight = value / maxValue * availableHeight;\n      const x = index * (barWidth + BAR_PADDING);\n      const y = availableHeight - barHeight;\n\n      // Determine bar color\n      let fill = mergedPalette.barDefault;\n      if (isComparing) {\n        fill = mergedPalette.cocktailDirection;\n      } else if (isHighlighted) {\n        fill = mergedPalette.barHighlight;\n      } else if (isInActiveRange) {\n        fill = mergedPalette.barDefault;\n      } else {\n        fill = mergedPalette.barSorted; // Elements outside the range are sorted\n      }\n      return /*#__PURE__*/React.createElement(\"rect\", {\n        key: `bar-${index}`,\n        x: x,\n        y: y,\n        width: barWidth,\n        height: barHeight,\n        fill: fill,\n        stroke: isHighlighted || isComparing ? '#000' : 'none',\n        strokeWidth: isHighlighted || isComparing ? 1 : 0,\n        style: {\n          transition: 'all 0.3s ease-in-out'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1477,\n          columnNumber: 15\n        }\n      });\n    }), direction && /*#__PURE__*/React.createElement(\"path\", {\n      d: direction === 'forward' ? `M${rangeLow * (barWidth + BAR_PADDING)},${availableHeight + 15} \n                     H${rangeHigh * (barWidth + BAR_PADDING) + barWidth} \n                     l-8,-5 v10 l8,-5` : `M${rangeHigh * (barWidth + BAR_PADDING) + barWidth},${availableHeight + 15} \n                     H${rangeLow * (barWidth + BAR_PADDING)} \n                     l8,-5 v10 l-8,-5`,\n      fill: \"none\",\n      stroke: direction === 'forward' ? mergedPalette.cocktailDirection : mergedPalette.barHighlight,\n      strokeWidth: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1493,\n        columnNumber: 13\n      }\n    })), showLabels && renderLabels());\n  };\n\n  /**\n   * Renders a generic transformation visualization for algorithms not specifically handled\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderGenericVisualization = () => {\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      ref: svgRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1523,\n        columnNumber: 7\n      }\n    }, showGrid && renderGrid(), showAxes && renderAxes(), /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${AXIS_PADDING}, ${AXIS_PADDING})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1531,\n        columnNumber: 9\n      }\n    }, renderedData.map((value, index) => {\n      const isHighlighted = highlightedIndices.includes(index);\n\n      // Calculate bar properties\n      const barHeight = value / maxValue * availableHeight;\n      const x = index * (barWidth + BAR_PADDING);\n      const y = availableHeight - barHeight;\n\n      // Determine bar color\n      const fill = isHighlighted ? mergedPalette.barHighlight : mergedPalette.barDefault;\n      return /*#__PURE__*/React.createElement(\"rect\", {\n        key: `bar-${index}`,\n        x: x,\n        y: y,\n        width: barWidth,\n        height: barHeight,\n        fill: fill,\n        stroke: isHighlighted ? '#000' : 'none',\n        strokeWidth: isHighlighted ? 1 : 0,\n        style: {\n          transition: 'all 0.3s ease-in-out'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1545,\n          columnNumber: 15\n        }\n      });\n    })), showLabels && renderLabels());\n  };\n\n  /**\n   * Renders the grid for the visualization background\n   * @returns {JSX.Element} SVG grid\n   * @private\n   */\n  const renderGrid = () => {\n    const gridSize = 20;\n    const horizontalLines = Math.floor(height / gridSize);\n    const verticalLines = Math.floor(width / gridSize);\n    return /*#__PURE__*/React.createElement(\"g\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1577,\n        columnNumber: 7\n      }\n    }, Array.from({\n      length: horizontalLines\n    }).map((_, i) => /*#__PURE__*/React.createElement(\"line\", {\n      key: `h-grid-${i}`,\n      x1: 0,\n      y1: i * gridSize,\n      x2: width,\n      y2: i * gridSize,\n      stroke: mergedPalette.gridLines,\n      strokeWidth: 0.5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1580,\n        columnNumber: 11\n      }\n    })), Array.from({\n      length: verticalLines\n    }).map((_, i) => /*#__PURE__*/React.createElement(\"line\", {\n      key: `v-grid-${i}`,\n      x1: i * gridSize,\n      y1: 0,\n      x2: i * gridSize,\n      y2: height,\n      stroke: mergedPalette.gridLines,\n      strokeWidth: 0.5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1593,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  /**\n   * Renders axes for the visualization\n   * @returns {JSX.Element} SVG axes\n   * @private\n   */\n  const renderAxes = () => {\n    return /*#__PURE__*/React.createElement(\"g\", {\n      className: \"axes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1614,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"line\", {\n      x1: AXIS_PADDING,\n      y1: height - AXIS_PADDING,\n      x2: width - AXIS_PADDING,\n      y2: height - AXIS_PADDING,\n      stroke: mergedPalette.axisLines,\n      strokeWidth: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1616,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"line\", {\n      x1: AXIS_PADDING,\n      y1: AXIS_PADDING,\n      x2: AXIS_PADDING,\n      y2: height - AXIS_PADDING,\n      stroke: mergedPalette.axisLines,\n      strokeWidth: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1626,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"text\", {\n      x: width / 2,\n      y: height - 10,\n      textAnchor: \"middle\",\n      fill: mergedPalette.textPrimary,\n      fontSize: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1636,\n        columnNumber: 9\n      }\n    }, \"Element Index\"), /*#__PURE__*/React.createElement(\"text\", {\n      x: 15,\n      y: height / 2,\n      textAnchor: \"middle\",\n      transform: `rotate(-90, 15, ${height / 2})`,\n      fill: mergedPalette.textPrimary,\n      fontSize: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1646,\n        columnNumber: 9\n      }\n    }, \"Element Value\"));\n  };\n\n  /**\n   * Renders value labels for the array elements\n   * @returns {JSX.Element} SVG labels\n   * @private\n   */\n  const renderLabels = () => {\n    return /*#__PURE__*/React.createElement(\"g\", {\n      className: \"labels\",\n      transform: `translate(${AXIS_PADDING}, ${AXIS_PADDING})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1667,\n        columnNumber: 7\n      }\n    }, renderedData.map((value, index) => {\n      // Skip labels if there are too many elements to display clearly\n      if (renderedData.length > 30 && !highlightedIndices.includes(index)) {\n        return null;\n      }\n      const x = index * (barWidth + BAR_PADDING) + barWidth / 2;\n      const y = availableHeight + LABEL_HEIGHT - 5;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        key: `label-${index}`,\n        x: x,\n        y: y,\n        textAnchor: \"middle\",\n        fill: mergedPalette.textPrimary,\n        fontSize: 10,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1678,\n          columnNumber: 13\n        }\n      }, value);\n    }));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"transform-visualizer\",\n    ref: containerRef,\n    style: {\n      width: width,\n      height: height,\n      position: 'relative',\n      backgroundColor: mergedPalette.background,\n      overflow: 'hidden',\n      borderRadius: '4px',\n      boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1695,\n      columnNumber: 5\n    }\n  }, renderTransformVisualization(), transformState.message && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"transform-message\",\n    style: {\n      position: 'absolute',\n      bottom: 10,\n      left: 10,\n      right: 10,\n      padding: '8px 12px',\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      color: '#fff',\n      borderRadius: '4px',\n      fontSize: '14px',\n      maxWidth: '90%',\n      maxHeight: '80px',\n      overflow: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1712,\n      columnNumber: 9\n    }\n  }, transformState.message));\n};\n\n// PropTypes validation\nTransformVisualizer.propTypes = {\n  /**\n   * Array of numerical values to visualize\n   */\n  data: PropTypes.arrayOf(PropTypes.number).isRequired,\n  /**\n   * Type of transformation being visualized (from TRANSFORM_TYPES)\n   */\n  transformationType: PropTypes.oneOf(Object.values(TRANSFORM_TYPES)).isRequired,\n  /**\n   * Current step index in the algorithm execution\n   */\n  currentStep: PropTypes.number.isRequired,\n  /**\n   * Array of step history data from algorithm execution\n   */\n  stepHistory: PropTypes.arrayOf(PropTypes.object).isRequired,\n  /**\n   * Width of the visualization component\n   */\n  width: PropTypes.number,\n  /**\n   * Height of the visualization component\n   */\n  height: PropTypes.number,\n  /**\n   * Custom color palette overrides\n   */\n  colorPalette: PropTypes.object,\n  /**\n   * Duration of animations in milliseconds\n   */\n  animationDuration: PropTypes.number,\n  /**\n   * Whether to show value labels\n   */\n  showLabels: PropTypes.bool,\n  /**\n   * Whether to show coordinate axes\n   */\n  showAxes: PropTypes.bool,\n  /**\n   * Whether to show background grid\n   */\n  showGrid: PropTypes.bool\n};\n\n// Default props\nTransformVisualizer.defaultProps = {\n  width: 600,\n  height: 400,\n  colorPalette: {},\n  animationDuration: 300,\n  showLabels: true,\n  showAxes: true,\n  showGrid: false\n};\nexport { TransformVisualizer, TRANSFORM_TYPES };","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","PropTypes","TRANSFORM_TYPES","PANCAKE","CYCLE","SHELL","PIGEONHOLE","COMB","ODD_EVEN","GNOME","COCKTAIL","GENERIC","COLOR_PALETTE","background","barDefault","barHighlight","barComparing","barSwap","barSorted","textPrimary","textSecondary","gridLines","axisLines","pancakeFlip","cycleDetection","shellGap","pigeonholeDistribution","combGap","oddEvenPhase","gnomeStep","cocktailDirection","TransformVisualizer","data","transformationType","currentStep","stepHistory","width","height","colorPalette","animationDuration","showLabels","showAxes","showGrid","renderedData","setRenderedData","highlightedIndices","setHighlightedIndices","transformState","setTransformState","animations","setAnimations","svgRef","containerRef","animationRef","mergedPalette","BAR_PADDING","LABEL_HEIGHT","AXIS_PADDING","LABEL_PADDING","availableWidth","availableHeight","barWidth","Math","max","length","maxValue","stepData","stepArray","array","current","cancelAnimationFrame","indices","newTransformState","extractTransformState","newAnimations","generateAnimations","transformType","baseState","type","active","message","flipIndex","prevFlipIndex","isFlipping","cycleStart","cycleIndices","currentPosition","isRotating","gap","groups","currentGroup","groupProgress","phase","buckets","bucketIndices","distributionMap","shrinkFactor","comparingPairs","swappedPairs","position","direction","comparing","rangeLow","rangeHigh","includes","operation","duration","undefined","i","floor","push","index1","index2","delay","Array","isArray","fromIndex","toIndex","forEach","group","groupIndex","index","targetBucket","sourceIndex","toBucket","currentIndex","bucket","bucketIndex","value","valueIndex","fromBucket","pair","pairIndex","some","swapPair","swapped","renderTransformVisualization","renderPancakeVisualization","renderCycleVisualization","renderShellVisualization","renderPigeonholeVisualization","renderCombVisualization","renderOddEvenVisualization","renderGnomeVisualization","renderCocktailVisualization","renderGenericVisualization","createElement","ref","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","renderGrid","renderAxes","transform","map","isHighlighted","isFlipped","barHeight","x","y","relativePos","rotationAxis","fill","key","stroke","strokeWidth","style","transition","x1","y1","x2","y2","strokeDasharray","d","markerEnd","opacity","id","markerWidth","markerHeight","refX","refY","orient","points","renderLabels","isInCycle","isCycleStart","isCurrentPosition","nextIndex","startX","startY","endX","endY","controlPointY","min","isCurrentGroup","isCurrentGroupElement","fontSize","fontWeight","isDistribution","isCollection","bucketWidth","bucketSpacing","bucketY","bucketHeight","isDistributing","arrayIndex","sourceX","sourceY","targetX","targetY","textAnchor","itemHeight","itemY","rx","ry","isComparing","toFixed","isSwapped","isActivePositionInPhase","wasSwapped","isInActiveRange","gridSize","horizontalLines","verticalLines","className","from","_","backgroundColor","overflow","borderRadius","boxShadow","bottom","left","right","padding","color","maxWidth","maxHeight","propTypes","arrayOf","number","isRequired","oneOf","Object","values","object","bool","defaultProps"],"sources":["/Users/mohammadatashi/Documents/GitHub/Advanced-Algorithms-Laboratory/sorting-visualizer/src/visualization/components/transform-visualizer.js"],"sourcesContent":["// src/visualization/components/transform-visualizer.js\n\n/**\n * @file TransformVisualizer - Specialized visualization component for transformation-based sorting algorithms\n * @author Algorithm Visualization Platform Team\n * @version 2.0.0\n * \n * @description\n * This component provides specialized visualization for sorting algorithms that involve\n * non-standard transformations of the array, such as:\n * \n * - Pancake Sort (prefix reversals)\n * - Cycle Sort (element placement through cycles)\n * - Shell Sort (interleaved subsequence sorting)\n * - Pigeonhole Sort (distribution and collection)\n * \n * The visualization employs a combination of advanced SVG animations, data-driven \n * transformations, and specialized visual metaphors to illuminate the unique operational\n * characteristics of these algorithms. Each transformation type has a dedicated\n * rendering strategy optimized for educational clarity.\n * \n * Performance characteristics:\n * - Time complexity: O(n) for rendering n elements\n * - Animation complexity: O(t) where t is the number of transformations\n * - Memory usage: O(n) for maintaining the visualization state\n */\n\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @constant {Object} TRANSFORM_TYPES - Enumeration of supported transformation types\n * @property {string} PANCAKE - Prefix reversal operations (Pancake Sort)\n * @property {string} CYCLE - Cycle detection and rotation (Cycle Sort)\n * @property {string} SHELL - Interleaved subsequence sorting (Shell Sort)\n * @property {string} PIGEONHOLE - Distribution and collection (Pigeonhole Sort)\n * @property {string} COMB - Gap-based comparison (Comb Sort)\n * @property {string} ODD_EVEN - Parallel even/odd exchanges (Odd-Even Sort)\n * @property {string} GNOME - Local backward stepping (Gnome Sort)\n * @property {string} COCKTAIL - Bidirectional bubble sort (Cocktail Shaker Sort)\n * @property {string} GENERIC - Generic transformation visualization\n */\nconst TRANSFORM_TYPES = {\n  PANCAKE: 'pancake',\n  CYCLE: 'cycle',\n  SHELL: 'shell',\n  PIGEONHOLE: 'pigeonhole',\n  COMB: 'comb',\n  ODD_EVEN: 'odd-even',\n  GNOME: 'gnome',\n  COCKTAIL: 'cocktail',\n  GENERIC: 'generic'\n};\n\n/**\n * @constant {Object} COLOR_PALETTE - Color configuration for visualizations\n */\nconst COLOR_PALETTE = {\n  background: '#f8f9fa',\n  barDefault: '#4a6bdf',\n  barHighlight: '#ffab00',\n  barComparing: '#ff5252',\n  barSwap: '#1de9b6',\n  barSorted: '#00c853',\n  textPrimary: '#212121',\n  textSecondary: '#757575',\n  gridLines: '#e0e0e0',\n  axisLines: '#9e9e9e',\n  // Specialized colors for transformations\n  pancakeFlip: '#9c27b0',\n  cycleDetection: '#1e88e5',\n  shellGap: '#f57c00',\n  pigeonholeDistribution: '#7cb342',\n  combGap: '#6d4c41',\n  oddEvenPhase: '#00acc1',\n  gnomeStep: '#ec407a',\n  cocktailDirection: '#7e57c2'\n};\n\n/**\n * TransformVisualizer Component\n * \n * A specialized visualization component for transformation-based sorting algorithms\n * that renders the unique operations and state transitions in an intuitive, educational manner.\n * \n * @component\n */\nconst TransformVisualizer = ({\n  data,\n  transformationType,\n  currentStep,\n  stepHistory,\n  width,\n  height,\n  colorPalette,\n  animationDuration,\n  showLabels,\n  showAxes,\n  showGrid\n}) => {\n  // Component state\n  const [renderedData, setRenderedData] = useState([]);\n  const [highlightedIndices, setHighlightedIndices] = useState([]);\n  const [transformState, setTransformState] = useState({});\n  const [animations, setAnimations] = useState([]);\n  \n  // Refs for DOM manipulation and animations\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const animationRef = useRef(null);\n  \n  // Derived state using memoization for performance\n  const mergedPalette = useMemo(() => ({\n    ...COLOR_PALETTE,\n    ...colorPalette\n  }), [colorPalette]);\n  \n  // Constants for visualization\n  const BAR_PADDING = 2;\n  const LABEL_HEIGHT = 20;\n  const AXIS_PADDING = showAxes ? 40 : 0;\n  const LABEL_PADDING = showLabels ? LABEL_HEIGHT : 0;\n  \n  // Calculate available dimensions for the visualization\n  const availableWidth = width - (2 * AXIS_PADDING);\n  const availableHeight = height - LABEL_PADDING - AXIS_PADDING;\n  \n  // Calculate bar dimensions based on available space and data length\n  const barWidth = Math.max(2, (availableWidth / (data.length || 1)) - BAR_PADDING);\n  \n  /**\n   * Find the maximum value in the data array for normalization\n   * @type {number}\n   */\n  const maxValue = useMemo(() => Math.max(...data, 1), [data]);\n  \n  /**\n   * Updates the visualization based on the current step\n   */\n  useEffect(() => {\n    if (!stepHistory || stepHistory.length === 0 || currentStep >= stepHistory.length) {\n      return;\n    }\n    \n    // Get the current step data\n    const stepData = stepHistory[currentStep];\n    const stepArray = stepData.array || [];\n    \n    // Clear any ongoing animations\n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n      animationRef.current = null;\n    }\n    \n    // Update visualization with current state\n    setRenderedData(stepArray);\n    setHighlightedIndices(stepData.indices || []);\n    \n    // Extract transformation-specific state\n    const newTransformState = extractTransformState(stepData, transformationType);\n    setTransformState(newTransformState);\n    \n    // Generate animations for the current transformation\n    const newAnimations = generateAnimations(\n      stepData,\n      transformationType,\n      animationDuration\n    );\n    setAnimations(newAnimations);\n    \n  }, [currentStep, stepHistory, transformationType, animationDuration]);\n\n  /**\n   * Extracts transformation-specific state from step data\n   * @param {Object} stepData - Data for the current step\n   * @param {string} transformType - Type of transformation\n   * @returns {Object} Transformation state for visualization\n   * @private\n   */\n  const extractTransformState = (stepData, transformType) => {\n    // Base state with common properties\n    const baseState = {\n      type: transformType,\n      active: false,\n      message: stepData.message || ''\n    };\n    \n    // Early return if step data doesn't contain transformation info\n    if (!stepData.type) {\n      return baseState;\n    }\n    \n    // Extract transformation-specific data based on algorithm type\n    switch (transformType) {\n      case TRANSFORM_TYPES.PANCAKE:\n        return {\n          ...baseState,\n          active: stepData.type === 'pancake-flip',\n          flipIndex: stepData.flipIndex,\n          prevFlipIndex: stepData.prevFlipIndex,\n          isFlipping: stepData.isFlipping\n        };\n        \n      case TRANSFORM_TYPES.CYCLE:\n        return {\n          ...baseState,\n          active: stepData.type === 'cycle-detection' || stepData.type === 'cycle-rotation',\n          cycleStart: stepData.cycleStart,\n          cycleIndices: stepData.cycleIndices || [],\n          currentPosition: stepData.currentPosition,\n          isRotating: stepData.type === 'cycle-rotation'\n        };\n        \n      case TRANSFORM_TYPES.SHELL:\n        return {\n          ...baseState,\n          active: stepData.type === 'shell-sort-pass',\n          gap: stepData.gap,\n          groups: stepData.groups || [],\n          currentGroup: stepData.currentGroup,\n          groupProgress: stepData.groupProgress\n        };\n        \n      case TRANSFORM_TYPES.PIGEONHOLE:\n        return {\n          ...baseState,\n          active: stepData.type === 'distribution' || stepData.type === 'collection',\n          phase: stepData.type,\n          buckets: stepData.buckets || [],\n          bucketIndices: stepData.bucketIndices || {},\n          distributionMap: stepData.distributionMap || []\n        };\n        \n      case TRANSFORM_TYPES.COMB:\n        return {\n          ...baseState,\n          active: stepData.type === 'comb-comparison',\n          gap: stepData.gap,\n          shrinkFactor: stepData.shrinkFactor,\n          comparingPairs: stepData.comparingPairs || []\n        };\n        \n      case TRANSFORM_TYPES.ODD_EVEN:\n        return {\n          ...baseState,\n          active: stepData.type === 'odd-phase' || stepData.type === 'even-phase',\n          phase: stepData.type === 'odd-phase' ? 'odd' : 'even',\n          comparingPairs: stepData.comparingPairs || [],\n          swappedPairs: stepData.swappedPairs || []\n        };\n        \n      case TRANSFORM_TYPES.GNOME:\n        return {\n          ...baseState,\n          active: stepData.type === 'gnome-step',\n          position: stepData.position,\n          direction: stepData.direction, // 'forward' or 'backward'\n          comparing: stepData.comparing || []\n        };\n        \n      case TRANSFORM_TYPES.COCKTAIL:\n        return {\n          ...baseState,\n          active: stepData.type === 'cocktail-step',\n          direction: stepData.direction, // 'forward' or 'backward'\n          rangeLow: stepData.rangeLow,\n          rangeHigh: stepData.rangeHigh,\n          comparing: stepData.comparing || []\n        };\n        \n      default:\n        return {\n          ...baseState,\n          active: !!stepData.type.includes('transform'),\n          indices: stepData.indices || [],\n          operation: stepData.operation\n        };\n    }\n  };\n\n  /**\n   * Generates animations for the current transformation\n   * @param {Object} stepData - Data for the current step\n   * @param {string} transformType - Type of transformation\n   * @param {number} duration - Animation duration in milliseconds\n   * @returns {Array} Array of animation definitions\n   * @private\n   */\n  const generateAnimations = (stepData, transformType, duration) => {\n    // Early return if step data doesn't contain transformation info\n    if (!stepData.type) {\n      return [];\n    }\n    \n    const animations = [];\n    \n    // Generate animation based on transformation type\n    switch (transformType) {\n      case TRANSFORM_TYPES.PANCAKE:\n        if (stepData.type === 'pancake-flip' && stepData.flipIndex !== undefined) {\n          // Generate flip animation\n          const flipIndex = stepData.flipIndex;\n          \n          for (let i = 0; i <= Math.floor(flipIndex / 2); i++) {\n            animations.push({\n              type: 'swap',\n              index1: i,\n              index2: flipIndex - i,\n              duration: duration,\n              delay: i * (duration / 10)\n            });\n          }\n        }\n        break;\n        \n      case TRANSFORM_TYPES.CYCLE:\n        if (stepData.type === 'cycle-rotation' && Array.isArray(stepData.cycleIndices)) {\n          // Generate cycle rotation animation\n          const cycleIndices = stepData.cycleIndices;\n          \n          for (let i = 0; i < cycleIndices.length - 1; i++) {\n            animations.push({\n              type: 'move',\n              fromIndex: cycleIndices[i],\n              toIndex: cycleIndices[i + 1],\n              duration: duration / cycleIndices.length,\n              delay: i * (duration / cycleIndices.length)\n            });\n          }\n          \n          // Complete the cycle\n          if (cycleIndices.length > 1) {\n            animations.push({\n              type: 'move',\n              fromIndex: cycleIndices[cycleIndices.length - 1],\n              toIndex: cycleIndices[0],\n              duration: duration / cycleIndices.length,\n              delay: (cycleIndices.length - 1) * (duration / cycleIndices.length)\n            });\n          }\n        }\n        break;\n        \n      case TRANSFORM_TYPES.SHELL:\n        if (stepData.type === 'shell-sort-pass' && stepData.gap !== undefined) {\n          // Generate shell sort group animations\n          const groups = stepData.groups || [];\n          \n          groups.forEach((group, groupIndex) => {\n            group.forEach((index, i) => {\n              if (i < group.length - 1) {\n                animations.push({\n                  type: 'compare',\n                  index1: index,\n                  index2: group[i + 1],\n                  duration: duration / 2,\n                  delay: groupIndex * (duration / groups.length)\n                });\n              }\n            });\n          });\n        }\n        break;\n        \n      case TRANSFORM_TYPES.PIGEONHOLE:\n        if (stepData.type === 'distribution') {\n          // Generate distribution animations\n          const distributionMap = stepData.distributionMap || [];\n          \n          distributionMap.forEach((targetBucket, sourceIndex) => {\n            animations.push({\n              type: 'move-to-bucket',\n              fromIndex: sourceIndex,\n              toBucket: targetBucket,\n              duration: duration,\n              delay: sourceIndex * (duration / distributionMap.length / 2)\n            });\n          });\n        } else if (stepData.type === 'collection') {\n          // Generate collection animations\n          const buckets = stepData.buckets || [];\n          let currentIndex = 0;\n          \n          buckets.forEach((bucket, bucketIndex) => {\n            bucket.forEach((value, valueIndex) => {\n              animations.push({\n                type: 'move-from-bucket',\n                fromBucket: bucketIndex,\n                bucketIndex: valueIndex,\n                toIndex: currentIndex,\n                duration: duration,\n                delay: currentIndex * (duration / data.length / 2)\n              });\n              currentIndex++;\n            });\n          });\n        }\n        break;\n        \n      case TRANSFORM_TYPES.COMB:\n        if (stepData.type === 'comb-comparison' && Array.isArray(stepData.comparingPairs)) {\n          // Generate comb comparison animations\n          stepData.comparingPairs.forEach((pair, pairIndex) => {\n            animations.push({\n              type: 'compare',\n              index1: pair[0],\n              index2: pair[1],\n              duration: duration / 2,\n              delay: pairIndex * (duration / stepData.comparingPairs.length)\n            });\n            \n            // If there was a swap\n            if (stepData.swappedPairs && stepData.swappedPairs.some(swapPair => \n              swapPair[0] === pair[0] && swapPair[1] === pair[1])) {\n              animations.push({\n                type: 'swap',\n                index1: pair[0],\n                index2: pair[1],\n                duration: duration / 2,\n                delay: pairIndex * (duration / stepData.comparingPairs.length) + duration / 2\n              });\n            }\n          });\n        }\n        break;\n        \n      case TRANSFORM_TYPES.ODD_EVEN:\n        if ((stepData.type === 'odd-phase' || stepData.type === 'even-phase') && \n            Array.isArray(stepData.comparingPairs)) {\n          // Generate odd-even phase animations\n          stepData.comparingPairs.forEach((pair, pairIndex) => {\n            animations.push({\n              type: 'compare',\n              index1: pair[0],\n              index2: pair[1],\n              duration: duration / 3,\n              delay: pairIndex * (duration / stepData.comparingPairs.length / 3)\n            });\n            \n            // If there was a swap\n            if (stepData.swappedPairs && stepData.swappedPairs.some(swapPair => \n              swapPair[0] === pair[0] && swapPair[1] === pair[1])) {\n              animations.push({\n                type: 'swap',\n                index1: pair[0],\n                index2: pair[1],\n                duration: duration / 3,\n                delay: pairIndex * (duration / stepData.comparingPairs.length / 3) + duration / 3\n              });\n            }\n          });\n        }\n        break;\n        \n      case TRANSFORM_TYPES.GNOME:\n        if (stepData.type === 'gnome-step' && stepData.position !== undefined) {\n          // Generate gnome step animation\n          if (stepData.direction === 'backward' && stepData.comparing && \n              stepData.comparing.length === 2) {\n            animations.push({\n              type: 'swap',\n              index1: stepData.comparing[0],\n              index2: stepData.comparing[1],\n              duration: duration,\n              delay: 0\n            });\n          } else if (stepData.direction === 'forward') {\n            animations.push({\n              type: 'highlight',\n              index: stepData.position,\n              duration: duration,\n              delay: 0\n            });\n          }\n        }\n        break;\n        \n      case TRANSFORM_TYPES.COCKTAIL:\n        if (stepData.type === 'cocktail-step' && stepData.comparing && \n            stepData.comparing.length === 2) {\n          // Generate cocktail step animation\n          animations.push({\n            type: 'compare',\n            index1: stepData.comparing[0],\n            index2: stepData.comparing[1],\n            duration: duration / 2,\n            delay: 0\n          });\n          \n          // If there was a swap\n          if (stepData.swapped) {\n            animations.push({\n              type: 'swap',\n              index1: stepData.comparing[0],\n              index2: stepData.comparing[1],\n              duration: duration / 2,\n              delay: duration / 2\n            });\n          }\n        }\n        break;\n        \n      default:\n        // Generic transformation animations\n        if (stepData.indices && stepData.indices.length > 0) {\n          stepData.indices.forEach(index => {\n            animations.push({\n              type: 'highlight',\n              index: index,\n              duration: duration,\n              delay: 0\n            });\n          });\n        }\n    }\n    \n    return animations;\n  };\n\n  /**\n   * Returns the appropriate component to visualize the current transformation\n   * @returns {JSX.Element} The specialized visualization component\n   */\n  const renderTransformVisualization = () => {\n    switch (transformationType) {\n      case TRANSFORM_TYPES.PANCAKE:\n        return renderPancakeVisualization();\n      case TRANSFORM_TYPES.CYCLE:\n        return renderCycleVisualization();\n      case TRANSFORM_TYPES.SHELL:\n        return renderShellVisualization();\n      case TRANSFORM_TYPES.PIGEONHOLE:\n        return renderPigeonholeVisualization();\n      case TRANSFORM_TYPES.COMB:\n        return renderCombVisualization();\n      case TRANSFORM_TYPES.ODD_EVEN:\n        return renderOddEvenVisualization();\n      case TRANSFORM_TYPES.GNOME:\n        return renderGnomeVisualization();\n      case TRANSFORM_TYPES.COCKTAIL:\n        return renderCocktailVisualization();\n      default:\n        return renderGenericVisualization();\n    }\n  };\n\n  /**\n   * Renders the pancake sorting visualization - specialized for prefix reversal operations\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderPancakeVisualization = () => {\n    const { flipIndex, isFlipping } = transformState;\n    \n    return (\n      <svg width={width} height={height} ref={svgRef}>\n        {/* Background and grid */}\n        {showGrid && renderGrid()}\n        \n        {/* Axes */}\n        {showAxes && renderAxes()}\n        \n        {/* Base array visualization */}\n        <g transform={`translate(${AXIS_PADDING}, ${AXIS_PADDING})`}>\n          {/* Render the array bars */}\n          {renderedData.map((value, index) => {\n            const isHighlighted = highlightedIndices.includes(index);\n            const isFlipped = flipIndex !== undefined && index <= flipIndex;\n            \n            // Calculate bar properties\n            const barHeight = (value / maxValue) * availableHeight;\n            const x = index * (barWidth + BAR_PADDING);\n            const y = availableHeight - barHeight;\n            \n            // Animation transformations\n            let transform = '';\n            if (isFlipping && isFlipped) {\n              // Calculate rotation based on position in the flip range\n              const relativePos = (flipIndex - index) / flipIndex;\n              const rotationAxis = (flipIndex * (barWidth + BAR_PADDING)) / 2;\n              transform = `rotate(${180 * relativePos}, ${rotationAxis}, ${availableHeight / 2})`;\n            }\n            \n            // Determine bar color\n            let fill = mergedPalette.barDefault;\n            if (isHighlighted) {\n              fill = mergedPalette.barHighlight;\n            } else if (isFlipped) {\n              fill = mergedPalette.pancakeFlip;\n            }\n            \n            return (\n              <rect\n                key={`bar-${index}`}\n                x={x}\n                y={y}\n                width={barWidth}\n                height={barHeight}\n                fill={fill}\n                stroke={isHighlighted ? '#000' : 'none'}\n                strokeWidth={isHighlighted ? 1 : 0}\n                transform={transform}\n                style={{ transition: 'all 0.3s ease-in-out' }}\n              />\n            );\n          })}\n          \n          {/* Pancake flip visualization */}\n          {flipIndex !== undefined && (\n            <g>\n              {/* Flip axis indicator */}\n              <line\n                x1={0}\n                y1={availableHeight + 5}\n                x2={(flipIndex + 1) * (barWidth + BAR_PADDING) - BAR_PADDING}\n                y2={availableHeight + 5}\n                stroke={mergedPalette.pancakeFlip}\n                strokeWidth={3}\n                strokeDasharray=\"5,3\"\n              />\n              \n              {/* Flip arrow */}\n              <path\n                d={`M${(flipIndex + 1) * (barWidth + BAR_PADDING) / 2},${availableHeight + 15} \n                    A${availableWidth / 4},${availableHeight / 4} 0 0,1 \n                    ${(flipIndex + 1) * (barWidth + BAR_PADDING) - BAR_PADDING},${availableHeight + 15}`}\n                fill=\"none\"\n                stroke={mergedPalette.pancakeFlip}\n                strokeWidth={2}\n                markerEnd=\"url(#arrowhead)\"\n                opacity={isFlipping ? 1 : 0.5}\n              />\n              \n              {/* Arrow marker definition */}\n              <defs>\n                <marker\n                  id=\"arrowhead\"\n                  markerWidth=\"10\"\n                  markerHeight=\"7\"\n                  refX=\"10\"\n                  refY=\"3.5\"\n                  orient=\"auto\"\n                >\n                  <polygon\n                    points=\"0 0, 10 3.5, 0 7\"\n                    fill={mergedPalette.pancakeFlip}\n                  />\n                </marker>\n              </defs>\n            </g>\n          )}\n        </g>\n        \n        {/* Labels */}\n        {showLabels && renderLabels()}\n      </svg>\n    );\n  };\n\n  /**\n   * Renders the cycle sort visualization - specialized for cycle detection and rotation\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderCycleVisualization = () => {\n    const { cycleStart, cycleIndices, isRotating, currentPosition } = transformState;\n    \n    return (\n      <svg width={width} height={height} ref={svgRef}>\n        {/* Background and grid */}\n        {showGrid && renderGrid()}\n        \n        {/* Axes */}\n        {showAxes && renderAxes()}\n        \n        {/* Base array visualization */}\n        <g transform={`translate(${AXIS_PADDING}, ${AXIS_PADDING})`}>\n          {/* Render the array bars */}\n          {renderedData.map((value, index) => {\n            const isHighlighted = highlightedIndices.includes(index);\n            const isInCycle = cycleIndices && cycleIndices.includes(index);\n            const isCycleStart = index === cycleStart;\n            const isCurrentPosition = index === currentPosition;\n            \n            // Calculate bar properties\n            const barHeight = (value / maxValue) * availableHeight;\n            const x = index * (barWidth + BAR_PADDING);\n            const y = availableHeight - barHeight;\n            \n            // Determine bar color\n            let fill = mergedPalette.barDefault;\n            if (isCurrentPosition) {\n              fill = mergedPalette.barHighlight;\n            } else if (isCycleStart) {\n              fill = mergedPalette.barSwap;\n            } else if (isInCycle) {\n              fill = mergedPalette.cycleDetection;\n            } else if (isHighlighted) {\n              fill = mergedPalette.barHighlight;\n            }\n            \n            return (\n              <rect\n                key={`bar-${index}`}\n                x={x}\n                y={y}\n                width={barWidth}\n                height={barHeight}\n                fill={fill}\n                stroke={isHighlighted || isInCycle ? '#000' : 'none'}\n                strokeWidth={isHighlighted || isInCycle ? 1 : 0}\n                style={{ transition: 'all 0.3s ease-in-out' }}\n              />\n            );\n          })}\n          \n          {/* Cycle visualization */}\n          {cycleIndices && cycleIndices.length > 0 && (\n            <g>\n              {/* Cycle connections */}\n              {cycleIndices.map((index, i) => {\n                const nextIndex = cycleIndices[(i + 1) % cycleIndices.length];\n                const startX = index * (barWidth + BAR_PADDING) + barWidth / 2;\n                const startY = availableHeight - (renderedData[index] / maxValue) * availableHeight - 10;\n                const endX = nextIndex * (barWidth + BAR_PADDING) + barWidth / 2;\n                const endY = availableHeight - (renderedData[nextIndex] / maxValue) * availableHeight - 10;\n                \n                // Create curved path between cycle elements\n                const controlPointY = Math.min(startY, endY) - 50;\n                \n                return (\n                  <path\n                    key={`cycle-${i}`}\n                    d={`M${startX},${startY} C${startX},${controlPointY} ${endX},${controlPointY} ${endX},${endY}`}\n                    fill=\"none\"\n                    stroke={mergedPalette.cycleDetection}\n                    strokeWidth={2}\n                    strokeDasharray={isRotating ? \"5,5\" : \"none\"}\n                    markerEnd=\"url(#cycleArrow)\"\n                    opacity={0.7}\n                    style={{ transition: 'all 0.3s ease-in-out' }}\n                  />\n                );\n              })}\n              \n              {/* Arrow marker definition */}\n              <defs>\n                <marker\n                  id=\"cycleArrow\"\n                  markerWidth=\"10\"\n                  markerHeight=\"7\"\n                  refX=\"10\"\n                  refY=\"3.5\"\n                  orient=\"auto\"\n                >\n                  <polygon\n                    points=\"0 0, 10 3.5, 0 7\"\n                    fill={mergedPalette.cycleDetection}\n                  />\n                </marker>\n              </defs>\n            </g>\n          )}\n        </g>\n        \n        {/* Labels */}\n        {showLabels && renderLabels()}\n      </svg>\n    );\n  };\n\n  /**\n   * Renders the shell sort visualization - specialized for interleaved subsequence sorting\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderShellVisualization = () => {\n    const { gap, groups, currentGroup } = transformState;\n    \n    return (\n      <svg width={width} height={height} ref={svgRef}>\n        {/* Background and grid */}\n        {showGrid && renderGrid()}\n        \n        {/* Axes */}\n        {showAxes && renderAxes()}\n        \n        {/* Base array visualization */}\n        <g transform={`translate(${AXIS_PADDING}, ${AXIS_PADDING})`}>\n          {/* Gap visualization */}\n          {gap && groups && groups.length > 0 && (\n            <g>\n              {groups.map((group, groupIndex) => {\n                const isCurrentGroup = groupIndex === currentGroup;\n                \n                return (\n                  <g key={`group-${groupIndex}`}>\n                    {group.map((index, i) => {\n                      // Only connect consecutive elements in the same group\n                      if (i < group.length - 1) {\n                        const startX = index * (barWidth + BAR_PADDING) + barWidth / 2;\n                        const endX = group[i + 1] * (barWidth + BAR_PADDING) + barWidth / 2;\n                        \n                        return (\n                          <line\n                            key={`connection-${groupIndex}-${i}`}\n                            x1={startX}\n                            y1={availableHeight + 15}\n                            x2={endX}\n                            y2={availableHeight + 15}\n                            stroke={isCurrentGroup ? mergedPalette.shellGap : mergedPalette.gridLines}\n                            strokeWidth={isCurrentGroup ? 2 : 1}\n                            strokeDasharray={isCurrentGroup ? \"none\" : \"5,5\"}\n                          />\n                        );\n                      }\n                      return null;\n                    })}\n                  </g>\n                );\n              })}\n            </g>\n          )}\n          \n          {/* Render the array bars */}\n          {renderedData.map((value, index) => {\n            const isHighlighted = highlightedIndices.includes(index);\n            \n            // Determine if this index is part of the current group\n            const isCurrentGroupElement = groups && \n              currentGroup !== undefined && \n              groups[currentGroup] && \n              groups[currentGroup].includes(index);\n            \n            // Calculate bar properties\n            const barHeight = (value / maxValue) * availableHeight;\n            const x = index * (barWidth + BAR_PADDING);\n            const y = availableHeight - barHeight;\n            \n            // Determine bar color\n            let fill = mergedPalette.barDefault;\n            if (isHighlighted) {\n              fill = mergedPalette.barHighlight;\n            } else if (isCurrentGroupElement) {\n              fill = mergedPalette.shellGap;\n            }\n            \n            return (\n              <rect\n                key={`bar-${index}`}\n                x={x}\n                y={y}\n                width={barWidth}\n                height={barHeight}\n                fill={fill}\n                stroke={isHighlighted || isCurrentGroupElement ? '#000' : 'none'}\n                strokeWidth={isHighlighted || isCurrentGroupElement ? 1 : 0}\n                style={{ transition: 'all 0.3s ease-in-out' }}\n              />\n            );\n          })}\n          \n          {/* Gap indicator */}\n          {gap && (\n            <text\n              x={availableWidth - 60}\n              y={30}\n              fill={mergedPalette.textPrimary}\n              fontSize={14}\n              fontWeight=\"bold\"\n            >\n              Gap: {gap}\n            </text>\n          )}\n        </g>\n        \n        {/* Labels */}\n        {showLabels && renderLabels()}\n      </svg>\n    );\n  };\n\n  /**\n   * Renders the pigeonhole sort visualization - specialized for distribution and collection\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderPigeonholeVisualization = () => {\n    const { phase, buckets, distributionMap } = transformState;\n    const isDistribution = phase === 'distribution';\n    const isCollection = phase === 'collection';\n    \n    // Bucket rendering constants\n    const bucketWidth = Math.min(50, availableWidth / (buckets?.length || 1) - 10);\n    const bucketSpacing = 10;\n    const bucketY = availableHeight / 2;\n    const bucketHeight = availableHeight / 2;\n    \n    return (\n      <svg width={width} height={height} ref={svgRef}>\n        {/* Background and grid */}\n        {showGrid && renderGrid()}\n        \n        {/* Axes */}\n        {showAxes && renderAxes()}\n        \n        {/* Render the array bars */}\n        <g transform={`translate(${AXIS_PADDING}, ${AXIS_PADDING})`}>\n          {renderedData.map((value, index) => {\n            const isHighlighted = highlightedIndices.includes(index);\n            const isDistributing = isDistribution && distributionMap && distributionMap[index] !== undefined;\n            \n            // Calculate bar properties\n            const barHeight = (value / maxValue) * availableHeight / 2; // Half height for distribution view\n            const x = index * (barWidth + BAR_PADDING);\n            const y = (availableHeight / 2) - barHeight; // Position in top half\n            \n            // Determine bar color\n            let fill = mergedPalette.barDefault;\n            if (isHighlighted) {\n              fill = mergedPalette.barHighlight;\n            } else if (isDistributing) {\n              fill = mergedPalette.pigeonholeDistribution;\n            }\n            \n            // For collection phase, don't render original array\n            if (isCollection) {\n              return null;\n            }\n            \n            return (\n              <rect\n                key={`bar-${index}`}\n                x={x}\n                y={y}\n                width={barWidth}\n                height={barHeight}\n                fill={fill}\n                stroke={isHighlighted ? '#000' : 'none'}\n                strokeWidth={isHighlighted ? 1 : 0}\n                style={{ transition: 'all 0.3s ease-in-out' }}\n              />\n            );\n          })}\n        </g>\n        \n        {/* Distribution arrows */}\n        {isDistribution && distributionMap && (\n          <g transform={`translate(${AXIS_PADDING}, ${AXIS_PADDING})`}>\n            {distributionMap.map((bucketIndex, arrayIndex) => {\n              const sourceX = arrayIndex * (barWidth + BAR_PADDING) + barWidth / 2;\n              const sourceY = availableHeight / 2;\n              const targetX = (bucketWidth + bucketSpacing) * bucketIndex + bucketWidth / 2;\n              const targetY = bucketY;\n              \n              return (\n                <line\n                  key={`dist-arrow-${arrayIndex}`}\n                  x1={sourceX}\n                  y1={sourceY}\n                  x2={targetX}\n                  y2={targetY}\n                  stroke={mergedPalette.pigeonholeDistribution}\n                  strokeWidth={1}\n                  strokeDasharray=\"5,3\"\n                  markerEnd=\"url(#pigeonholeArrow)\"\n                />\n              );\n            })}\n            \n            {/* Arrow marker definition */}\n            <defs>\n              <marker\n                id=\"pigeonholeArrow\"\n                markerWidth=\"10\"\n                markerHeight=\"7\"\n                refX=\"10\"\n                refY=\"3.5\"\n                orient=\"auto\"\n              >\n                <polygon\n                  points=\"0 0, 10 3.5, 0 7\"\n                  fill={mergedPalette.pigeonholeDistribution}\n                />\n              </marker>\n            </defs>\n          </g>\n        )}\n        \n        {/* Buckets visualization */}\n        {buckets && buckets.length > 0 && (\n          <g transform={`translate(${AXIS_PADDING}, ${AXIS_PADDING})`}>\n            {buckets.map((bucket, bucketIndex) => {\n              return (\n                <g key={`bucket-${bucketIndex}`}>\n                  {/* Bucket outline */}\n                  <rect\n                    x={(bucketWidth + bucketSpacing) * bucketIndex}\n                    y={bucketY}\n                    width={bucketWidth}\n                    height={bucketHeight}\n                    fill={mergedPalette.background}\n                    stroke={mergedPalette.gridLines}\n                    strokeWidth={2}\n                  />\n                  \n                  {/* Bucket label */}\n                  <text\n                    x={(bucketWidth + bucketSpacing) * bucketIndex + bucketWidth / 2}\n                    y={bucketY - 5}\n                    textAnchor=\"middle\"\n                    fill={mergedPalette.textPrimary}\n                    fontSize={12}\n                  >\n                    {bucketIndex}\n                  </text>\n                  \n                  {/* Bucket contents */}\n                  {bucket.map((value, valueIndex) => {\n                    const itemHeight = Math.min(20, (bucketHeight - 10) / bucket.length);\n                    const itemY = bucketY + 5 + valueIndex * itemHeight;\n                    \n                    return (\n                      <rect\n                        key={`bucket-item-${bucketIndex}-${valueIndex}`}\n                        x={(bucketWidth + bucketSpacing) * bucketIndex + 5}\n                        y={itemY}\n                        width={bucketWidth - 10}\n                        height={itemHeight - 2}\n                        fill={mergedPalette.pigeonholeDistribution}\n                        rx={2}\n                        ry={2}\n                      />\n                    );\n                  })}\n                </g>\n              );\n            })}\n          </g>\n        )}\n        \n        {/* Phase indicator */}\n        {(isDistribution || isCollection) && (\n          <text\n            x={width - 150}\n            y={30}\n            fill={mergedPalette.textPrimary}\n            fontSize={14}\n            fontWeight=\"bold\"\n          >\n            Phase: {phase}\n          </text>\n        )}\n        \n        {/* Labels */}\n        {showLabels && renderLabels()}\n      </svg>\n    );\n  };\n\n  /**\n   * Renders the comb sort visualization - specialized for varying gap comparisons\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderCombVisualization = () => {\n    const { gap, comparingPairs, shrinkFactor } = transformState;\n    \n    return (\n      <svg width={width} height={height} ref={svgRef}>\n        {/* Background and grid */}\n        {showGrid && renderGrid()}\n        \n        {/* Axes */}\n        {showAxes && renderAxes()}\n        \n        {/* Base array visualization */}\n        <g transform={`translate(${AXIS_PADDING}, ${AXIS_PADDING})`}>\n          {/* Render the array bars */}\n          {renderedData.map((value, index) => {\n            const isHighlighted = highlightedIndices.includes(index);\n            const isComparing = comparingPairs && \n              comparingPairs.some(pair => pair.includes(index));\n            \n            // Calculate bar properties\n            const barHeight = (value / maxValue) * availableHeight;\n            const x = index * (barWidth + BAR_PADDING);\n            const y = availableHeight - barHeight;\n            \n            // Determine bar color\n            let fill = mergedPalette.barDefault;\n            if (isHighlighted) {\n              fill = mergedPalette.barHighlight;\n            } else if (isComparing) {\n              fill = mergedPalette.combGap;\n            }\n            \n            return (\n              <rect\n                key={`bar-${index}`}\n                x={x}\n                y={y}\n                width={barWidth}\n                height={barHeight}\n                fill={fill}\n                stroke={isHighlighted || isComparing ? '#000' : 'none'}\n                strokeWidth={isHighlighted || isComparing ? 1 : 0}\n                style={{ transition: 'all 0.3s ease-in-out' }}\n              />\n            );\n          })}\n          \n          {/* Gap connections */}\n          {comparingPairs && comparingPairs.length > 0 && (\n            <g>\n              {comparingPairs.map((pair, pairIndex) => {\n                if (pair && pair.length === 2) {\n                  const index1 = pair[0];\n                  const index2 = pair[1];\n                  const x1 = index1 * (barWidth + BAR_PADDING) + barWidth / 2;\n                  const x2 = index2 * (barWidth + BAR_PADDING) + barWidth / 2;\n                  \n                  return (\n                    <g key={`comb-pair-${pairIndex}`}>\n                      <line\n                        x1={x1}\n                        y1={availableHeight + 10}\n                        x2={x2}\n                        y2={availableHeight + 10}\n                        stroke={mergedPalette.combGap}\n                        strokeWidth={2}\n                      />\n                      \n                      {/* Gap indicator */}\n                      <text\n                        x={(x1 + x2) / 2}\n                        y={availableHeight + 25}\n                        textAnchor=\"middle\"\n                        fill={mergedPalette.textPrimary}\n                        fontSize={12}\n                      >\n                        gap: {index2 - index1}\n                      </text>\n                    </g>\n                  );\n                }\n                return null;\n              })}\n            </g>\n          )}\n          \n          {/* Shrink factor indicator */}\n          {shrinkFactor && (\n            <text\n              x={availableWidth - 140}\n              y={30}\n              fill={mergedPalette.textPrimary}\n              fontSize={14}\n              fontWeight=\"bold\"\n            >\n              Shrink factor: {shrinkFactor.toFixed(2)}\n            </text>\n          )}\n        </g>\n        \n        {/* Labels */}\n        {showLabels && renderLabels()}\n      </svg>\n    );\n  };\n\n  /**\n   * Renders the odd-even sort visualization - specialized for alternating phases\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderOddEvenVisualization = () => {\n    const { phase, comparingPairs, swappedPairs } = transformState;\n    \n    return (\n      <svg width={width} height={height} ref={svgRef}>\n        {/* Background and grid */}\n        {showGrid && renderGrid()}\n        \n        {/* Axes */}\n        {showAxes && renderAxes()}\n        \n        {/* Phase indicator - colored band for odd/even phase */}\n        <rect\n          x={0}\n          y={0}\n          width={width}\n          height={AXIS_PADDING - 5}\n          fill={phase === 'odd' ? mergedPalette.oddEvenPhase : mergedPalette.textSecondary}\n          opacity={0.2}\n        />\n        \n        <text\n          x={width / 2}\n          y={AXIS_PADDING - 10}\n          textAnchor=\"middle\"\n          fill={mergedPalette.textPrimary}\n          fontSize={14}\n          fontWeight=\"bold\"\n        >\n          {phase === 'odd' ? 'Odd Phase' : 'Even Phase'}\n        </text>\n        \n        {/* Base array visualization */}\n        <g transform={`translate(${AXIS_PADDING}, ${AXIS_PADDING})`}>\n          {/* Render the array bars */}\n          {renderedData.map((value, index) => {\n            const isHighlighted = highlightedIndices.includes(index);\n            const isComparing = comparingPairs && \n              comparingPairs.some(pair => pair.includes(index));\n            const isSwapped = swappedPairs && \n              swappedPairs.some(pair => pair.includes(index));\n            \n            // Calculate bar properties\n            const barHeight = (value / maxValue) * availableHeight;\n            const x = index * (barWidth + BAR_PADDING);\n            const y = availableHeight - barHeight;\n            \n            // Determine bar color\n            let fill = mergedPalette.barDefault;\n            if (isSwapped) {\n              fill = mergedPalette.barSwap;\n            } else if (isComparing) {\n              fill = mergedPalette.oddEvenPhase;\n            } else if (isHighlighted) {\n              fill = mergedPalette.barHighlight;\n            }\n            \n            // Determine if this is in an active pair based on phase\n            const isActivePositionInPhase = \n              (phase === 'odd' && index % 2 === 0) || \n              (phase === 'even' && index % 2 === 1);\n            \n            return (\n              <g key={`bar-${index}`}>\n                <rect\n                  x={x}\n                  y={y}\n                  width={barWidth}\n                  height={barHeight}\n                  fill={fill}\n                  stroke={isHighlighted || isComparing ? '#000' : 'none'}\n                  strokeWidth={isHighlighted || isComparing ? 1 : 0}\n                  style={{ transition: 'all 0.3s ease-in-out' }}\n                />\n                \n                {/* Phase position indicator */}\n                {isActivePositionInPhase && index < renderedData.length - 1 && (\n                  <line\n                    x1={x + barWidth}\n                    y1={availableHeight + 5}\n                    x2={(index + 1) * (barWidth + BAR_PADDING)}\n                    y2={availableHeight + 5}\n                    stroke={phase === 'odd' ? mergedPalette.oddEvenPhase : mergedPalette.textSecondary}\n                    strokeWidth={2}\n                  />\n                )}\n              </g>\n            );\n          })}\n          \n          {/* Comparison connections */}\n          {comparingPairs && comparingPairs.length > 0 && (\n            <g>\n              {comparingPairs.map((pair, pairIndex) => {\n                if (pair && pair.length === 2) {\n                  const index1 = pair[0];\n                  const index2 = pair[1];\n                  const x1 = index1 * (barWidth + BAR_PADDING) + barWidth / 2;\n                  const x2 = index2 * (barWidth + BAR_PADDING) + barWidth / 2;\n                  const y1 = availableHeight - (renderedData[index1] / maxValue) * availableHeight;\n                  const y2 = availableHeight - (renderedData[index2] / maxValue) * availableHeight;\n                  \n                  // Check if this pair was swapped\n                  const wasSwapped = swappedPairs && \n                    swappedPairs.some(swapPair => \n                      swapPair[0] === pair[0] && swapPair[1] === pair[1]);\n                  \n                  return (\n                    <g key={`comparison-${pairIndex}`}>\n                      <line\n                        x1={x1}\n                        y1={Math.min(y1, y2) - 5}\n                        x2={x2}\n                        y2={Math.min(y1, y2) - 5}\n                        stroke={wasSwapped ? mergedPalette.barSwap : mergedPalette.oddEvenPhase}\n                        strokeWidth={wasSwapped ? 2 : 1}\n                        strokeDasharray={wasSwapped ? \"none\" : \"5,3\"}\n                      />\n                    </g>\n                  );\n                }\n                return null;\n              })}\n            </g>\n          )}\n        </g>\n        \n        {/* Labels */}\n        {showLabels && renderLabels()}\n      </svg>\n    );\n  };\n\n  /**\n   * Renders the gnome sort visualization - specialized for local backward stepping\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderGnomeVisualization = () => {\n    const { position, direction, comparing } = transformState;\n    \n    return (\n      <svg width={width} height={height} ref={svgRef}>\n        {/* Background and grid */}\n        {showGrid && renderGrid()}\n        \n        {/* Axes */}\n        {showAxes && renderAxes()}\n        \n        {/* Base array visualization */}\n        <g transform={`translate(${AXIS_PADDING}, ${AXIS_PADDING})`}>\n          {/* Render the array bars */}\n          {renderedData.map((value, index) => {\n            const isHighlighted = highlightedIndices.includes(index);\n            const isCurrentPosition = index === position;\n            const isComparing = comparing && comparing.includes(index);\n            \n            // Calculate bar properties\n            const barHeight = (value / maxValue) * availableHeight;\n            const x = index * (barWidth + BAR_PADDING);\n            const y = availableHeight - barHeight;\n            \n            // Determine bar color\n            let fill = mergedPalette.barDefault;\n            if (isCurrentPosition) {\n              fill = mergedPalette.gnomeStep;\n            } else if (isComparing) {\n              fill = direction === 'backward' ? mergedPalette.barSwap : mergedPalette.barComparing;\n            } else if (isHighlighted) {\n              fill = mergedPalette.barHighlight;\n            }\n            \n            return (\n              <rect\n                key={`bar-${index}`}\n                x={x}\n                y={y}\n                width={barWidth}\n                height={barHeight}\n                fill={fill}\n                stroke={(isHighlighted || isCurrentPosition || isComparing) ? '#000' : 'none'}\n                strokeWidth={(isHighlighted || isCurrentPosition || isComparing) ? 1 : 0}\n                style={{ transition: 'all 0.3s ease-in-out' }}\n              />\n            );\n          })}\n          \n          {/* Direction indicator */}\n          {position !== undefined && direction && (\n            <g>\n              {/* Movement arrow */}\n              <path\n                d={\n                  direction === 'forward'\n                    ? `M${position * (barWidth + BAR_PADDING) + barWidth / 2},${availableHeight + 15} \n                       l10,0 l-5,-8 z`\n                    : `M${position * (barWidth + BAR_PADDING) + barWidth / 2},${availableHeight + 15} \n                       l-10,0 l5,-8 z`\n                }\n                fill={direction === 'forward' ? mergedPalette.barDefault : mergedPalette.gnomeStep}\n                stroke=\"none\"\n              />\n              \n              {/* Position indicator line */}\n              <line\n                x1={position * (barWidth + BAR_PADDING) + barWidth / 2}\n                y1={availableHeight + 5}\n                x2={position * (barWidth + BAR_PADDING) + barWidth / 2}\n                y2={availableHeight + 25}\n                stroke={mergedPalette.gnomeStep}\n                strokeWidth={2}\n              />\n            </g>\n          )}\n        </g>\n        \n        {/* Labels */}\n        {showLabels && renderLabels()}\n      </svg>\n    );\n  };\n\n  /**\n   * Renders the cocktail sort visualization - specialized for bidirectional passes\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderCocktailVisualization = () => {\n    const { direction, rangeLow, rangeHigh, comparing } = transformState;\n    \n    return (\n      <svg width={width} height={height} ref={svgRef}>\n        {/* Background and grid */}\n        {showGrid && renderGrid()}\n        \n        {/* Axes */}\n        {showAxes && renderAxes()}\n        \n        {/* Direction indicator */}\n        <rect\n          x={0}\n          y={0}\n          width={width}\n          height={AXIS_PADDING - 5}\n          fill={direction === 'forward' ? mergedPalette.cocktailDirection : mergedPalette.barHighlight}\n          opacity={0.2}\n        />\n        \n        <text\n          x={width / 2}\n          y={AXIS_PADDING - 10}\n          textAnchor=\"middle\"\n          fill={mergedPalette.textPrimary}\n          fontSize={14}\n          fontWeight=\"bold\"\n        >\n          {direction === 'forward' ? 'Forward Pass' : 'Backward Pass'}\n        </text>\n        \n        {/* Base array visualization */}\n        <g transform={`translate(${AXIS_PADDING}, ${AXIS_PADDING})`}>\n          {/* Active range indicator */}\n          {rangeLow !== undefined && rangeHigh !== undefined && (\n            <rect\n              x={rangeLow * (barWidth + BAR_PADDING)}\n              y={0}\n              width={(rangeHigh - rangeLow + 1) * (barWidth + BAR_PADDING) - BAR_PADDING}\n              height={availableHeight}\n              fill={direction === 'forward' ? mergedPalette.cocktailDirection : mergedPalette.barHighlight}\n              opacity={0.1}\n            />\n          )}\n          \n          {/* Render the array bars */}\n          {renderedData.map((value, index) => {\n            const isHighlighted = highlightedIndices.includes(index);\n            const isComparing = comparing && comparing.includes(index);\n            const isInActiveRange = rangeLow !== undefined && \n              rangeHigh !== undefined && \n              index >= rangeLow && \n              index <= rangeHigh;\n            \n            // Calculate bar properties\n            const barHeight = (value / maxValue) * availableHeight;\n            const x = index * (barWidth + BAR_PADDING);\n            const y = availableHeight - barHeight;\n            \n            // Determine bar color\n            let fill = mergedPalette.barDefault;\n            if (isComparing) {\n              fill = mergedPalette.cocktailDirection;\n            } else if (isHighlighted) {\n              fill = mergedPalette.barHighlight;\n            } else if (isInActiveRange) {\n              fill = mergedPalette.barDefault;\n            } else {\n              fill = mergedPalette.barSorted; // Elements outside the range are sorted\n            }\n            \n            return (\n              <rect\n                key={`bar-${index}`}\n                x={x}\n                y={y}\n                width={barWidth}\n                height={barHeight}\n                fill={fill}\n                stroke={(isHighlighted || isComparing) ? '#000' : 'none'}\n                strokeWidth={(isHighlighted || isComparing) ? 1 : 0}\n                style={{ transition: 'all 0.3s ease-in-out' }}\n              />\n            );\n          })}\n          \n          {/* Direction arrow */}\n          {direction && (\n            <path\n              d={\n                direction === 'forward'\n                  ? `M${rangeLow * (barWidth + BAR_PADDING)},${availableHeight + 15} \n                     H${rangeHigh * (barWidth + BAR_PADDING) + barWidth} \n                     l-8,-5 v10 l8,-5`\n                  : `M${rangeHigh * (barWidth + BAR_PADDING) + barWidth},${availableHeight + 15} \n                     H${rangeLow * (barWidth + BAR_PADDING)} \n                     l8,-5 v10 l-8,-5`\n              }\n              fill=\"none\"\n              stroke={direction === 'forward' ? mergedPalette.cocktailDirection : mergedPalette.barHighlight}\n              strokeWidth={2}\n            />\n          )}\n        </g>\n        \n        {/* Labels */}\n        {showLabels && renderLabels()}\n      </svg>\n    );\n  };\n\n  /**\n   * Renders a generic transformation visualization for algorithms not specifically handled\n   * @returns {JSX.Element} SVG-based visualization\n   * @private\n   */\n  const renderGenericVisualization = () => {\n    return (\n      <svg width={width} height={height} ref={svgRef}>\n        {/* Background and grid */}\n        {showGrid && renderGrid()}\n        \n        {/* Axes */}\n        {showAxes && renderAxes()}\n        \n        {/* Base array visualization */}\n        <g transform={`translate(${AXIS_PADDING}, ${AXIS_PADDING})`}>\n          {/* Render the array bars */}\n          {renderedData.map((value, index) => {\n            const isHighlighted = highlightedIndices.includes(index);\n            \n            // Calculate bar properties\n            const barHeight = (value / maxValue) * availableHeight;\n            const x = index * (barWidth + BAR_PADDING);\n            const y = availableHeight - barHeight;\n            \n            // Determine bar color\n            const fill = isHighlighted ? mergedPalette.barHighlight : mergedPalette.barDefault;\n            \n            return (\n              <rect\n                key={`bar-${index}`}\n                x={x}\n                y={y}\n                width={barWidth}\n                height={barHeight}\n                fill={fill}\n                stroke={isHighlighted ? '#000' : 'none'}\n                strokeWidth={isHighlighted ? 1 : 0}\n                style={{ transition: 'all 0.3s ease-in-out' }}\n              />\n            );\n          })}\n        </g>\n        \n        {/* Labels */}\n        {showLabels && renderLabels()}\n      </svg>\n    );\n  };\n\n  /**\n   * Renders the grid for the visualization background\n   * @returns {JSX.Element} SVG grid\n   * @private\n   */\n  const renderGrid = () => {\n    const gridSize = 20;\n    const horizontalLines = Math.floor(height / gridSize);\n    const verticalLines = Math.floor(width / gridSize);\n    \n    return (\n      <g className=\"grid\">\n        {/* Horizontal grid lines */}\n        {Array.from({length: horizontalLines}).map((_, i) => (\n          <line\n            key={`h-grid-${i}`}\n            x1={0}\n            y1={i * gridSize}\n            x2={width}\n            y2={i * gridSize}\n            stroke={mergedPalette.gridLines}\n            strokeWidth={0.5}\n          />\n        ))}\n        \n        {/* Vertical grid lines */}\n        {Array.from({length: verticalLines}).map((_, i) => (\n          <line\n            key={`v-grid-${i}`}\n            x1={i * gridSize}\n            y1={0}\n            x2={i * gridSize}\n            y2={height}\n            stroke={mergedPalette.gridLines}\n            strokeWidth={0.5}\n          />\n        ))}\n      </g>\n    );\n  };\n\n  /**\n   * Renders axes for the visualization\n   * @returns {JSX.Element} SVG axes\n   * @private\n   */\n  const renderAxes = () => {\n    return (\n      <g className=\"axes\">\n        {/* X axis */}\n        <line\n          x1={AXIS_PADDING}\n          y1={height - AXIS_PADDING}\n          x2={width - AXIS_PADDING}\n          y2={height - AXIS_PADDING}\n          stroke={mergedPalette.axisLines}\n          strokeWidth={1}\n        />\n        \n        {/* Y axis */}\n        <line\n          x1={AXIS_PADDING}\n          y1={AXIS_PADDING}\n          x2={AXIS_PADDING}\n          y2={height - AXIS_PADDING}\n          stroke={mergedPalette.axisLines}\n          strokeWidth={1}\n        />\n        \n        {/* Axis labels */}\n        <text\n          x={width / 2}\n          y={height - 10}\n          textAnchor=\"middle\"\n          fill={mergedPalette.textPrimary}\n          fontSize={12}\n        >\n          Element Index\n        </text>\n        \n        <text\n          x={15}\n          y={height / 2}\n          textAnchor=\"middle\"\n          transform={`rotate(-90, 15, ${height / 2})`}\n          fill={mergedPalette.textPrimary}\n          fontSize={12}\n        >\n          Element Value\n        </text>\n      </g>\n    );\n  };\n\n  /**\n   * Renders value labels for the array elements\n   * @returns {JSX.Element} SVG labels\n   * @private\n   */\n  const renderLabels = () => {\n    return (\n      <g className=\"labels\" transform={`translate(${AXIS_PADDING}, ${AXIS_PADDING})`}>\n        {renderedData.map((value, index) => {\n          // Skip labels if there are too many elements to display clearly\n          if (renderedData.length > 30 && !highlightedIndices.includes(index)) {\n            return null;\n          }\n          \n          const x = index * (barWidth + BAR_PADDING) + barWidth / 2;\n          const y = availableHeight + LABEL_HEIGHT - 5;\n          \n          return (\n            <text\n              key={`label-${index}`}\n              x={x}\n              y={y}\n              textAnchor=\"middle\"\n              fill={mergedPalette.textPrimary}\n              fontSize={10}\n            >\n              {value}\n            </text>\n          );\n        })}\n      </g>\n    );\n  };\n\n  return (\n    <div\n      className=\"transform-visualizer\"\n      ref={containerRef}\n      style={{\n        width: width,\n        height: height,\n        position: 'relative',\n        backgroundColor: mergedPalette.background,\n        overflow: 'hidden',\n        borderRadius: '4px',\n        boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)'\n      }}\n    >\n      {renderTransformVisualization()}\n      \n      {/* Algorithm message/description overlay */}\n      {transformState.message && (\n        <div\n          className=\"transform-message\"\n          style={{\n            position: 'absolute',\n            bottom: 10,\n            left: 10,\n            right: 10,\n            padding: '8px 12px',\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            color: '#fff',\n            borderRadius: '4px',\n            fontSize: '14px',\n            maxWidth: '90%',\n            maxHeight: '80px',\n            overflow: 'auto'\n          }}\n        >\n          {transformState.message}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// PropTypes validation\nTransformVisualizer.propTypes = {\n  /**\n   * Array of numerical values to visualize\n   */\n  data: PropTypes.arrayOf(PropTypes.number).isRequired,\n  \n  /**\n   * Type of transformation being visualized (from TRANSFORM_TYPES)\n   */\n  transformationType: PropTypes.oneOf(Object.values(TRANSFORM_TYPES)).isRequired,\n  \n  /**\n   * Current step index in the algorithm execution\n   */\n  currentStep: PropTypes.number.isRequired,\n  \n  /**\n   * Array of step history data from algorithm execution\n   */\n  stepHistory: PropTypes.arrayOf(PropTypes.object).isRequired,\n  \n  /**\n   * Width of the visualization component\n   */\n  width: PropTypes.number,\n  \n  /**\n   * Height of the visualization component\n   */\n  height: PropTypes.number,\n  \n  /**\n   * Custom color palette overrides\n   */\n  colorPalette: PropTypes.object,\n  \n  /**\n   * Duration of animations in milliseconds\n   */\n  animationDuration: PropTypes.number,\n  \n  /**\n   * Whether to show value labels\n   */\n  showLabels: PropTypes.bool,\n  \n  /**\n   * Whether to show coordinate axes\n   */\n  showAxes: PropTypes.bool,\n  \n  /**\n   * Whether to show background grid\n   */\n  showGrid: PropTypes.bool\n};\n\n// Default props\nTransformVisualizer.defaultProps = {\n  width: 600,\n  height: 400,\n  colorPalette: {},\n  animationDuration: 300,\n  showLabels: true,\n  showAxes: true,\n  showGrid: false\n};\n\nexport { TransformVisualizer, TRANSFORM_TYPES };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}