{"ast":null,"code":"var _jsxFileName = \"/Users/mohammadatashi/Documents/GitHub/Advanced-Algorithms-Laboratory/sorting-visualizer/src/visualization/components/selection-visualizer.js\";\n// src/visualization/components/selection-visualizer.js\n\n/**\n * @file Selection Algorithm Visualizer Component\n * @author Algorithm Visualization Platform Team\n * @version 1.0.0\n * @license MIT\n * \n * @description\n * Specialized visualization component for selection algorithms (QuickSelect, Median of Medians).\n * This component renders the key operations, state transitions, and recursive subproblems in\n * selection algorithms, with particular focus on visualizing:\n * \n * 1. Partitioning operations and pivot selection\n * 2. Search space narrowing and target identification\n * 3. Recursive subproblems and their solutions\n * 4. Median-of-medians grouping and hierarchical median finding\n * \n * The component leverages WebGL for high-performance rendering while adding specialized\n * overlays and visual elements to illuminate the conceptual model of selection algorithms.\n */\n\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { WebGLRenderer } from '../renderers/webgl-renderer';\nimport PropTypes from 'prop-types';\n\n/**\n * SVG path strings for custom elements\n * @constant\n * @private\n */\nconst SVG_PATHS = {\n  targetMarker: 'M -6,-8 L 6,-8 L 0,0 Z',\n  medianIndicator: 'M -8,0 L 8,0 M 0,-8 L 0,8',\n  groupBracket: 'M 0,0 L 0,10 L $WIDTH,10 L $WIDTH,0'\n};\n\n/**\n * SelectionVisualizer component for visualizing selection algorithms\n * \n * @component\n * @param {Object} props - Component properties\n * @param {Array} props.data - The data array being processed\n * @param {Object} props.algorithm - The selection algorithm instance\n * @param {Object} props.currentStep - Current algorithm step data\n * @param {number} props.targetIndex - The k-th element index being selected\n * @param {number} props.width - Canvas width\n * @param {number} props.height - Canvas height\n * @param {Object} props.rendererOptions - Options for the WebGL renderer\n * @param {Function} props.onStepChange - Callback when step changes\n * @returns {JSX.Element} React component\n */\nconst SelectionVisualizer = ({\n  data = [],\n  algorithm = null,\n  currentStep = null,\n  targetIndex = 0,\n  width = 800,\n  height = 400,\n  rendererOptions = {},\n  onStepChange = () => {}\n}) => {\n  // Canvas references\n  const canvasRef = useRef(null);\n  const overlayRef = useRef(null);\n\n  // Renderer state\n  const [renderer, setRenderer] = useState(null);\n\n  // Algorithm state tracking\n  const [partitionRange, setPartitionRange] = useState(null);\n  const [pivotIndex, setPivotIndex] = useState(null);\n  const [medianGroups, setMedianGroups] = useState([]);\n  const [recursiveRanges, setRecursiveRanges] = useState([]);\n  const [selectedElement, setSelectedElement] = useState(null);\n  const [completedRanges, setCompletedRanges] = useState([]);\n\n  // Track the overall context of the algorithm (which phase we're in)\n  const [algorithmStage, setAlgorithmStage] = useState('initial');\n\n  // Memoized selection-specific colors\n  const colors = useMemo(() => ({\n    targetIndicator: '#FF5722',\n    pivotIndicator: '#FFC107',\n    rangeHighlight: 'rgba(33, 150, 243, 0.2)',\n    completedRange: 'rgba(76, 175, 80, 0.3)',\n    groupBorder: '#9C27B0',\n    medianIndicator: '#E91E63',\n    textAnnotation: '#212121',\n    secondaryText: '#757575'\n  }), []);\n\n  /**\n   * Initialize WebGL renderer on mount\n   */\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    try {\n      const defaultOptions = {\n        barWidth: 8,\n        spacing: 2,\n        colorScheme: 'viridis',\n        background: [0.1, 0.1, 0.15, 1.0]\n      };\n      const newRenderer = new WebGLRenderer(canvasRef.current, {\n        ...defaultOptions,\n        ...rendererOptions\n      });\n      setRenderer(newRenderer);\n\n      // Set initial data if available\n      if (data.length > 0) {\n        newRenderer.setData(data);\n      }\n      return () => {\n        if (newRenderer) {\n          newRenderer.dispose();\n        }\n      };\n    } catch (error) {\n      console.error('Failed to initialize WebGL renderer:', error);\n    }\n  }, []);\n\n  /**\n   * Update renderer when data changes\n   */\n  useEffect(() => {\n    if (renderer && data.length > 0) {\n      renderer.setData(data);\n    }\n  }, [data, renderer]);\n\n  /**\n   * Process current algorithm step and update visualization state\n   */\n  useEffect(() => {\n    if (!currentStep || !renderer) return;\n\n    // Extract step data and update visualization state\n    const {\n      type,\n      array,\n      section,\n      pivot,\n      groups,\n      k,\n      result\n    } = currentStep;\n\n    // Update array data to reflect current step (if provided)\n    if (array) {\n      renderer.setData(array, false);\n    }\n\n    // Update algorithm stage based on step type\n    setAlgorithmStage(type);\n\n    // Process step data based on type\n    switch (type) {\n      case 'partition_start':\n        // Starting a new partition operation\n        setPartitionRange(section);\n        setPivotIndex(pivot);\n        if (pivot !== null) {\n          renderer.highlight([pivot]);\n        }\n        break;\n      case 'partition_progress':\n        // Ongoing partition operation\n        setPartitionRange(section);\n        if (currentStep.comparing) {\n          renderer.markComparing(currentStep.comparing);\n        }\n        if (currentStep.swapped) {\n          renderer.highlight(currentStep.swapped);\n        }\n        break;\n      case 'partition_complete':\n        // Completed partition operation\n        setPartitionRange(section);\n        setPivotIndex(pivot);\n        // Highlight the pivot in its final position\n        if (pivot !== null) {\n          renderer.highlight([pivot]);\n        }\n        break;\n      case 'median_grouping':\n        // Median of medians grouping visualization\n        setMedianGroups(groups || []);\n        break;\n      case 'median_selection':\n        // Median selection within groups\n        setMedianGroups(groups || []);\n        if (currentStep.medians) {\n          renderer.highlight(currentStep.medians);\n        }\n        break;\n      case 'recursive_subproblem':\n        // Tracking recursive subproblems\n        if (section) {\n          setRecursiveRanges(prev => [...prev, section]);\n          setPartitionRange(section);\n        }\n        break;\n      case 'recursive_return':\n        // Returning from a recursive call\n        if (currentStep.completedSection) {\n          setCompletedRanges(prev => [...prev, currentStep.completedSection]);\n        }\n        setRecursiveRanges(prev => prev.filter(range => range[0] !== currentStep.section[0] || range[1] !== currentStep.section[1]));\n        break;\n      case 'element_found':\n        // K-th element has been found\n        setSelectedElement({\n          index: result.index,\n          value: result.value\n        });\n        renderer.markSorted([result.index]);\n        break;\n      case 'algorithm_complete':\n        // Algorithm execution completed\n        if (result && result.index !== undefined) {\n          setSelectedElement({\n            index: result.index,\n            value: result.value\n          });\n          renderer.markSorted([result.index]);\n        }\n        break;\n      default:\n        // For other step types, reset special visual indicators\n        break;\n    }\n  }, [currentStep, renderer]);\n\n  /**\n   * Draw overlay visualizations using Canvas API\n   */\n  useEffect(() => {\n    if (!overlayRef.current) return;\n    const overlay = overlayRef.current;\n    const ctx = overlay.getContext('2d');\n    ctx.clearRect(0, 0, overlay.width, overlay.height);\n\n    // Don't draw overlays if we don't have data or algorithm context\n    if (data.length === 0) return;\n\n    // Calculate bar width and spacing (must match WebGL renderer)\n    const barWidth = rendererOptions.barWidth || 8;\n    const spacing = rendererOptions.spacing || 2;\n    const totalWidth = barWidth + spacing;\n\n    // Draw target index indicator (the k-th element being searched for)\n    if (targetIndex !== null && targetIndex >= 0 && targetIndex < data.length) {\n      drawTargetIndicator(ctx, targetIndex, totalWidth);\n    }\n\n    // Draw current partition range\n    if (partitionRange && partitionRange.length === 2) {\n      drawPartitionRange(ctx, partitionRange, totalWidth);\n    }\n\n    // Draw recursive subproblem ranges\n    if (recursiveRanges.length > 0) {\n      drawRecursiveRanges(ctx, recursiveRanges, totalWidth);\n    }\n\n    // Draw completed ranges\n    if (completedRanges.length > 0) {\n      drawCompletedRanges(ctx, completedRanges, totalWidth);\n    }\n\n    // Draw median-of-medians groups\n    if (medianGroups.length > 0) {\n      drawMedianGroups(ctx, medianGroups, totalWidth);\n    }\n\n    // Draw found element indicator\n    if (selectedElement) {\n      drawSelectedElement(ctx, selectedElement, totalWidth);\n    }\n  }, [data, partitionRange, pivotIndex, recursiveRanges, completedRanges, medianGroups, selectedElement, targetIndex, rendererOptions]);\n\n  /**\n   * Draw the target index indicator (the k-th element being searched for)\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\n   * @param {number} index - Target index\n   * @param {number} totalWidth - Width of each bar including spacing\n   * @private\n   */\n  const drawTargetIndicator = (ctx, index, totalWidth) => {\n    const x = index * totalWidth + totalWidth / 2;\n    const y = height - 30;\n    ctx.save();\n\n    // Draw a triangle pointing to the target element\n    ctx.fillStyle = colors.targetIndicator;\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n    ctx.lineTo(x - 8, y + 15);\n    ctx.lineTo(x + 8, y + 15);\n    ctx.closePath();\n    ctx.fill();\n\n    // Draw label text\n    ctx.font = 'bold 12px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillStyle = colors.textAnnotation;\n    ctx.fillText(`k=${targetIndex}`, x, y + 30);\n    ctx.restore();\n  };\n\n  /**\n   * Draw the current partition range\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\n   * @param {Array<number>} range - [start, end] indices of the range\n   * @param {number} totalWidth - Width of each bar including spacing\n   * @private\n   */\n  const drawPartitionRange = (ctx, range, totalWidth) => {\n    const [start, end] = range;\n    const startX = start * totalWidth;\n    const endX = (end + 1) * totalWidth - spacing;\n    const y = 20;\n    const height = overlay.height - 50;\n    ctx.save();\n\n    // Draw range background\n    ctx.fillStyle = colors.rangeHighlight;\n    ctx.fillRect(startX, y, endX - startX, height);\n\n    // Draw range borders\n    ctx.strokeStyle = 'rgba(33, 150, 243, 0.7)';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(startX, y);\n    ctx.lineTo(startX, y + height);\n    ctx.moveTo(endX, y);\n    ctx.lineTo(endX, y + height);\n    ctx.stroke();\n\n    // Draw range label\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillStyle = colors.textAnnotation;\n    const midX = startX + (endX - startX) / 2;\n    ctx.fillText(`Range [${start}...${end}]`, midX, y - 5);\n\n    // If pivot is within this range, draw pivot indicator\n    if (pivotIndex !== null && pivotIndex >= start && pivotIndex <= end) {\n      const pivotX = pivotIndex * totalWidth + totalWidth / 2;\n\n      // Draw pivot line\n      ctx.strokeStyle = colors.pivotIndicator;\n      ctx.lineWidth = 2;\n      ctx.setLineDash([5, 3]);\n      ctx.beginPath();\n      ctx.moveTo(pivotX, y);\n      ctx.lineTo(pivotX, y + height);\n      ctx.stroke();\n      ctx.setLineDash([]);\n\n      // Draw pivot label\n      ctx.font = 'bold 12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillStyle = colors.pivotIndicator;\n      ctx.fillText('PIVOT', pivotX, y + height + 15);\n    }\n    ctx.restore();\n  };\n\n  /**\n   * Draw visualization of recursive subproblems\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\n   * @param {Array<Array<number>>} ranges - Array of [start, end] ranges\n   * @param {number} totalWidth - Width of each bar including spacing\n   * @private\n   */\n  const drawRecursiveRanges = (ctx, ranges, totalWidth) => {\n    ctx.save();\n    ranges.forEach((range, index) => {\n      const [start, end] = range;\n      const startX = start * totalWidth;\n      const endX = (end + 1) * totalWidth - spacing;\n      const y = 5 + index * 10; // Stack the borders for nested recursion visualization\n\n      // Draw range indicator (just top border to avoid clutter)\n      ctx.strokeStyle = `rgba(156, 39, 176, ${0.8 - index * 0.2})`; // Fade for deeper recursion\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.moveTo(startX, y);\n      ctx.lineTo(endX, y);\n      ctx.stroke();\n\n      // Draw small labels on the top\n      ctx.font = '10px Arial';\n      ctx.fillStyle = `rgba(156, 39, 176, ${0.8 - index * 0.2})`;\n      ctx.textAlign = 'left';\n      ctx.fillText(`R${index + 1}`, startX + 2, y - 2);\n    });\n    ctx.restore();\n  };\n\n  /**\n   * Draw completed (resolved) ranges\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\n   * @param {Array<Array<number>>} ranges - Array of [start, end] ranges\n   * @param {number} totalWidth - Width of each bar including spacing\n   * @private\n   */\n  const drawCompletedRanges = (ctx, ranges, totalWidth) => {\n    ctx.save();\n    ranges.forEach(range => {\n      const [start, end] = range;\n      const startX = start * totalWidth;\n      const endX = (end + 1) * totalWidth - spacing;\n      const y = 20;\n      const height = overlay.height - 50;\n\n      // Draw semi-transparent green background\n      ctx.fillStyle = colors.completedRange;\n      ctx.fillRect(startX, y, endX - startX, height);\n\n      // Draw checkmark to indicate completion\n      if (end - start > 3) {\n        // Only if range is wide enough\n        const centerX = startX + (endX - startX) / 2;\n        const centerY = y + 20;\n        ctx.strokeStyle = 'rgba(76, 175, 80, 0.7)';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(centerX - 10, centerY);\n        ctx.lineTo(centerX - 5, centerY + 5);\n        ctx.lineTo(centerX + 10, centerY - 10);\n        ctx.stroke();\n      }\n    });\n    ctx.restore();\n  };\n\n  /**\n   * Draw median-of-medians groups\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\n   * @param {Array<Array<number>>} groups - Array of index groups\n   * @param {number} totalWidth - Width of each bar including spacing\n   * @private\n   */\n  const drawMedianGroups = (ctx, groups, totalWidth) => {\n    ctx.save();\n    groups.forEach((group, groupIndex) => {\n      if (group.length === 0) return;\n\n      // Calculate group dimensions\n      const startIndex = Math.min(...group);\n      const endIndex = Math.max(...group);\n      const startX = startIndex * totalWidth;\n      const endX = (endIndex + 1) * totalWidth - spacing;\n      const width = endX - startX;\n      const y = 40 + groupIndex % 3 * 15; // Stagger groups vertically to avoid overlap\n\n      // Draw group bracket\n      ctx.strokeStyle = colors.groupBorder;\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n\n      // Top line with small vertical segments at ends\n      ctx.moveTo(startX, y);\n      ctx.lineTo(startX, y - 5);\n      ctx.lineTo(endX, y - 5);\n      ctx.lineTo(endX, y);\n      ctx.stroke();\n\n      // If group has computed median, mark it\n      if (group.median !== undefined) {\n        const medianIndex = group.median;\n        const medianX = medianIndex * totalWidth + totalWidth / 2;\n\n        // Draw median indicator\n        ctx.strokeStyle = colors.medianIndicator;\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(medianX, y - 8);\n        ctx.lineTo(medianX, y + 8);\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.moveTo(medianX - 5, y);\n        ctx.lineTo(medianX + 5, y);\n        ctx.stroke();\n\n        // Small \"M\" label\n        ctx.font = '10px Arial';\n        ctx.fillStyle = colors.medianIndicator;\n        ctx.textAlign = 'center';\n        ctx.fillText('M', medianX, y - 10);\n      }\n\n      // Group number\n      ctx.font = '10px Arial';\n      ctx.fillStyle = colors.groupBorder;\n      ctx.textAlign = 'left';\n      ctx.fillText(`G${groupIndex + 1}`, startX + 2, y - 7);\n    });\n    ctx.restore();\n  };\n\n  /**\n   * Draw the selected (found) element\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\n   * @param {Object} element - The selected element {index, value}\n   * @param {number} totalWidth - Width of each bar including spacing\n   * @private\n   */\n  const drawSelectedElement = (ctx, element, totalWidth) => {\n    const {\n      index,\n      value\n    } = element;\n    const x = index * totalWidth + totalWidth / 2;\n    const y = height / 2;\n    ctx.save();\n\n    // Draw highlight effect\n    const gradient = ctx.createRadialGradient(x, y, 5, x, y, 40);\n    gradient.addColorStop(0, 'rgba(255, 193, 7, 0.8)');\n    gradient.addColorStop(1, 'rgba(255, 193, 7, 0)');\n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.arc(x, y, 40, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Draw result text\n    ctx.font = 'bold 14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillStyle = colors.targetIndicator;\n    ctx.fillText(`Found: ${value}`, x, height - 60);\n    ctx.font = '12px Arial';\n    ctx.fillStyle = colors.secondaryText;\n    ctx.fillText(`at index ${index}`, x, height - 45);\n    ctx.restore();\n  };\n\n  /**\n   * Get algorithm stage description text\n   * @returns {string} Description of current algorithm stage\n   */\n  const getStageDescription = () => {\n    switch (algorithmStage) {\n      case 'initial':\n        return 'Algorithm initialized';\n      case 'partition_start':\n        return 'Starting partition operation';\n      case 'partition_progress':\n        return 'Partitioning elements around pivot';\n      case 'partition_complete':\n        return 'Partition complete, pivot in final position';\n      case 'median_grouping':\n        return 'Grouping elements for median-of-medians';\n      case 'median_selection':\n        return 'Selecting medians from groups';\n      case 'recursive_subproblem':\n        return 'Entering recursive subproblem';\n      case 'recursive_return':\n        return 'Returning from recursive call';\n      case 'element_found':\n        return `Element at index ${targetIndex} found`;\n      case 'algorithm_complete':\n        return 'Algorithm execution complete';\n      default:\n        return 'Processing...';\n    }\n  };\n\n  // Render component\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"selection-visualizer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"visualization-container\",\n    style: {\n      position: 'relative',\n      width,\n      height\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: height,\n    className: \"visualization-canvas\",\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: overlayRef,\n    width: width,\n    height: height,\n    className: \"visualization-overlay\",\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      pointerEvents: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"algorithm-status\",\n    style: {\n      position: 'absolute',\n      top: 10,\n      right: 10,\n      padding: '8px 12px',\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      borderRadius: '4px',\n      fontSize: '12px',\n      zIndex: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontWeight: 'bold',\n      marginBottom: '4px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 11\n    }\n  }, (algorithm === null || algorithm === void 0 ? void 0 : algorithm.name) || 'Selection Algorithm'), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 11\n    }\n  }, getStageDescription()), targetIndex !== null && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '4px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 13\n    }\n  }, \"Target: \", targetIndex === 0 ? 'Minimum' : targetIndex === data.length - 1 ? 'Maximum' : `${targetIndex + 1}${['st', 'nd', 'rd'][targetIndex % 10 - 1] || 'th'} element`))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"selection-legend\",\n    style: {\n      marginTop: '10px',\n      fontSize: '12px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: '12px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'inline-block',\n      width: '12px',\n      height: '12px',\n      backgroundColor: colors.rangeHighlight,\n      marginRight: '5px',\n      border: '1px solid rgba(33, 150, 243, 0.7)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 661,\n      columnNumber: 13\n    }\n  }, \"Current Range\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'inline-block',\n      width: '12px',\n      height: '12px',\n      backgroundColor: colors.pivotIndicator,\n      marginRight: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 13\n    }\n  }, \"Pivot Element\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'inline-block',\n      width: '12px',\n      height: '12px',\n      backgroundColor: colors.targetIndicator,\n      marginRight: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 13\n    }\n  }, \"Target Index\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'inline-block',\n      width: '12px',\n      height: '12px',\n      backgroundColor: colors.groupBorder,\n      marginRight: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 672,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 673,\n      columnNumber: 13\n    }\n  }, \"Median Groups\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 675,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'inline-block',\n      width: '12px',\n      height: '12px',\n      backgroundColor: colors.completedRange,\n      marginRight: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 676,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 13\n    }\n  }, \"Completed Sections\")))));\n};\n\n// PropTypes for documentation and type checking\nSelectionVisualizer.propTypes = {\n  data: PropTypes.array,\n  algorithm: PropTypes.object,\n  currentStep: PropTypes.object,\n  targetIndex: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  rendererOptions: PropTypes.object,\n  onStepChange: PropTypes.func\n};\nexport default SelectionVisualizer;","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","WebGLRenderer","PropTypes","SVG_PATHS","targetMarker","medianIndicator","groupBracket","SelectionVisualizer","data","algorithm","currentStep","targetIndex","width","height","rendererOptions","onStepChange","canvasRef","overlayRef","renderer","setRenderer","partitionRange","setPartitionRange","pivotIndex","setPivotIndex","medianGroups","setMedianGroups","recursiveRanges","setRecursiveRanges","selectedElement","setSelectedElement","completedRanges","setCompletedRanges","algorithmStage","setAlgorithmStage","colors","targetIndicator","pivotIndicator","rangeHighlight","completedRange","groupBorder","textAnnotation","secondaryText","current","defaultOptions","barWidth","spacing","colorScheme","background","newRenderer","length","setData","dispose","error","console","type","array","section","pivot","groups","k","result","highlight","comparing","markComparing","swapped","medians","prev","completedSection","filter","range","index","value","markSorted","undefined","overlay","ctx","getContext","clearRect","totalWidth","drawTargetIndicator","drawPartitionRange","drawRecursiveRanges","drawCompletedRanges","drawMedianGroups","drawSelectedElement","x","y","save","fillStyle","beginPath","moveTo","lineTo","closePath","fill","font","textAlign","fillText","restore","start","end","startX","endX","fillRect","strokeStyle","lineWidth","stroke","midX","pivotX","setLineDash","ranges","forEach","centerX","centerY","group","groupIndex","startIndex","Math","min","endIndex","max","median","medianIndex","medianX","element","gradient","createRadialGradient","addColorStop","arc","PI","getStageDescription","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","position","ref","top","left","pointerEvents","right","padding","backgroundColor","color","borderRadius","fontSize","zIndex","fontWeight","marginBottom","name","marginTop","display","flexWrap","gap","alignItems","marginRight","border","propTypes","object","number","func"],"sources":["/Users/mohammadatashi/Documents/GitHub/Advanced-Algorithms-Laboratory/sorting-visualizer/src/visualization/components/selection-visualizer.js"],"sourcesContent":["// src/visualization/components/selection-visualizer.js\n\n/**\n * @file Selection Algorithm Visualizer Component\n * @author Algorithm Visualization Platform Team\n * @version 1.0.0\n * @license MIT\n * \n * @description\n * Specialized visualization component for selection algorithms (QuickSelect, Median of Medians).\n * This component renders the key operations, state transitions, and recursive subproblems in\n * selection algorithms, with particular focus on visualizing:\n * \n * 1. Partitioning operations and pivot selection\n * 2. Search space narrowing and target identification\n * 3. Recursive subproblems and their solutions\n * 4. Median-of-medians grouping and hierarchical median finding\n * \n * The component leverages WebGL for high-performance rendering while adding specialized\n * overlays and visual elements to illuminate the conceptual model of selection algorithms.\n */\n\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { WebGLRenderer } from '../renderers/webgl-renderer';\nimport PropTypes from 'prop-types';\n\n/**\n * SVG path strings for custom elements\n * @constant\n * @private\n */\nconst SVG_PATHS = {\n  targetMarker: 'M -6,-8 L 6,-8 L 0,0 Z',\n  medianIndicator: 'M -8,0 L 8,0 M 0,-8 L 0,8',\n  groupBracket: 'M 0,0 L 0,10 L $WIDTH,10 L $WIDTH,0'\n};\n\n/**\n * SelectionVisualizer component for visualizing selection algorithms\n * \n * @component\n * @param {Object} props - Component properties\n * @param {Array} props.data - The data array being processed\n * @param {Object} props.algorithm - The selection algorithm instance\n * @param {Object} props.currentStep - Current algorithm step data\n * @param {number} props.targetIndex - The k-th element index being selected\n * @param {number} props.width - Canvas width\n * @param {number} props.height - Canvas height\n * @param {Object} props.rendererOptions - Options for the WebGL renderer\n * @param {Function} props.onStepChange - Callback when step changes\n * @returns {JSX.Element} React component\n */\nconst SelectionVisualizer = ({\n  data = [],\n  algorithm = null,\n  currentStep = null,\n  targetIndex = 0,\n  width = 800,\n  height = 400,\n  rendererOptions = {},\n  onStepChange = () => {}\n}) => {\n  // Canvas references\n  const canvasRef = useRef(null);\n  const overlayRef = useRef(null);\n  \n  // Renderer state\n  const [renderer, setRenderer] = useState(null);\n  \n  // Algorithm state tracking\n  const [partitionRange, setPartitionRange] = useState(null);\n  const [pivotIndex, setPivotIndex] = useState(null);\n  const [medianGroups, setMedianGroups] = useState([]);\n  const [recursiveRanges, setRecursiveRanges] = useState([]);\n  const [selectedElement, setSelectedElement] = useState(null);\n  const [completedRanges, setCompletedRanges] = useState([]);\n  \n  // Track the overall context of the algorithm (which phase we're in)\n  const [algorithmStage, setAlgorithmStage] = useState('initial');\n  \n  // Memoized selection-specific colors\n  const colors = useMemo(() => ({\n    targetIndicator: '#FF5722',\n    pivotIndicator: '#FFC107',\n    rangeHighlight: 'rgba(33, 150, 243, 0.2)',\n    completedRange: 'rgba(76, 175, 80, 0.3)',\n    groupBorder: '#9C27B0',\n    medianIndicator: '#E91E63',\n    textAnnotation: '#212121',\n    secondaryText: '#757575'\n  }), []);\n  \n  /**\n   * Initialize WebGL renderer on mount\n   */\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    \n    try {\n      const defaultOptions = {\n        barWidth: 8,\n        spacing: 2,\n        colorScheme: 'viridis',\n        background: [0.1, 0.1, 0.15, 1.0]\n      };\n      \n      const newRenderer = new WebGLRenderer(canvasRef.current, {\n        ...defaultOptions,\n        ...rendererOptions\n      });\n      \n      setRenderer(newRenderer);\n      \n      // Set initial data if available\n      if (data.length > 0) {\n        newRenderer.setData(data);\n      }\n      \n      return () => {\n        if (newRenderer) {\n          newRenderer.dispose();\n        }\n      };\n    } catch (error) {\n      console.error('Failed to initialize WebGL renderer:', error);\n    }\n  }, []);\n  \n  /**\n   * Update renderer when data changes\n   */\n  useEffect(() => {\n    if (renderer && data.length > 0) {\n      renderer.setData(data);\n    }\n  }, [data, renderer]);\n  \n  /**\n   * Process current algorithm step and update visualization state\n   */\n  useEffect(() => {\n    if (!currentStep || !renderer) return;\n    \n    // Extract step data and update visualization state\n    const { type, array, section, pivot, groups, k, result } = currentStep;\n    \n    // Update array data to reflect current step (if provided)\n    if (array) {\n      renderer.setData(array, false);\n    }\n    \n    // Update algorithm stage based on step type\n    setAlgorithmStage(type);\n    \n    // Process step data based on type\n    switch (type) {\n      case 'partition_start':\n        // Starting a new partition operation\n        setPartitionRange(section);\n        setPivotIndex(pivot);\n        if (pivot !== null) {\n          renderer.highlight([pivot]);\n        }\n        break;\n        \n      case 'partition_progress':\n        // Ongoing partition operation\n        setPartitionRange(section);\n        if (currentStep.comparing) {\n          renderer.markComparing(currentStep.comparing);\n        }\n        if (currentStep.swapped) {\n          renderer.highlight(currentStep.swapped);\n        }\n        break;\n        \n      case 'partition_complete':\n        // Completed partition operation\n        setPartitionRange(section);\n        setPivotIndex(pivot);\n        // Highlight the pivot in its final position\n        if (pivot !== null) {\n          renderer.highlight([pivot]);\n        }\n        break;\n        \n      case 'median_grouping':\n        // Median of medians grouping visualization\n        setMedianGroups(groups || []);\n        break;\n        \n      case 'median_selection':\n        // Median selection within groups\n        setMedianGroups(groups || []);\n        if (currentStep.medians) {\n          renderer.highlight(currentStep.medians);\n        }\n        break;\n        \n      case 'recursive_subproblem':\n        // Tracking recursive subproblems\n        if (section) {\n          setRecursiveRanges(prev => [...prev, section]);\n          setPartitionRange(section);\n        }\n        break;\n        \n      case 'recursive_return':\n        // Returning from a recursive call\n        if (currentStep.completedSection) {\n          setCompletedRanges(prev => [...prev, currentStep.completedSection]);\n        }\n        setRecursiveRanges(prev => prev.filter(range => \n          range[0] !== currentStep.section[0] || range[1] !== currentStep.section[1]\n        ));\n        break;\n        \n      case 'element_found':\n        // K-th element has been found\n        setSelectedElement({\n          index: result.index,\n          value: result.value\n        });\n        renderer.markSorted([result.index]);\n        break;\n        \n      case 'algorithm_complete':\n        // Algorithm execution completed\n        if (result && result.index !== undefined) {\n          setSelectedElement({\n            index: result.index,\n            value: result.value\n          });\n          renderer.markSorted([result.index]);\n        }\n        break;\n        \n      default:\n        // For other step types, reset special visual indicators\n        break;\n    }\n  }, [currentStep, renderer]);\n  \n  /**\n   * Draw overlay visualizations using Canvas API\n   */\n  useEffect(() => {\n    if (!overlayRef.current) return;\n    \n    const overlay = overlayRef.current;\n    const ctx = overlay.getContext('2d');\n    ctx.clearRect(0, 0, overlay.width, overlay.height);\n    \n    // Don't draw overlays if we don't have data or algorithm context\n    if (data.length === 0) return;\n    \n    // Calculate bar width and spacing (must match WebGL renderer)\n    const barWidth = rendererOptions.barWidth || 8;\n    const spacing = rendererOptions.spacing || 2;\n    const totalWidth = barWidth + spacing;\n    \n    // Draw target index indicator (the k-th element being searched for)\n    if (targetIndex !== null && targetIndex >= 0 && targetIndex < data.length) {\n      drawTargetIndicator(ctx, targetIndex, totalWidth);\n    }\n    \n    // Draw current partition range\n    if (partitionRange && partitionRange.length === 2) {\n      drawPartitionRange(ctx, partitionRange, totalWidth);\n    }\n    \n    // Draw recursive subproblem ranges\n    if (recursiveRanges.length > 0) {\n      drawRecursiveRanges(ctx, recursiveRanges, totalWidth);\n    }\n    \n    // Draw completed ranges\n    if (completedRanges.length > 0) {\n      drawCompletedRanges(ctx, completedRanges, totalWidth);\n    }\n    \n    // Draw median-of-medians groups\n    if (medianGroups.length > 0) {\n      drawMedianGroups(ctx, medianGroups, totalWidth);\n    }\n    \n    // Draw found element indicator\n    if (selectedElement) {\n      drawSelectedElement(ctx, selectedElement, totalWidth);\n    }\n    \n  }, [\n    data, \n    partitionRange, \n    pivotIndex, \n    recursiveRanges, \n    completedRanges, \n    medianGroups, \n    selectedElement, \n    targetIndex, \n    rendererOptions\n  ]);\n  \n  /**\n   * Draw the target index indicator (the k-th element being searched for)\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\n   * @param {number} index - Target index\n   * @param {number} totalWidth - Width of each bar including spacing\n   * @private\n   */\n  const drawTargetIndicator = (ctx, index, totalWidth) => {\n    const x = index * totalWidth + totalWidth / 2;\n    const y = height - 30;\n    \n    ctx.save();\n    \n    // Draw a triangle pointing to the target element\n    ctx.fillStyle = colors.targetIndicator;\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n    ctx.lineTo(x - 8, y + 15);\n    ctx.lineTo(x + 8, y + 15);\n    ctx.closePath();\n    ctx.fill();\n    \n    // Draw label text\n    ctx.font = 'bold 12px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillStyle = colors.textAnnotation;\n    ctx.fillText(`k=${targetIndex}`, x, y + 30);\n    \n    ctx.restore();\n  };\n  \n  /**\n   * Draw the current partition range\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\n   * @param {Array<number>} range - [start, end] indices of the range\n   * @param {number} totalWidth - Width of each bar including spacing\n   * @private\n   */\n  const drawPartitionRange = (ctx, range, totalWidth) => {\n    const [start, end] = range;\n    const startX = start * totalWidth;\n    const endX = (end + 1) * totalWidth - spacing;\n    const y = 20;\n    const height = overlay.height - 50;\n    \n    ctx.save();\n    \n    // Draw range background\n    ctx.fillStyle = colors.rangeHighlight;\n    ctx.fillRect(startX, y, endX - startX, height);\n    \n    // Draw range borders\n    ctx.strokeStyle = 'rgba(33, 150, 243, 0.7)';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(startX, y);\n    ctx.lineTo(startX, y + height);\n    ctx.moveTo(endX, y);\n    ctx.lineTo(endX, y + height);\n    ctx.stroke();\n    \n    // Draw range label\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillStyle = colors.textAnnotation;\n    const midX = startX + (endX - startX) / 2;\n    ctx.fillText(`Range [${start}...${end}]`, midX, y - 5);\n    \n    // If pivot is within this range, draw pivot indicator\n    if (pivotIndex !== null && pivotIndex >= start && pivotIndex <= end) {\n      const pivotX = pivotIndex * totalWidth + totalWidth / 2;\n      \n      // Draw pivot line\n      ctx.strokeStyle = colors.pivotIndicator;\n      ctx.lineWidth = 2;\n      ctx.setLineDash([5, 3]);\n      ctx.beginPath();\n      ctx.moveTo(pivotX, y);\n      ctx.lineTo(pivotX, y + height);\n      ctx.stroke();\n      ctx.setLineDash([]);\n      \n      // Draw pivot label\n      ctx.font = 'bold 12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillStyle = colors.pivotIndicator;\n      ctx.fillText('PIVOT', pivotX, y + height + 15);\n    }\n    \n    ctx.restore();\n  };\n  \n  /**\n   * Draw visualization of recursive subproblems\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\n   * @param {Array<Array<number>>} ranges - Array of [start, end] ranges\n   * @param {number} totalWidth - Width of each bar including spacing\n   * @private\n   */\n  const drawRecursiveRanges = (ctx, ranges, totalWidth) => {\n    ctx.save();\n    \n    ranges.forEach((range, index) => {\n      const [start, end] = range;\n      const startX = start * totalWidth;\n      const endX = (end + 1) * totalWidth - spacing;\n      const y = 5 + index * 10; // Stack the borders for nested recursion visualization\n      \n      // Draw range indicator (just top border to avoid clutter)\n      ctx.strokeStyle = `rgba(156, 39, 176, ${0.8 - index * 0.2})`; // Fade for deeper recursion\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.moveTo(startX, y);\n      ctx.lineTo(endX, y);\n      ctx.stroke();\n      \n      // Draw small labels on the top\n      ctx.font = '10px Arial';\n      ctx.fillStyle = `rgba(156, 39, 176, ${0.8 - index * 0.2})`;\n      ctx.textAlign = 'left';\n      ctx.fillText(`R${index+1}`, startX + 2, y - 2);\n    });\n    \n    ctx.restore();\n  };\n  \n  /**\n   * Draw completed (resolved) ranges\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\n   * @param {Array<Array<number>>} ranges - Array of [start, end] ranges\n   * @param {number} totalWidth - Width of each bar including spacing\n   * @private\n   */\n  const drawCompletedRanges = (ctx, ranges, totalWidth) => {\n    ctx.save();\n    \n    ranges.forEach(range => {\n      const [start, end] = range;\n      const startX = start * totalWidth;\n      const endX = (end + 1) * totalWidth - spacing;\n      const y = 20;\n      const height = overlay.height - 50;\n      \n      // Draw semi-transparent green background\n      ctx.fillStyle = colors.completedRange;\n      ctx.fillRect(startX, y, endX - startX, height);\n      \n      // Draw checkmark to indicate completion\n      if (end - start > 3) { // Only if range is wide enough\n        const centerX = startX + (endX - startX) / 2;\n        const centerY = y + 20;\n        \n        ctx.strokeStyle = 'rgba(76, 175, 80, 0.7)';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(centerX - 10, centerY);\n        ctx.lineTo(centerX - 5, centerY + 5);\n        ctx.lineTo(centerX + 10, centerY - 10);\n        ctx.stroke();\n      }\n    });\n    \n    ctx.restore();\n  };\n  \n  /**\n   * Draw median-of-medians groups\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\n   * @param {Array<Array<number>>} groups - Array of index groups\n   * @param {number} totalWidth - Width of each bar including spacing\n   * @private\n   */\n  const drawMedianGroups = (ctx, groups, totalWidth) => {\n    ctx.save();\n    \n    groups.forEach((group, groupIndex) => {\n      if (group.length === 0) return;\n      \n      // Calculate group dimensions\n      const startIndex = Math.min(...group);\n      const endIndex = Math.max(...group);\n      const startX = startIndex * totalWidth;\n      const endX = (endIndex + 1) * totalWidth - spacing;\n      const width = endX - startX;\n      const y = 40 + (groupIndex % 3) * 15; // Stagger groups vertically to avoid overlap\n      \n      // Draw group bracket\n      ctx.strokeStyle = colors.groupBorder;\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      \n      // Top line with small vertical segments at ends\n      ctx.moveTo(startX, y);\n      ctx.lineTo(startX, y - 5);\n      ctx.lineTo(endX, y - 5);\n      ctx.lineTo(endX, y);\n      \n      ctx.stroke();\n      \n      // If group has computed median, mark it\n      if (group.median !== undefined) {\n        const medianIndex = group.median;\n        const medianX = medianIndex * totalWidth + totalWidth / 2;\n        \n        // Draw median indicator\n        ctx.strokeStyle = colors.medianIndicator;\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(medianX, y - 8);\n        ctx.lineTo(medianX, y + 8);\n        ctx.stroke();\n        \n        ctx.beginPath();\n        ctx.moveTo(medianX - 5, y);\n        ctx.lineTo(medianX + 5, y);\n        ctx.stroke();\n        \n        // Small \"M\" label\n        ctx.font = '10px Arial';\n        ctx.fillStyle = colors.medianIndicator;\n        ctx.textAlign = 'center';\n        ctx.fillText('M', medianX, y - 10);\n      }\n      \n      // Group number\n      ctx.font = '10px Arial';\n      ctx.fillStyle = colors.groupBorder;\n      ctx.textAlign = 'left';\n      ctx.fillText(`G${groupIndex+1}`, startX + 2, y - 7);\n    });\n    \n    ctx.restore();\n  };\n  \n  /**\n   * Draw the selected (found) element\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\n   * @param {Object} element - The selected element {index, value}\n   * @param {number} totalWidth - Width of each bar including spacing\n   * @private\n   */\n  const drawSelectedElement = (ctx, element, totalWidth) => {\n    const { index, value } = element;\n    const x = index * totalWidth + totalWidth / 2;\n    const y = height / 2;\n    \n    ctx.save();\n    \n    // Draw highlight effect\n    const gradient = ctx.createRadialGradient(x, y, 5, x, y, 40);\n    gradient.addColorStop(0, 'rgba(255, 193, 7, 0.8)');\n    gradient.addColorStop(1, 'rgba(255, 193, 7, 0)');\n    \n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.arc(x, y, 40, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Draw result text\n    ctx.font = 'bold 14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillStyle = colors.targetIndicator;\n    ctx.fillText(`Found: ${value}`, x, height - 60);\n    ctx.font = '12px Arial';\n    ctx.fillStyle = colors.secondaryText;\n    ctx.fillText(`at index ${index}`, x, height - 45);\n    \n    ctx.restore();\n  };\n  \n  /**\n   * Get algorithm stage description text\n   * @returns {string} Description of current algorithm stage\n   */\n  const getStageDescription = () => {\n    switch (algorithmStage) {\n      case 'initial':\n        return 'Algorithm initialized';\n      case 'partition_start':\n        return 'Starting partition operation';\n      case 'partition_progress':\n        return 'Partitioning elements around pivot';\n      case 'partition_complete':\n        return 'Partition complete, pivot in final position';\n      case 'median_grouping':\n        return 'Grouping elements for median-of-medians';\n      case 'median_selection':\n        return 'Selecting medians from groups';\n      case 'recursive_subproblem':\n        return 'Entering recursive subproblem';\n      case 'recursive_return':\n        return 'Returning from recursive call';\n      case 'element_found':\n        return `Element at index ${targetIndex} found`;\n      case 'algorithm_complete':\n        return 'Algorithm execution complete';\n      default:\n        return 'Processing...';\n    }\n  };\n  \n  // Render component\n  return (\n    <div className=\"selection-visualizer\">\n      <div className=\"visualization-container\" style={{ position: 'relative', width, height }}>\n        {/* Primary visualization canvas (WebGL) */}\n        <canvas \n          ref={canvasRef}\n          width={width}\n          height={height}\n          className=\"visualization-canvas\"\n          style={{ position: 'absolute', top: 0, left: 0 }}\n        />\n        \n        {/* Overlay canvas for additional visualizations */}\n        <canvas\n          ref={overlayRef}\n          width={width}\n          height={height}\n          className=\"visualization-overlay\"\n          style={{ position: 'absolute', top: 0, left: 0, pointerEvents: 'none' }}\n        />\n        \n        {/* Algorithm status display */}\n        <div \n          className=\"algorithm-status\"\n          style={{\n            position: 'absolute',\n            top: 10,\n            right: 10,\n            padding: '8px 12px',\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            color: 'white',\n            borderRadius: '4px',\n            fontSize: '12px',\n            zIndex: 10\n          }}\n        >\n          <div style={{ fontWeight: 'bold', marginBottom: '4px' }}>\n            {algorithm?.name || 'Selection Algorithm'}\n          </div>\n          <div>{getStageDescription()}</div>\n          {targetIndex !== null && (\n            <div style={{ marginTop: '4px' }}>\n              Target: {targetIndex === 0 ? 'Minimum' : \n                      targetIndex === data.length - 1 ? 'Maximum' : \n                      `${targetIndex+1}${['st','nd','rd'][targetIndex % 10 - 1] || 'th'} element`}\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Legend */}\n      <div className=\"selection-legend\" style={{ marginTop: '10px', fontSize: '12px' }}>\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '12px' }}>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <span style={{ display: 'inline-block', width: '12px', height: '12px', backgroundColor: colors.rangeHighlight, marginRight: '5px', border: '1px solid rgba(33, 150, 243, 0.7)' }}></span>\n            <span>Current Range</span>\n          </div>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <span style={{ display: 'inline-block', width: '12px', height: '12px', backgroundColor: colors.pivotIndicator, marginRight: '5px' }}></span>\n            <span>Pivot Element</span>\n          </div>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <span style={{ display: 'inline-block', width: '12px', height: '12px', backgroundColor: colors.targetIndicator, marginRight: '5px' }}></span>\n            <span>Target Index</span>\n          </div>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <span style={{ display: 'inline-block', width: '12px', height: '12px', backgroundColor: colors.groupBorder, marginRight: '5px' }}></span>\n            <span>Median Groups</span>\n          </div>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <span style={{ display: 'inline-block', width: '12px', height: '12px', backgroundColor: colors.completedRange, marginRight: '5px' }}></span>\n            <span>Completed Sections</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// PropTypes for documentation and type checking\nSelectionVisualizer.propTypes = {\n  data: PropTypes.array,\n  algorithm: PropTypes.object,\n  currentStep: PropTypes.object,\n  targetIndex: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  rendererOptions: PropTypes.object,\n  onStepChange: PropTypes.func\n};\n\nexport default SelectionVisualizer;\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,OAAO,QAAQ,OAAO;AACnE,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,OAAOC,SAAS,MAAM,YAAY;;AAElC;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG;EAChBC,YAAY,EAAE,wBAAwB;EACtCC,eAAe,EAAE,2BAA2B;EAC5CC,YAAY,EAAE;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAGA,CAAC;EAC3BC,IAAI,GAAG,EAAE;EACTC,SAAS,GAAG,IAAI;EAChBC,WAAW,GAAG,IAAI;EAClBC,WAAW,GAAG,CAAC;EACfC,KAAK,GAAG,GAAG;EACXC,MAAM,GAAG,GAAG;EACZC,eAAe,GAAG,CAAC,CAAC;EACpBC,YAAY,GAAGA,CAAA,KAAM,CAAC;AACxB,CAAC,KAAK;EACJ;EACA,MAAMC,SAAS,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMkB,UAAU,GAAGlB,MAAM,CAAC,IAAI,CAAC;;EAE/B;EACA,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACA,MAAM,CAACuB,cAAc,EAAEC,iBAAiB,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACyB,UAAU,EAAEC,aAAa,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAC2B,YAAY,EAAEC,eAAe,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC6B,eAAe,EAAEC,kBAAkB,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC+B,eAAe,EAAEC,kBAAkB,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACiC,eAAe,EAAEC,kBAAkB,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;;EAE1D;EACA,MAAM,CAACmC,cAAc,EAAEC,iBAAiB,CAAC,GAAGpC,QAAQ,CAAC,SAAS,CAAC;;EAE/D;EACA,MAAMqC,MAAM,GAAGlC,OAAO,CAAC,OAAO;IAC5BmC,eAAe,EAAE,SAAS;IAC1BC,cAAc,EAAE,SAAS;IACzBC,cAAc,EAAE,yBAAyB;IACzCC,cAAc,EAAE,wBAAwB;IACxCC,WAAW,EAAE,SAAS;IACtBlC,eAAe,EAAE,SAAS;IAC1BmC,cAAc,EAAE,SAAS;IACzBC,aAAa,EAAE;EACjB,CAAC,CAAC,EAAE,EAAE,CAAC;;EAEP;AACF;AACA;EACE3C,SAAS,CAAC,MAAM;IACd,IAAI,CAACkB,SAAS,CAAC0B,OAAO,EAAE;IAExB,IAAI;MACF,MAAMC,cAAc,GAAG;QACrBC,QAAQ,EAAE,CAAC;QACXC,OAAO,EAAE,CAAC;QACVC,WAAW,EAAE,SAAS;QACtBC,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;MAClC,CAAC;MAED,MAAMC,WAAW,GAAG,IAAI/C,aAAa,CAACe,SAAS,CAAC0B,OAAO,EAAE;QACvD,GAAGC,cAAc;QACjB,GAAG7B;MACL,CAAC,CAAC;MAEFK,WAAW,CAAC6B,WAAW,CAAC;;MAExB;MACA,IAAIxC,IAAI,CAACyC,MAAM,GAAG,CAAC,EAAE;QACnBD,WAAW,CAACE,OAAO,CAAC1C,IAAI,CAAC;MAC3B;MAEA,OAAO,MAAM;QACX,IAAIwC,WAAW,EAAE;UACfA,WAAW,CAACG,OAAO,CAAC,CAAC;QACvB;MACF,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC9D;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;EACEtD,SAAS,CAAC,MAAM;IACd,IAAIoB,QAAQ,IAAIV,IAAI,CAACyC,MAAM,GAAG,CAAC,EAAE;MAC/B/B,QAAQ,CAACgC,OAAO,CAAC1C,IAAI,CAAC;IACxB;EACF,CAAC,EAAE,CAACA,IAAI,EAAEU,QAAQ,CAAC,CAAC;;EAEpB;AACF;AACA;EACEpB,SAAS,CAAC,MAAM;IACd,IAAI,CAACY,WAAW,IAAI,CAACQ,QAAQ,EAAE;;IAE/B;IACA,MAAM;MAAEoC,IAAI;MAAEC,KAAK;MAAEC,OAAO;MAAEC,KAAK;MAAEC,MAAM;MAAEC,CAAC;MAAEC;IAAO,CAAC,GAAGlD,WAAW;;IAEtE;IACA,IAAI6C,KAAK,EAAE;MACTrC,QAAQ,CAACgC,OAAO,CAACK,KAAK,EAAE,KAAK,CAAC;IAChC;;IAEA;IACAtB,iBAAiB,CAACqB,IAAI,CAAC;;IAEvB;IACA,QAAQA,IAAI;MACV,KAAK,iBAAiB;QACpB;QACAjC,iBAAiB,CAACmC,OAAO,CAAC;QAC1BjC,aAAa,CAACkC,KAAK,CAAC;QACpB,IAAIA,KAAK,KAAK,IAAI,EAAE;UAClBvC,QAAQ,CAAC2C,SAAS,CAAC,CAACJ,KAAK,CAAC,CAAC;QAC7B;QACA;MAEF,KAAK,oBAAoB;QACvB;QACApC,iBAAiB,CAACmC,OAAO,CAAC;QAC1B,IAAI9C,WAAW,CAACoD,SAAS,EAAE;UACzB5C,QAAQ,CAAC6C,aAAa,CAACrD,WAAW,CAACoD,SAAS,CAAC;QAC/C;QACA,IAAIpD,WAAW,CAACsD,OAAO,EAAE;UACvB9C,QAAQ,CAAC2C,SAAS,CAACnD,WAAW,CAACsD,OAAO,CAAC;QACzC;QACA;MAEF,KAAK,oBAAoB;QACvB;QACA3C,iBAAiB,CAACmC,OAAO,CAAC;QAC1BjC,aAAa,CAACkC,KAAK,CAAC;QACpB;QACA,IAAIA,KAAK,KAAK,IAAI,EAAE;UAClBvC,QAAQ,CAAC2C,SAAS,CAAC,CAACJ,KAAK,CAAC,CAAC;QAC7B;QACA;MAEF,KAAK,iBAAiB;QACpB;QACAhC,eAAe,CAACiC,MAAM,IAAI,EAAE,CAAC;QAC7B;MAEF,KAAK,kBAAkB;QACrB;QACAjC,eAAe,CAACiC,MAAM,IAAI,EAAE,CAAC;QAC7B,IAAIhD,WAAW,CAACuD,OAAO,EAAE;UACvB/C,QAAQ,CAAC2C,SAAS,CAACnD,WAAW,CAACuD,OAAO,CAAC;QACzC;QACA;MAEF,KAAK,sBAAsB;QACzB;QACA,IAAIT,OAAO,EAAE;UACX7B,kBAAkB,CAACuC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEV,OAAO,CAAC,CAAC;UAC9CnC,iBAAiB,CAACmC,OAAO,CAAC;QAC5B;QACA;MAEF,KAAK,kBAAkB;QACrB;QACA,IAAI9C,WAAW,CAACyD,gBAAgB,EAAE;UAChCpC,kBAAkB,CAACmC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAExD,WAAW,CAACyD,gBAAgB,CAAC,CAAC;QACrE;QACAxC,kBAAkB,CAACuC,IAAI,IAAIA,IAAI,CAACE,MAAM,CAACC,KAAK,IAC1CA,KAAK,CAAC,CAAC,CAAC,KAAK3D,WAAW,CAAC8C,OAAO,CAAC,CAAC,CAAC,IAAIa,KAAK,CAAC,CAAC,CAAC,KAAK3D,WAAW,CAAC8C,OAAO,CAAC,CAAC,CAC3E,CAAC,CAAC;QACF;MAEF,KAAK,eAAe;QAClB;QACA3B,kBAAkB,CAAC;UACjByC,KAAK,EAAEV,MAAM,CAACU,KAAK;UACnBC,KAAK,EAAEX,MAAM,CAACW;QAChB,CAAC,CAAC;QACFrD,QAAQ,CAACsD,UAAU,CAAC,CAACZ,MAAM,CAACU,KAAK,CAAC,CAAC;QACnC;MAEF,KAAK,oBAAoB;QACvB;QACA,IAAIV,MAAM,IAAIA,MAAM,CAACU,KAAK,KAAKG,SAAS,EAAE;UACxC5C,kBAAkB,CAAC;YACjByC,KAAK,EAAEV,MAAM,CAACU,KAAK;YACnBC,KAAK,EAAEX,MAAM,CAACW;UAChB,CAAC,CAAC;UACFrD,QAAQ,CAACsD,UAAU,CAAC,CAACZ,MAAM,CAACU,KAAK,CAAC,CAAC;QACrC;QACA;MAEF;QACE;QACA;IACJ;EACF,CAAC,EAAE,CAAC5D,WAAW,EAAEQ,QAAQ,CAAC,CAAC;;EAE3B;AACF;AACA;EACEpB,SAAS,CAAC,MAAM;IACd,IAAI,CAACmB,UAAU,CAACyB,OAAO,EAAE;IAEzB,MAAMgC,OAAO,GAAGzD,UAAU,CAACyB,OAAO;IAClC,MAAMiC,GAAG,GAAGD,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC;IACpCD,GAAG,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEH,OAAO,CAAC9D,KAAK,EAAE8D,OAAO,CAAC7D,MAAM,CAAC;;IAElD;IACA,IAAIL,IAAI,CAACyC,MAAM,KAAK,CAAC,EAAE;;IAEvB;IACA,MAAML,QAAQ,GAAG9B,eAAe,CAAC8B,QAAQ,IAAI,CAAC;IAC9C,MAAMC,OAAO,GAAG/B,eAAe,CAAC+B,OAAO,IAAI,CAAC;IAC5C,MAAMiC,UAAU,GAAGlC,QAAQ,GAAGC,OAAO;;IAErC;IACA,IAAIlC,WAAW,KAAK,IAAI,IAAIA,WAAW,IAAI,CAAC,IAAIA,WAAW,GAAGH,IAAI,CAACyC,MAAM,EAAE;MACzE8B,mBAAmB,CAACJ,GAAG,EAAEhE,WAAW,EAAEmE,UAAU,CAAC;IACnD;;IAEA;IACA,IAAI1D,cAAc,IAAIA,cAAc,CAAC6B,MAAM,KAAK,CAAC,EAAE;MACjD+B,kBAAkB,CAACL,GAAG,EAAEvD,cAAc,EAAE0D,UAAU,CAAC;IACrD;;IAEA;IACA,IAAIpD,eAAe,CAACuB,MAAM,GAAG,CAAC,EAAE;MAC9BgC,mBAAmB,CAACN,GAAG,EAAEjD,eAAe,EAAEoD,UAAU,CAAC;IACvD;;IAEA;IACA,IAAIhD,eAAe,CAACmB,MAAM,GAAG,CAAC,EAAE;MAC9BiC,mBAAmB,CAACP,GAAG,EAAE7C,eAAe,EAAEgD,UAAU,CAAC;IACvD;;IAEA;IACA,IAAItD,YAAY,CAACyB,MAAM,GAAG,CAAC,EAAE;MAC3BkC,gBAAgB,CAACR,GAAG,EAAEnD,YAAY,EAAEsD,UAAU,CAAC;IACjD;;IAEA;IACA,IAAIlD,eAAe,EAAE;MACnBwD,mBAAmB,CAACT,GAAG,EAAE/C,eAAe,EAAEkD,UAAU,CAAC;IACvD;EAEF,CAAC,EAAE,CACDtE,IAAI,EACJY,cAAc,EACdE,UAAU,EACVI,eAAe,EACfI,eAAe,EACfN,YAAY,EACZI,eAAe,EACfjB,WAAW,EACXG,eAAe,CAChB,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMiE,mBAAmB,GAAGA,CAACJ,GAAG,EAAEL,KAAK,EAAEQ,UAAU,KAAK;IACtD,MAAMO,CAAC,GAAGf,KAAK,GAAGQ,UAAU,GAAGA,UAAU,GAAG,CAAC;IAC7C,MAAMQ,CAAC,GAAGzE,MAAM,GAAG,EAAE;IAErB8D,GAAG,CAACY,IAAI,CAAC,CAAC;;IAEV;IACAZ,GAAG,CAACa,SAAS,GAAGtD,MAAM,CAACC,eAAe;IACtCwC,GAAG,CAACc,SAAS,CAAC,CAAC;IACfd,GAAG,CAACe,MAAM,CAACL,CAAC,EAAEC,CAAC,CAAC;IAChBX,GAAG,CAACgB,MAAM,CAACN,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,EAAE,CAAC;IACzBX,GAAG,CAACgB,MAAM,CAACN,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,EAAE,CAAC;IACzBX,GAAG,CAACiB,SAAS,CAAC,CAAC;IACfjB,GAAG,CAACkB,IAAI,CAAC,CAAC;;IAEV;IACAlB,GAAG,CAACmB,IAAI,GAAG,iBAAiB;IAC5BnB,GAAG,CAACoB,SAAS,GAAG,QAAQ;IACxBpB,GAAG,CAACa,SAAS,GAAGtD,MAAM,CAACM,cAAc;IACrCmC,GAAG,CAACqB,QAAQ,CAAC,KAAKrF,WAAW,EAAE,EAAE0E,CAAC,EAAEC,CAAC,GAAG,EAAE,CAAC;IAE3CX,GAAG,CAACsB,OAAO,CAAC,CAAC;EACf,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMjB,kBAAkB,GAAGA,CAACL,GAAG,EAAEN,KAAK,EAAES,UAAU,KAAK;IACrD,MAAM,CAACoB,KAAK,EAAEC,GAAG,CAAC,GAAG9B,KAAK;IAC1B,MAAM+B,MAAM,GAAGF,KAAK,GAAGpB,UAAU;IACjC,MAAMuB,IAAI,GAAG,CAACF,GAAG,GAAG,CAAC,IAAIrB,UAAU,GAAGjC,OAAO;IAC7C,MAAMyC,CAAC,GAAG,EAAE;IACZ,MAAMzE,MAAM,GAAG6D,OAAO,CAAC7D,MAAM,GAAG,EAAE;IAElC8D,GAAG,CAACY,IAAI,CAAC,CAAC;;IAEV;IACAZ,GAAG,CAACa,SAAS,GAAGtD,MAAM,CAACG,cAAc;IACrCsC,GAAG,CAAC2B,QAAQ,CAACF,MAAM,EAAEd,CAAC,EAAEe,IAAI,GAAGD,MAAM,EAAEvF,MAAM,CAAC;;IAE9C;IACA8D,GAAG,CAAC4B,WAAW,GAAG,yBAAyB;IAC3C5B,GAAG,CAAC6B,SAAS,GAAG,CAAC;IACjB7B,GAAG,CAACc,SAAS,CAAC,CAAC;IACfd,GAAG,CAACe,MAAM,CAACU,MAAM,EAAEd,CAAC,CAAC;IACrBX,GAAG,CAACgB,MAAM,CAACS,MAAM,EAAEd,CAAC,GAAGzE,MAAM,CAAC;IAC9B8D,GAAG,CAACe,MAAM,CAACW,IAAI,EAAEf,CAAC,CAAC;IACnBX,GAAG,CAACgB,MAAM,CAACU,IAAI,EAAEf,CAAC,GAAGzE,MAAM,CAAC;IAC5B8D,GAAG,CAAC8B,MAAM,CAAC,CAAC;;IAEZ;IACA9B,GAAG,CAACmB,IAAI,GAAG,YAAY;IACvBnB,GAAG,CAACoB,SAAS,GAAG,QAAQ;IACxBpB,GAAG,CAACa,SAAS,GAAGtD,MAAM,CAACM,cAAc;IACrC,MAAMkE,IAAI,GAAGN,MAAM,GAAG,CAACC,IAAI,GAAGD,MAAM,IAAI,CAAC;IACzCzB,GAAG,CAACqB,QAAQ,CAAC,UAAUE,KAAK,MAAMC,GAAG,GAAG,EAAEO,IAAI,EAAEpB,CAAC,GAAG,CAAC,CAAC;;IAEtD;IACA,IAAIhE,UAAU,KAAK,IAAI,IAAIA,UAAU,IAAI4E,KAAK,IAAI5E,UAAU,IAAI6E,GAAG,EAAE;MACnE,MAAMQ,MAAM,GAAGrF,UAAU,GAAGwD,UAAU,GAAGA,UAAU,GAAG,CAAC;;MAEvD;MACAH,GAAG,CAAC4B,WAAW,GAAGrE,MAAM,CAACE,cAAc;MACvCuC,GAAG,CAAC6B,SAAS,GAAG,CAAC;MACjB7B,GAAG,CAACiC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACvBjC,GAAG,CAACc,SAAS,CAAC,CAAC;MACfd,GAAG,CAACe,MAAM,CAACiB,MAAM,EAAErB,CAAC,CAAC;MACrBX,GAAG,CAACgB,MAAM,CAACgB,MAAM,EAAErB,CAAC,GAAGzE,MAAM,CAAC;MAC9B8D,GAAG,CAAC8B,MAAM,CAAC,CAAC;MACZ9B,GAAG,CAACiC,WAAW,CAAC,EAAE,CAAC;;MAEnB;MACAjC,GAAG,CAACmB,IAAI,GAAG,iBAAiB;MAC5BnB,GAAG,CAACoB,SAAS,GAAG,QAAQ;MACxBpB,GAAG,CAACa,SAAS,GAAGtD,MAAM,CAACE,cAAc;MACrCuC,GAAG,CAACqB,QAAQ,CAAC,OAAO,EAAEW,MAAM,EAAErB,CAAC,GAAGzE,MAAM,GAAG,EAAE,CAAC;IAChD;IAEA8D,GAAG,CAACsB,OAAO,CAAC,CAAC;EACf,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMhB,mBAAmB,GAAGA,CAACN,GAAG,EAAEkC,MAAM,EAAE/B,UAAU,KAAK;IACvDH,GAAG,CAACY,IAAI,CAAC,CAAC;IAEVsB,MAAM,CAACC,OAAO,CAAC,CAACzC,KAAK,EAAEC,KAAK,KAAK;MAC/B,MAAM,CAAC4B,KAAK,EAAEC,GAAG,CAAC,GAAG9B,KAAK;MAC1B,MAAM+B,MAAM,GAAGF,KAAK,GAAGpB,UAAU;MACjC,MAAMuB,IAAI,GAAG,CAACF,GAAG,GAAG,CAAC,IAAIrB,UAAU,GAAGjC,OAAO;MAC7C,MAAMyC,CAAC,GAAG,CAAC,GAAGhB,KAAK,GAAG,EAAE,CAAC,CAAC;;MAE1B;MACAK,GAAG,CAAC4B,WAAW,GAAG,sBAAsB,GAAG,GAAGjC,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC;MAC9DK,GAAG,CAAC6B,SAAS,GAAG,CAAC;MACjB7B,GAAG,CAACc,SAAS,CAAC,CAAC;MACfd,GAAG,CAACe,MAAM,CAACU,MAAM,EAAEd,CAAC,CAAC;MACrBX,GAAG,CAACgB,MAAM,CAACU,IAAI,EAAEf,CAAC,CAAC;MACnBX,GAAG,CAAC8B,MAAM,CAAC,CAAC;;MAEZ;MACA9B,GAAG,CAACmB,IAAI,GAAG,YAAY;MACvBnB,GAAG,CAACa,SAAS,GAAG,sBAAsB,GAAG,GAAGlB,KAAK,GAAG,GAAG,GAAG;MAC1DK,GAAG,CAACoB,SAAS,GAAG,MAAM;MACtBpB,GAAG,CAACqB,QAAQ,CAAC,IAAI1B,KAAK,GAAC,CAAC,EAAE,EAAE8B,MAAM,GAAG,CAAC,EAAEd,CAAC,GAAG,CAAC,CAAC;IAChD,CAAC,CAAC;IAEFX,GAAG,CAACsB,OAAO,CAAC,CAAC;EACf,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMf,mBAAmB,GAAGA,CAACP,GAAG,EAAEkC,MAAM,EAAE/B,UAAU,KAAK;IACvDH,GAAG,CAACY,IAAI,CAAC,CAAC;IAEVsB,MAAM,CAACC,OAAO,CAACzC,KAAK,IAAI;MACtB,MAAM,CAAC6B,KAAK,EAAEC,GAAG,CAAC,GAAG9B,KAAK;MAC1B,MAAM+B,MAAM,GAAGF,KAAK,GAAGpB,UAAU;MACjC,MAAMuB,IAAI,GAAG,CAACF,GAAG,GAAG,CAAC,IAAIrB,UAAU,GAAGjC,OAAO;MAC7C,MAAMyC,CAAC,GAAG,EAAE;MACZ,MAAMzE,MAAM,GAAG6D,OAAO,CAAC7D,MAAM,GAAG,EAAE;;MAElC;MACA8D,GAAG,CAACa,SAAS,GAAGtD,MAAM,CAACI,cAAc;MACrCqC,GAAG,CAAC2B,QAAQ,CAACF,MAAM,EAAEd,CAAC,EAAEe,IAAI,GAAGD,MAAM,EAAEvF,MAAM,CAAC;;MAE9C;MACA,IAAIsF,GAAG,GAAGD,KAAK,GAAG,CAAC,EAAE;QAAE;QACrB,MAAMa,OAAO,GAAGX,MAAM,GAAG,CAACC,IAAI,GAAGD,MAAM,IAAI,CAAC;QAC5C,MAAMY,OAAO,GAAG1B,CAAC,GAAG,EAAE;QAEtBX,GAAG,CAAC4B,WAAW,GAAG,wBAAwB;QAC1C5B,GAAG,CAAC6B,SAAS,GAAG,CAAC;QACjB7B,GAAG,CAACc,SAAS,CAAC,CAAC;QACfd,GAAG,CAACe,MAAM,CAACqB,OAAO,GAAG,EAAE,EAAEC,OAAO,CAAC;QACjCrC,GAAG,CAACgB,MAAM,CAACoB,OAAO,GAAG,CAAC,EAAEC,OAAO,GAAG,CAAC,CAAC;QACpCrC,GAAG,CAACgB,MAAM,CAACoB,OAAO,GAAG,EAAE,EAAEC,OAAO,GAAG,EAAE,CAAC;QACtCrC,GAAG,CAAC8B,MAAM,CAAC,CAAC;MACd;IACF,CAAC,CAAC;IAEF9B,GAAG,CAACsB,OAAO,CAAC,CAAC;EACf,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMd,gBAAgB,GAAGA,CAACR,GAAG,EAAEjB,MAAM,EAAEoB,UAAU,KAAK;IACpDH,GAAG,CAACY,IAAI,CAAC,CAAC;IAEV7B,MAAM,CAACoD,OAAO,CAAC,CAACG,KAAK,EAAEC,UAAU,KAAK;MACpC,IAAID,KAAK,CAAChE,MAAM,KAAK,CAAC,EAAE;;MAExB;MACA,MAAMkE,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGJ,KAAK,CAAC;MACrC,MAAMK,QAAQ,GAAGF,IAAI,CAACG,GAAG,CAAC,GAAGN,KAAK,CAAC;MACnC,MAAMb,MAAM,GAAGe,UAAU,GAAGrC,UAAU;MACtC,MAAMuB,IAAI,GAAG,CAACiB,QAAQ,GAAG,CAAC,IAAIxC,UAAU,GAAGjC,OAAO;MAClD,MAAMjC,KAAK,GAAGyF,IAAI,GAAGD,MAAM;MAC3B,MAAMd,CAAC,GAAG,EAAE,GAAI4B,UAAU,GAAG,CAAC,GAAI,EAAE,CAAC,CAAC;;MAEtC;MACAvC,GAAG,CAAC4B,WAAW,GAAGrE,MAAM,CAACK,WAAW;MACpCoC,GAAG,CAAC6B,SAAS,GAAG,CAAC;MACjB7B,GAAG,CAACc,SAAS,CAAC,CAAC;;MAEf;MACAd,GAAG,CAACe,MAAM,CAACU,MAAM,EAAEd,CAAC,CAAC;MACrBX,GAAG,CAACgB,MAAM,CAACS,MAAM,EAAEd,CAAC,GAAG,CAAC,CAAC;MACzBX,GAAG,CAACgB,MAAM,CAACU,IAAI,EAAEf,CAAC,GAAG,CAAC,CAAC;MACvBX,GAAG,CAACgB,MAAM,CAACU,IAAI,EAAEf,CAAC,CAAC;MAEnBX,GAAG,CAAC8B,MAAM,CAAC,CAAC;;MAEZ;MACA,IAAIQ,KAAK,CAACO,MAAM,KAAK/C,SAAS,EAAE;QAC9B,MAAMgD,WAAW,GAAGR,KAAK,CAACO,MAAM;QAChC,MAAME,OAAO,GAAGD,WAAW,GAAG3C,UAAU,GAAGA,UAAU,GAAG,CAAC;;QAEzD;QACAH,GAAG,CAAC4B,WAAW,GAAGrE,MAAM,CAAC7B,eAAe;QACxCsE,GAAG,CAAC6B,SAAS,GAAG,CAAC;QACjB7B,GAAG,CAACc,SAAS,CAAC,CAAC;QACfd,GAAG,CAACe,MAAM,CAACgC,OAAO,EAAEpC,CAAC,GAAG,CAAC,CAAC;QAC1BX,GAAG,CAACgB,MAAM,CAAC+B,OAAO,EAAEpC,CAAC,GAAG,CAAC,CAAC;QAC1BX,GAAG,CAAC8B,MAAM,CAAC,CAAC;QAEZ9B,GAAG,CAACc,SAAS,CAAC,CAAC;QACfd,GAAG,CAACe,MAAM,CAACgC,OAAO,GAAG,CAAC,EAAEpC,CAAC,CAAC;QAC1BX,GAAG,CAACgB,MAAM,CAAC+B,OAAO,GAAG,CAAC,EAAEpC,CAAC,CAAC;QAC1BX,GAAG,CAAC8B,MAAM,CAAC,CAAC;;QAEZ;QACA9B,GAAG,CAACmB,IAAI,GAAG,YAAY;QACvBnB,GAAG,CAACa,SAAS,GAAGtD,MAAM,CAAC7B,eAAe;QACtCsE,GAAG,CAACoB,SAAS,GAAG,QAAQ;QACxBpB,GAAG,CAACqB,QAAQ,CAAC,GAAG,EAAE0B,OAAO,EAAEpC,CAAC,GAAG,EAAE,CAAC;MACpC;;MAEA;MACAX,GAAG,CAACmB,IAAI,GAAG,YAAY;MACvBnB,GAAG,CAACa,SAAS,GAAGtD,MAAM,CAACK,WAAW;MAClCoC,GAAG,CAACoB,SAAS,GAAG,MAAM;MACtBpB,GAAG,CAACqB,QAAQ,CAAC,IAAIkB,UAAU,GAAC,CAAC,EAAE,EAAEd,MAAM,GAAG,CAAC,EAAEd,CAAC,GAAG,CAAC,CAAC;IACrD,CAAC,CAAC;IAEFX,GAAG,CAACsB,OAAO,CAAC,CAAC;EACf,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMb,mBAAmB,GAAGA,CAACT,GAAG,EAAEgD,OAAO,EAAE7C,UAAU,KAAK;IACxD,MAAM;MAAER,KAAK;MAAEC;IAAM,CAAC,GAAGoD,OAAO;IAChC,MAAMtC,CAAC,GAAGf,KAAK,GAAGQ,UAAU,GAAGA,UAAU,GAAG,CAAC;IAC7C,MAAMQ,CAAC,GAAGzE,MAAM,GAAG,CAAC;IAEpB8D,GAAG,CAACY,IAAI,CAAC,CAAC;;IAEV;IACA,MAAMqC,QAAQ,GAAGjD,GAAG,CAACkD,oBAAoB,CAACxC,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAED,CAAC,EAAEC,CAAC,EAAE,EAAE,CAAC;IAC5DsC,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAE,wBAAwB,CAAC;IAClDF,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAE,sBAAsB,CAAC;IAEhDnD,GAAG,CAACa,SAAS,GAAGoC,QAAQ;IACxBjD,GAAG,CAACc,SAAS,CAAC,CAAC;IACfd,GAAG,CAACoD,GAAG,CAAC1C,CAAC,EAAEC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE8B,IAAI,CAACY,EAAE,GAAG,CAAC,CAAC;IACjCrD,GAAG,CAACkB,IAAI,CAAC,CAAC;;IAEV;IACAlB,GAAG,CAACmB,IAAI,GAAG,iBAAiB;IAC5BnB,GAAG,CAACoB,SAAS,GAAG,QAAQ;IACxBpB,GAAG,CAACa,SAAS,GAAGtD,MAAM,CAACC,eAAe;IACtCwC,GAAG,CAACqB,QAAQ,CAAC,UAAUzB,KAAK,EAAE,EAAEc,CAAC,EAAExE,MAAM,GAAG,EAAE,CAAC;IAC/C8D,GAAG,CAACmB,IAAI,GAAG,YAAY;IACvBnB,GAAG,CAACa,SAAS,GAAGtD,MAAM,CAACO,aAAa;IACpCkC,GAAG,CAACqB,QAAQ,CAAC,YAAY1B,KAAK,EAAE,EAAEe,CAAC,EAAExE,MAAM,GAAG,EAAE,CAAC;IAEjD8D,GAAG,CAACsB,OAAO,CAAC,CAAC;EACf,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMgC,mBAAmB,GAAGA,CAAA,KAAM;IAChC,QAAQjG,cAAc;MACpB,KAAK,SAAS;QACZ,OAAO,uBAAuB;MAChC,KAAK,iBAAiB;QACpB,OAAO,8BAA8B;MACvC,KAAK,oBAAoB;QACvB,OAAO,oCAAoC;MAC7C,KAAK,oBAAoB;QACvB,OAAO,6CAA6C;MACtD,KAAK,iBAAiB;QACpB,OAAO,yCAAyC;MAClD,KAAK,kBAAkB;QACrB,OAAO,+BAA+B;MACxC,KAAK,sBAAsB;QACzB,OAAO,+BAA+B;MACxC,KAAK,kBAAkB;QACrB,OAAO,+BAA+B;MACxC,KAAK,eAAe;QAClB,OAAO,oBAAoBrB,WAAW,QAAQ;MAChD,KAAK,oBAAoB;QACvB,OAAO,8BAA8B;MACvC;QACE,OAAO,eAAe;IAC1B;EACF,CAAC;;EAED;EACA,oBACEf,KAAA,CAAAsI,aAAA;IAAKC,SAAS,EAAC,sBAAsB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACnC7I,KAAA,CAAAsI,aAAA;IAAKC,SAAS,EAAC,yBAAyB;IAACO,KAAK,EAAE;MAAEC,QAAQ,EAAE,UAAU;MAAE/H,KAAK;MAAEC;IAAO,CAAE;IAAAuH,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAEtF7I,KAAA,CAAAsI,aAAA;IACEU,GAAG,EAAE5H,SAAU;IACfJ,KAAK,EAAEA,KAAM;IACbC,MAAM,EAAEA,MAAO;IACfsH,SAAS,EAAC,sBAAsB;IAChCO,KAAK,EAAE;MAAEC,QAAQ,EAAE,UAAU;MAAEE,GAAG,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAE;IAAAV,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAClD,CAAC,eAGF7I,KAAA,CAAAsI,aAAA;IACEU,GAAG,EAAE3H,UAAW;IAChBL,KAAK,EAAEA,KAAM;IACbC,MAAM,EAAEA,MAAO;IACfsH,SAAS,EAAC,uBAAuB;IACjCO,KAAK,EAAE;MAAEC,QAAQ,EAAE,UAAU;MAAEE,GAAG,EAAE,CAAC;MAAEC,IAAI,EAAE,CAAC;MAAEC,aAAa,EAAE;IAAO,CAAE;IAAAX,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACzE,CAAC,eAGF7I,KAAA,CAAAsI,aAAA;IACEC,SAAS,EAAC,kBAAkB;IAC5BO,KAAK,EAAE;MACLC,QAAQ,EAAE,UAAU;MACpBE,GAAG,EAAE,EAAE;MACPG,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE,UAAU;MACnBC,eAAe,EAAE,oBAAoB;MACrCC,KAAK,EAAE,OAAO;MACdC,YAAY,EAAE,KAAK;MACnBC,QAAQ,EAAE,MAAM;MAChBC,MAAM,EAAE;IACV,CAAE;IAAAlB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAEF7I,KAAA,CAAAsI,aAAA;IAAKQ,KAAK,EAAE;MAAEa,UAAU,EAAE,MAAM;MAAEC,YAAY,EAAE;IAAM,CAAE;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACrD,CAAAhI,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEgJ,IAAI,KAAI,qBACjB,CAAC,eACN7J,KAAA,CAAAsI,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAMR,mBAAmB,CAAC,CAAO,CAAC,EACjCtH,WAAW,KAAK,IAAI,iBACnBf,KAAA,CAAAsI,aAAA;IAAKQ,KAAK,EAAE;MAAEgB,SAAS,EAAE;IAAM,CAAE;IAAAtB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,UACxB,EAAC9H,WAAW,KAAK,CAAC,GAAG,SAAS,GAC9BA,WAAW,KAAKH,IAAI,CAACyC,MAAM,GAAG,CAAC,GAAG,SAAS,GAC3C,GAAGtC,WAAW,GAAC,CAAC,GAAG,CAAC,IAAI,EAAC,IAAI,EAAC,IAAI,CAAC,CAACA,WAAW,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,IAAI,UACtE,CAEJ,CACF,CAAC,eAGNf,KAAA,CAAAsI,aAAA;IAAKC,SAAS,EAAC,kBAAkB;IAACO,KAAK,EAAE;MAAEgB,SAAS,EAAE,MAAM;MAAEL,QAAQ,EAAE;IAAO,CAAE;IAAAjB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC/E7I,KAAA,CAAAsI,aAAA;IAAKQ,KAAK,EAAE;MAAEiB,OAAO,EAAE,MAAM;MAAEC,QAAQ,EAAE,MAAM;MAAEC,GAAG,EAAE;IAAO,CAAE;IAAAzB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC7D7I,KAAA,CAAAsI,aAAA;IAAKQ,KAAK,EAAE;MAAEiB,OAAO,EAAE,MAAM;MAAEG,UAAU,EAAE;IAAS,CAAE;IAAA1B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACpD7I,KAAA,CAAAsI,aAAA;IAAMQ,KAAK,EAAE;MAAEiB,OAAO,EAAE,cAAc;MAAE/I,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE,MAAM;MAAEqI,eAAe,EAAEhH,MAAM,CAACG,cAAc;MAAE0H,WAAW,EAAE,KAAK;MAAEC,MAAM,EAAE;IAAoC,CAAE;IAAA5B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAO,CAAC,eACzL7I,KAAA,CAAAsI,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAM,eAAmB,CACtB,CAAC,eACN7I,KAAA,CAAAsI,aAAA;IAAKQ,KAAK,EAAE;MAAEiB,OAAO,EAAE,MAAM;MAAEG,UAAU,EAAE;IAAS,CAAE;IAAA1B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACpD7I,KAAA,CAAAsI,aAAA;IAAMQ,KAAK,EAAE;MAAEiB,OAAO,EAAE,cAAc;MAAE/I,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE,MAAM;MAAEqI,eAAe,EAAEhH,MAAM,CAACE,cAAc;MAAE2H,WAAW,EAAE;IAAM,CAAE;IAAA3B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAO,CAAC,eAC5I7I,KAAA,CAAAsI,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAM,eAAmB,CACtB,CAAC,eACN7I,KAAA,CAAAsI,aAAA;IAAKQ,KAAK,EAAE;MAAEiB,OAAO,EAAE,MAAM;MAAEG,UAAU,EAAE;IAAS,CAAE;IAAA1B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACpD7I,KAAA,CAAAsI,aAAA;IAAMQ,KAAK,EAAE;MAAEiB,OAAO,EAAE,cAAc;MAAE/I,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE,MAAM;MAAEqI,eAAe,EAAEhH,MAAM,CAACC,eAAe;MAAE4H,WAAW,EAAE;IAAM,CAAE;IAAA3B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAO,CAAC,eAC7I7I,KAAA,CAAAsI,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAM,cAAkB,CACrB,CAAC,eACN7I,KAAA,CAAAsI,aAAA;IAAKQ,KAAK,EAAE;MAAEiB,OAAO,EAAE,MAAM;MAAEG,UAAU,EAAE;IAAS,CAAE;IAAA1B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACpD7I,KAAA,CAAAsI,aAAA;IAAMQ,KAAK,EAAE;MAAEiB,OAAO,EAAE,cAAc;MAAE/I,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE,MAAM;MAAEqI,eAAe,EAAEhH,MAAM,CAACK,WAAW;MAAEwH,WAAW,EAAE;IAAM,CAAE;IAAA3B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAO,CAAC,eACzI7I,KAAA,CAAAsI,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAM,eAAmB,CACtB,CAAC,eACN7I,KAAA,CAAAsI,aAAA;IAAKQ,KAAK,EAAE;MAAEiB,OAAO,EAAE,MAAM;MAAEG,UAAU,EAAE;IAAS,CAAE;IAAA1B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACpD7I,KAAA,CAAAsI,aAAA;IAAMQ,KAAK,EAAE;MAAEiB,OAAO,EAAE,cAAc;MAAE/I,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE,MAAM;MAAEqI,eAAe,EAAEhH,MAAM,CAACI,cAAc;MAAEyH,WAAW,EAAE;IAAM,CAAE;IAAA3B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAO,CAAC,eAC5I7I,KAAA,CAAAsI,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAM,oBAAwB,CAC3B,CACF,CACF,CACF,CAAC;AAEV,CAAC;;AAED;AACAlI,mBAAmB,CAAC0J,SAAS,GAAG;EAC9BzJ,IAAI,EAAEN,SAAS,CAACqD,KAAK;EACrB9C,SAAS,EAAEP,SAAS,CAACgK,MAAM;EAC3BxJ,WAAW,EAAER,SAAS,CAACgK,MAAM;EAC7BvJ,WAAW,EAAET,SAAS,CAACiK,MAAM;EAC7BvJ,KAAK,EAAEV,SAAS,CAACiK,MAAM;EACvBtJ,MAAM,EAAEX,SAAS,CAACiK,MAAM;EACxBrJ,eAAe,EAAEZ,SAAS,CAACgK,MAAM;EACjCnJ,YAAY,EAAEb,SAAS,CAACkK;AAC1B,CAAC;AAED,eAAe7J,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module"}