{"ast":null,"code":"var _jsxFileName = \"/Users/mohammadatashi/Documents/GitHub/Advanced-Algorithms-Laboratory/sorting-visualizer/src/index.js\";\n/**\n * @file index.js\n * @description Application entry point for the Advanced Sorting Algorithm Visualization Platform.\n * \n * This module serves as the initialization point for the React application,\n * establishing the rendering context, setting up performance monitoring,\n * initializing global configuration, and implementing error boundaries.\n * \n * The architectural design follows the principles of:\n * - Separation of concerns\n * - Fail-fast error handling\n * - Progressive enhancement\n * - Performance optimization\n * - Accessibility compliance\n * \n * @author Algorithm Visualization Platform Team\n * @version 2.0.0\n * @license MIT\n */\n\n// Core React dependencies\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\n\n// Application components\nimport App from './App';\n\n// Global styles and configuration\nimport './styles/index.css';\nimport './styles/normalize.css';\n\n// Utility functions\nimport { configureErrorHandling, initializePerformanceMonitoring } from './utils/applicationUtils';\n\n/**\n * Performance metrics collection for application initialization\n * Captures critical rendering metrics following the Web Vitals methodology\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst performanceMetrics = {\n  initializationStart: performance.now(),\n  firstPaintTime: null,\n  interactiveTime: null,\n  /**\n   * Records the timing of a specific initialization phase\n   * @param {string} phase - The name of the initialization phase\n   * @returns {number} - The timing of the phase in milliseconds\n   */\n  recordTiming(phase) {\n    const timing = performance.now() - this.initializationStart;\n    console.debug(`Application initialization phase \"${phase}\": ${timing.toFixed(2)}ms`);\n    return timing;\n  }\n};\n\n/**\n * Environment configuration detection and capability assessment\n * Evaluates browser capabilities and sets appropriate feature flags\n * \n * @returns {Object} Environment configuration object\n */\nfunction detectEnvironmentCapabilities() {\n  // Detect WebGL2 support for advanced rendering\n  const hasWebGL2Support = (() => {\n    try {\n      const canvas = document.createElement('canvas');\n      return Boolean(canvas.getContext('webgl2'));\n    } catch (e) {\n      return false;\n    }\n  })();\n\n  // Detect Web Worker support for background processing\n  const hasWorkerSupport = typeof Worker !== 'undefined';\n\n  // Detect advanced ES features support\n  const hasModernJSSupport = (() => {\n    try {\n      // Test for ES2020+ features\n      eval('const x = { ...{} }; const y = [...[]]; const z = 0 ?? 1;');\n      return true;\n    } catch (e) {\n      return false;\n    }\n  })();\n  return {\n    hasWebGL2Support,\n    hasWorkerSupport,\n    hasModernJSSupport,\n    devicePixelRatio: window.devicePixelRatio || 1,\n    deviceCategory: window.innerWidth <= 768 ? 'mobile' : window.innerWidth <= 1024 ? 'tablet' : 'desktop',\n    prefersDarkMode: window.matchMedia('(prefers-color-scheme: dark)').matches,\n    prefersReducedMotion: window.matchMedia('(prefers-reduced-motion: reduce)').matches\n  };\n}\n\n/**\n * Initializes the application with error boundaries and performance monitoring\n * \n * @param {string} rootElementId - DOM element ID where the application will be mounted\n * @throws {Error} If the root element cannot be found in the document\n */\nfunction initializeApplication(rootElementId = 'root') {\n  performanceMetrics.recordTiming('environmentDetection');\n\n  // Configure global error handling\n  configureErrorHandling({\n    enableDebugLogging: process.env.NODE_ENV !== 'production',\n    reportErrors: process.env.NODE_ENV === 'production'\n  });\n\n  // Initialize performance monitoring\n  initializePerformanceMonitoring();\n\n  // Detect environment capabilities\n  const environmentConfig = detectEnvironmentCapabilities();\n\n  // Find the root element where the React application will be mounted\n  const rootElement = document.getElementById(rootElementId);\n  if (!rootElement) {\n    throw new Error(`Fatal: Could not find element with ID \"${rootElementId}\" to mount the application`);\n  }\n\n  // Create React root using the new React 18 createRoot API\n  const root = createRoot(rootElement);\n\n  // Register performance observer for first contentful paint\n  if ('PerformanceObserver' in window) {\n    const paintObserver = new PerformanceObserver(entryList => {\n      for (const entry of entryList.getEntries()) {\n        if (entry.name === 'first-contentful-paint') {\n          performanceMetrics.firstPaintTime = entry.startTime;\n          console.debug(`First Contentful Paint: ${entry.startTime.toFixed(2)}ms`);\n          paintObserver.disconnect();\n        }\n      }\n    });\n    paintObserver.observe({\n      type: 'paint',\n      buffered: true\n    });\n  }\n\n  // Render the application with environment configuration\n  root.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: /*#__PURE__*/_jsxDEV(React.Profiler, {\n      id: \"Application\",\n      onRender: (id, phase, actualDuration) => {\n        if (phase === 'mount') {\n          performanceMetrics.interactiveTime = performance.now() - performanceMetrics.initializationStart;\n          console.debug(`Application ready for interaction: ${performanceMetrics.interactiveTime.toFixed(2)}ms`);\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(App, {\n        environmentConfig: environmentConfig\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this));\n  performanceMetrics.recordTiming('applicationMount');\n\n  // Register service worker for offline capabilities and caching (in production only)\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      navigator.serviceWorker.register('/service-worker.js').then(registration => {\n        console.debug('ServiceWorker registration successful with scope:', registration.scope);\n      }).catch(error => {\n        console.warn('ServiceWorker registration failed:', error);\n      });\n    });\n  }\n\n  // Report application initialization complete\n  console.debug(`Application initialization complete. Environment: ${JSON.stringify(environmentConfig)}`);\n}\n\n// Execute application initialization\ninitializeApplication();\n\n// Export environment detection for testing and debugging purposes\nexport { detectEnvironmentCapabilities };","map":{"version":3,"names":["React","createRoot","App","configureErrorHandling","initializePerformanceMonitoring","jsxDEV","_jsxDEV","performanceMetrics","initializationStart","performance","now","firstPaintTime","interactiveTime","recordTiming","phase","timing","console","debug","toFixed","detectEnvironmentCapabilities","hasWebGL2Support","canvas","document","createElement","Boolean","getContext","e","hasWorkerSupport","Worker","hasModernJSSupport","eval","devicePixelRatio","window","deviceCategory","innerWidth","prefersDarkMode","matchMedia","matches","prefersReducedMotion","initializeApplication","rootElementId","enableDebugLogging","process","env","NODE_ENV","reportErrors","environmentConfig","rootElement","getElementById","Error","root","paintObserver","PerformanceObserver","entryList","entry","getEntries","name","startTime","disconnect","observe","type","buffered","render","StrictMode","children","Profiler","id","onRender","actualDuration","fileName","_jsxFileName","lineNumber","columnNumber","navigator","addEventListener","serviceWorker","register","then","registration","scope","catch","error","warn","JSON","stringify"],"sources":["/Users/mohammadatashi/Documents/GitHub/Advanced-Algorithms-Laboratory/sorting-visualizer/src/index.js"],"sourcesContent":["/**\n * @file index.js\n * @description Application entry point for the Advanced Sorting Algorithm Visualization Platform.\n * \n * This module serves as the initialization point for the React application,\n * establishing the rendering context, setting up performance monitoring,\n * initializing global configuration, and implementing error boundaries.\n * \n * The architectural design follows the principles of:\n * - Separation of concerns\n * - Fail-fast error handling\n * - Progressive enhancement\n * - Performance optimization\n * - Accessibility compliance\n * \n * @author Algorithm Visualization Platform Team\n * @version 2.0.0\n * @license MIT\n */\n\n// Core React dependencies\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\n\n// Application components\nimport App from './App';\n\n// Global styles and configuration\nimport './styles/index.css';\nimport './styles/normalize.css';\n\n// Utility functions\nimport { configureErrorHandling, initializePerformanceMonitoring } from './utils/applicationUtils';\n\n/**\n * Performance metrics collection for application initialization\n * Captures critical rendering metrics following the Web Vitals methodology\n */\nconst performanceMetrics = {\n  initializationStart: performance.now(),\n  firstPaintTime: null,\n  interactiveTime: null,\n  \n  /**\n   * Records the timing of a specific initialization phase\n   * @param {string} phase - The name of the initialization phase\n   * @returns {number} - The timing of the phase in milliseconds\n   */\n  recordTiming(phase) {\n    const timing = performance.now() - this.initializationStart;\n    console.debug(`Application initialization phase \"${phase}\": ${timing.toFixed(2)}ms`);\n    return timing;\n  }\n};\n\n/**\n * Environment configuration detection and capability assessment\n * Evaluates browser capabilities and sets appropriate feature flags\n * \n * @returns {Object} Environment configuration object\n */\nfunction detectEnvironmentCapabilities() {\n  // Detect WebGL2 support for advanced rendering\n  const hasWebGL2Support = (() => {\n    try {\n      const canvas = document.createElement('canvas');\n      return Boolean(canvas.getContext('webgl2'));\n    } catch (e) {\n      return false;\n    }\n  })();\n  \n  // Detect Web Worker support for background processing\n  const hasWorkerSupport = typeof Worker !== 'undefined';\n  \n  // Detect advanced ES features support\n  const hasModernJSSupport = (() => {\n    try {\n      // Test for ES2020+ features\n      eval('const x = { ...{} }; const y = [...[]]; const z = 0 ?? 1;');\n      return true;\n    } catch (e) {\n      return false;\n    }\n  })();\n  \n  return {\n    hasWebGL2Support,\n    hasWorkerSupport,\n    hasModernJSSupport,\n    devicePixelRatio: window.devicePixelRatio || 1,\n    deviceCategory: window.innerWidth <= 768 ? 'mobile' : window.innerWidth <= 1024 ? 'tablet' : 'desktop',\n    prefersDarkMode: window.matchMedia('(prefers-color-scheme: dark)').matches,\n    prefersReducedMotion: window.matchMedia('(prefers-reduced-motion: reduce)').matches\n  };\n}\n\n/**\n * Initializes the application with error boundaries and performance monitoring\n * \n * @param {string} rootElementId - DOM element ID where the application will be mounted\n * @throws {Error} If the root element cannot be found in the document\n */\nfunction initializeApplication(rootElementId = 'root') {\n  performanceMetrics.recordTiming('environmentDetection');\n  \n  // Configure global error handling\n  configureErrorHandling({\n    enableDebugLogging: process.env.NODE_ENV !== 'production',\n    reportErrors: process.env.NODE_ENV === 'production'\n  });\n  \n  // Initialize performance monitoring\n  initializePerformanceMonitoring();\n  \n  // Detect environment capabilities\n  const environmentConfig = detectEnvironmentCapabilities();\n  \n  // Find the root element where the React application will be mounted\n  const rootElement = document.getElementById(rootElementId);\n  \n  if (!rootElement) {\n    throw new Error(`Fatal: Could not find element with ID \"${rootElementId}\" to mount the application`);\n  }\n  \n  // Create React root using the new React 18 createRoot API\n  const root = createRoot(rootElement);\n  \n  // Register performance observer for first contentful paint\n  if ('PerformanceObserver' in window) {\n    const paintObserver = new PerformanceObserver((entryList) => {\n      for (const entry of entryList.getEntries()) {\n        if (entry.name === 'first-contentful-paint') {\n          performanceMetrics.firstPaintTime = entry.startTime;\n          console.debug(`First Contentful Paint: ${entry.startTime.toFixed(2)}ms`);\n          paintObserver.disconnect();\n        }\n      }\n    });\n    \n    paintObserver.observe({ type: 'paint', buffered: true });\n  }\n  \n  // Render the application with environment configuration\n  root.render(\n    <React.StrictMode>\n      <React.Profiler id=\"Application\" onRender={(id, phase, actualDuration) => {\n        if (phase === 'mount') {\n          performanceMetrics.interactiveTime = performance.now() - performanceMetrics.initializationStart;\n          console.debug(`Application ready for interaction: ${performanceMetrics.interactiveTime.toFixed(2)}ms`);\n        }\n      }}>\n        <App environmentConfig={environmentConfig} />\n      </React.Profiler>\n    </React.StrictMode>\n  );\n  \n  performanceMetrics.recordTiming('applicationMount');\n  \n  // Register service worker for offline capabilities and caching (in production only)\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      navigator.serviceWorker.register('/service-worker.js')\n        .then(registration => {\n          console.debug('ServiceWorker registration successful with scope:', registration.scope);\n        })\n        .catch(error => {\n          console.warn('ServiceWorker registration failed:', error);\n        });\n    });\n  }\n  \n  // Report application initialization complete\n  console.debug(`Application initialization complete. Environment: ${JSON.stringify(environmentConfig)}`);\n}\n\n// Execute application initialization\ninitializeApplication();\n\n// Export environment detection for testing and debugging purposes\nexport { detectEnvironmentCapabilities };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}