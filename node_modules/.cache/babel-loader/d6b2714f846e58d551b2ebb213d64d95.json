{"ast":null,"code":"var _jsxFileName = \"/Users/mohammadatashi/Documents/GitHub/Advanced-Algorithms-Laboratory/sorting-visualizer/src/visualization/components/HeapVisualizer.js\";\n// Implementation of HeapVisualizer (PascalCase filename)\nimport React, { useRef, useEffect } from 'react';\n\n/**\n * HeapVisualizer Component\n * \n * Visualizes binary heap structure during heap-based algorithms.\n */\nconst HeapVisualizer = ({\n  heapStructure,\n  width = 600,\n  height = 400,\n  nodeRadius = 25\n}) => {\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (!heapStructure || !canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Implement visualization rendering\n    // (Implementation details omitted for brevity)\n  }, [heapStructure, width, height, nodeRadius]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"heap-visualizer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: height,\n    className: \"heap-canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }));\n};\nexport default HeapVisualizer;","map":{"version":3,"names":["React","useRef","useEffect","HeapVisualizer","heapStructure","width","height","nodeRadius","canvasRef","current","canvas","ctx","getContext","clearRect","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["/Users/mohammadatashi/Documents/GitHub/Advanced-Algorithms-Laboratory/sorting-visualizer/src/visualization/components/HeapVisualizer.js"],"sourcesContent":["// Implementation of HeapVisualizer (PascalCase filename)\nimport React, { useRef, useEffect } from 'react';\n\n/**\n * HeapVisualizer Component\n * \n * Visualizes binary heap structure during heap-based algorithms.\n */\nconst HeapVisualizer = ({ heapStructure, width = 600, height = 400, nodeRadius = 25 }) => {\n  const canvasRef = useRef(null);\n  \n  useEffect(() => {\n    if (!heapStructure || !canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n    \n    // Implement visualization rendering\n    // (Implementation details omitted for brevity)\n  }, [heapStructure, width, height, nodeRadius]);\n  \n  return (\n    <div className=\"heap-visualizer\">\n      <canvas\n        ref={canvasRef}\n        width={width}\n        height={height}\n        className=\"heap-canvas\"\n      />\n    </div>\n  );\n};\n\nexport default HeapVisualizer;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;;AAEhD;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,aAAa;EAAEC,KAAK,GAAG,GAAG;EAAEC,MAAM,GAAG,GAAG;EAAEC,UAAU,GAAG;AAAG,CAAC,KAAK;EACxF,MAAMC,SAAS,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE9BC,SAAS,CAAC,MAAM;IACd,IAAI,CAACE,aAAa,IAAI,CAACI,SAAS,CAACC,OAAO,EAAE;IAE1C,MAAMC,MAAM,GAAGF,SAAS,CAACC,OAAO;IAChC,MAAME,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;;IAEnC;IACAD,GAAG,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAER,KAAK,EAAEC,MAAM,CAAC;;IAElC;IACA;EACF,CAAC,EAAE,CAACF,aAAa,EAAEC,KAAK,EAAEC,MAAM,EAAEC,UAAU,CAAC,CAAC;EAE9C,oBACEP,KAAA,CAAAc,aAAA;IAAKC,SAAS,EAAC,iBAAiB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC9BrB,KAAA,CAAAc,aAAA;IACEQ,GAAG,EAAEd,SAAU;IACfH,KAAK,EAAEA,KAAM;IACbC,MAAM,EAAEA,MAAO;IACfS,SAAS,EAAC,aAAa;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACxB,CACE,CAAC;AAEV,CAAC;AAED,eAAelB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}