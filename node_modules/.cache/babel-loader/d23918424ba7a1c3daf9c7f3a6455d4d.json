{"ast":null,"code":"var _jsxFileName = \"/Users/mohammadatashi/Documents/GitHub/Advanced-Algorithms-Laboratory/sorting-visualizer/src/components/SortingVisualizer.js\";\n// src/components/SortingVisualizer.js\n\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { WebGLRenderer } from '../visualization/renderers/webgl-renderer';\nimport { ArrayRenderer } from '../visualization/renderers/array-renderer';\nimport { generateDataSet } from '../data/generators';\nimport HeapVisualizer from '../visualization/components/heap-visualizer';\nimport DistributionVisualizer from '../visualization/components/distribution-visualizer';\nimport TransformVisualizer from '../visualization/components/transform-visualizer';\nimport SelectionVisualizer from '../visualization/components/selection-visualizer';\nimport MetricsDisplay from './metrics-display';\nimport EducationalPanel from './educational-panel';\nimport '../styles/sorting-visualizer.css';\n\n/**\n * @class SortingVisualizer\n * @description Advanced component for visualizing and interacting with sorting algorithms\n * \n * This component serves as the primary interface for algorithm visualization, providing:\n * 1. High-performance rendering of algorithm operations\n * 2. Interactive playback controls with variable speed and step navigation\n * 3. Configurable data generation and visualization parameters\n * 4. Real-time metrics display and algorithm information\n * 5. Integration with specialized visualizers for different algorithm families\n * 6. Educational content relevant to the current algorithm\n * \n * The architecture follows a modular design with clear separation between:\n * - Rendering (WebGL/Canvas based visualization)\n * - State management (algorithm execution and history)\n * - User interaction (controls and configuration)\n * - Educational content (algorithm explanations and insights)\n * \n * Performance characteristics:\n * - Time Complexity: O(n) for visualization operations where n is the data size\n * - Space Complexity: O(n*s) where s is the number of recorded steps\n * - Rendering Performance: 60fps target with up to 100,000 elements on supported hardware\n */\nconst SortingVisualizer = ({\n  algorithm,\n  options = {},\n  width = 800,\n  height = 400,\n  showEducationalContent = true,\n  onMetricsUpdate = null\n}) => {\n  // =========================================================================\n  // STATE MANAGEMENT\n  // =========================================================================\n\n  // Canvas and visualization references\n  const primaryCanvasRef = useRef(null);\n  const fallbackCanvasRef = useRef(null);\n  const rendererRef = useRef(null);\n  const animationRef = useRef(null);\n  const stepHistoryRef = useRef([]);\n\n  // Visualization configuration state\n  const [renderMode, setRenderMode] = useState(() => WebGLRenderer.isSupported() ? 'webgl' : 'canvas');\n  const [selectedDataSet, setSelectedDataSet] = useState('random');\n  const [dataSize, setDataSize] = useState(50);\n  const [data, setData] = useState([]);\n  const [visualizerType, setVisualizerType] = useState('standard');\n\n  // Algorithm execution state\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [totalSteps, setTotalSteps] = useState(0);\n  const [playbackSpeed, setPlaybackSpeed] = useState(1);\n  const [metrics, setMetrics] = useState({});\n  const [currentStepData, setCurrentStepData] = useState(null);\n\n  // Specialized visualization state\n  const [heapStructure, setHeapStructure] = useState(null);\n  const [distributionData, setDistributionData] = useState(null);\n  const [transformationData, setTransformationData] = useState(null);\n  const [selectionData, setSelectionData] = useState(null);\n\n  // Educational content state\n  const [showExplanations, setShowExplanations] = useState(showEducationalContent);\n\n  // =========================================================================\n  // DERIVED STATE AND CONSTANTS\n  // =========================================================================\n\n  /**\n   * Determine the appropriate specialized visualizer based on algorithm type\n   */\n  const determineVisualizerType = useCallback(() => {\n    var _algorithm$options;\n    if (!algorithm) return 'standard';\n\n    // Analyze algorithm characteristics to determine visualizer type\n    const {\n      name,\n      category\n    } = algorithm;\n    if (name === 'Heap Sort' && ((_algorithm$options = algorithm.options) === null || _algorithm$options === void 0 ? void 0 : _algorithm$options.visualizeHeap)) {\n      return 'heap';\n    } else if (category === 'distribution') {\n      return 'distribution';\n    } else if (category === 'selection') {\n      return 'selection';\n    } else if (['Pancake Sort', 'Bogo Sort'].includes(name)) {\n      return 'transformation';\n    }\n    return 'standard';\n  }, [algorithm]);\n\n  /**\n   * Available data set types with descriptions\n   */\n  const DATA_SETS = useMemo(() => [{\n    value: 'random',\n    label: 'Random',\n    description: 'Randomly distributed values'\n  }, {\n    value: 'nearly-sorted',\n    label: 'Nearly Sorted',\n    description: 'Values that are mostly in order'\n  }, {\n    value: 'reversed',\n    label: 'Reversed',\n    description: 'Values in reverse order'\n  }, {\n    value: 'few-unique',\n    label: 'Few Unique Values',\n    description: 'Many duplicate values'\n  }, {\n    value: 'sorted',\n    label: 'Already Sorted',\n    description: 'Values in perfect order'\n  }, {\n    value: 'sawtooth',\n    label: 'Sawtooth Pattern',\n    description: 'Repeating ascending sequences'\n  }], []);\n\n  /**\n   * Available data sizes with descriptions\n   */\n  const DATA_SIZES = useMemo(() => [{\n    value: 10,\n    label: 'Tiny (10)',\n    description: 'For algorithm step examination'\n  }, {\n    value: 30,\n    label: 'Small (30)',\n    description: 'For detailed algorithm visualization'\n  }, {\n    value: 50,\n    label: 'Medium (50)',\n    description: 'For general algorithm behavior'\n  }, {\n    value: 100,\n    label: 'Large (100)',\n    description: 'For performance patterns'\n  }, {\n    value: 250,\n    label: 'X-Large (250)',\n    description: 'For advanced visualization'\n  }, {\n    value: 1000,\n    label: 'Huge (1,000)',\n    description: 'For performance testing'\n  }, {\n    value: 10000,\n    label: 'Extreme (10,000)',\n    description: 'For stress testing'\n  }], []);\n\n  // =========================================================================\n  // LIFECYCLE & SIDE EFFECTS\n  // =========================================================================\n\n  /**\n   * Initialize data and renderer on component mount\n   */\n  useEffect(() => {\n    // Initialize data\n    generateInitialData();\n\n    // Initialize renderer\n    initializeRenderer();\n\n    // Set up window resize handler\n    const handleResize = () => {\n      if (rendererRef.current) {\n        rendererRef.current.resize();\n      }\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup function\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n      }\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []);\n\n  /**\n   * Update renderer when options or render mode changes\n   */\n  useEffect(() => {\n    if (rendererRef.current) {\n      rendererRef.current.setOptions({\n        colorScheme: options.colorScheme || 'spectrum',\n        barWidth: options.barWidth || 4,\n        spacing: options.spacing || 1,\n        effectMode: options.effectMode || 0,\n        ...options\n      });\n    }\n  }, [options, renderMode]);\n\n  /**\n   * Execute algorithm when algorithm or data changes\n   */\n  useEffect(() => {\n    if (algorithm && data.length > 0) {\n      executeAlgorithm();\n    }\n  }, [algorithm, data.length, selectedDataSet, dataSize]);\n\n  /**\n   * Update visualizer type when algorithm changes\n   */\n  useEffect(() => {\n    setVisualizerType(determineVisualizerType());\n  }, [algorithm, determineVisualizerType]);\n\n  /**\n   * Update specialized visualization data when step changes\n   */\n  useEffect(() => {\n    if (!currentStepData) return;\n\n    // Update heap structure for heap visualizer\n    if (currentStepData.heapStructure || currentStepData.heap_structure) {\n      setHeapStructure(currentStepData.heapStructure || currentStepData.heap_structure);\n    }\n\n    // Update distribution data for distribution visualizer\n    if (currentStepData.distributionData || currentStepData.distribution_data) {\n      setDistributionData(currentStepData.distributionData || currentStepData.distribution_data);\n    }\n\n    // Update transformation data for transformation visualizer\n    if (currentStepData.transformationData || currentStepData.transformation_data) {\n      setTransformationData(currentStepData.transformationData || currentStepData.transformation_data);\n    }\n\n    // Update selection data for selection visualizer\n    if (currentStepData.selectionData || currentStepData.selection_data) {\n      setSelectionData(currentStepData.selectionData || currentStepData.selection_data);\n    }\n  }, [currentStepData]);\n\n  /**\n   * Forward metrics updates to parent component if callback provided\n   */\n  useEffect(() => {\n    if (onMetricsUpdate && Object.keys(metrics).length > 0) {\n      onMetricsUpdate(metrics);\n    }\n  }, [metrics, onMetricsUpdate]);\n\n  // =========================================================================\n  // CORE FUNCTIONALITY\n  // =========================================================================\n\n  /**\n   * Initialize the appropriate renderer based on capability and mode selection\n   * @returns {void}\n   */\n  const initializeRenderer = () => {\n    const primaryCanvas = primaryCanvasRef.current;\n    const fallbackCanvas = fallbackCanvasRef.current;\n    if (!primaryCanvas || !fallbackCanvas) return;\n    try {\n      let renderer;\n      if (renderMode === 'webgl') {\n        try {\n          renderer = new WebGLRenderer(primaryCanvas, {\n            maxElements: 100000,\n            colorScheme: options.colorScheme || 'spectrum',\n            barWidth: options.barWidth || 4,\n            spacing: options.spacing || 1,\n            effectMode: options.effectMode || 0,\n            ...options\n          });\n\n          // Configure canvas visibility\n          primaryCanvas.style.display = 'block';\n          fallbackCanvas.style.display = 'none';\n        } catch (e) {\n          console.warn('WebGL renderer initialization failed, falling back to Canvas renderer', e);\n          setRenderMode('canvas');\n          throw e; // Force fallback\n        }\n      }\n      if (renderMode === 'canvas') {\n        renderer = new ArrayRenderer(fallbackCanvas, {\n          maxElements: 10000,\n          colorScheme: options.colorScheme || 'spectrum',\n          barWidth: options.barWidth || 4,\n          spacing: options.spacing || 1,\n          ...options\n        });\n\n        // Configure canvas visibility\n        primaryCanvas.style.display = 'none';\n        fallbackCanvas.style.display = 'block';\n      }\n      rendererRef.current = renderer;\n\n      // Initialize renderer with data if available\n      if (data.length > 0) {\n        renderer.setData(data);\n      }\n    } catch (e) {\n      console.error('Failed to initialize renderer', e);\n    }\n  };\n\n  /**\n   * Generate initial data based on selected parameters\n   * @returns {void}\n   */\n  const generateInitialData = () => {\n    // Generate data using the data generator utility\n    const newData = generateDataSet(selectedDataSet, dataSize, {\n      min: 1,\n      max: 100,\n      ...options\n    });\n    setData(newData);\n\n    // Update renderer with new data if available\n    if (rendererRef.current) {\n      rendererRef.current.setData(newData);\n    }\n  };\n\n  /**\n   * Execute the current algorithm on the data\n   * @returns {Promise<void>}\n   */\n  const executeAlgorithm = async () => {\n    if (!algorithm || data.length === 0) return;\n\n    // Reset visualization state\n    setIsPlaying(false);\n    setCurrentStep(0);\n    stepHistoryRef.current = [];\n    setHeapStructure(null);\n    setDistributionData(null);\n    setTransformationData(null);\n    setSelectionData(null);\n\n    // Clone the data to avoid mutation issues\n    const dataToSort = [...data];\n    try {\n      // Execute algorithm with instrumentation\n      const startTime = performance.now();\n      const result = await algorithm.execute(dataToSort, {\n        onStep: step => {\n          stepHistoryRef.current.push(step);\n        }\n      });\n      const endTime = performance.now();\n\n      // Update metrics with results\n      const updatedMetrics = {\n        ...algorithm.getMetrics(),\n        executionTime: endTime - startTime,\n        dataSize: data.length,\n        dataType: selectedDataSet,\n        finishedAt: new Date().toISOString()\n      };\n      setMetrics(updatedMetrics);\n      setTotalSteps(stepHistoryRef.current.length);\n\n      // Update renderer with sorted data\n      if (rendererRef.current) {\n        rendererRef.current.setData(result);\n      }\n    } catch (error) {\n      console.error('Algorithm execution failed', error);\n    }\n  };\n\n  /**\n   * Navigate to a specific step in the algorithm execution\n   * @param {number} step - Step index to navigate to\n   * @returns {void}\n   */\n  const navigateStep = step => {\n    if (step < 0 || step >= stepHistoryRef.current.length) return;\n    setCurrentStep(step);\n    const stepData = stepHistoryRef.current[step];\n    setCurrentStepData(stepData);\n    if (rendererRef.current && stepData) {\n      // Update renderer with current step data\n      rendererRef.current.setData(stepData.array, false);\n\n      // Highlight relevant elements based on step type\n      if (stepData.type === 'comparison' && stepData.indices) {\n        rendererRef.current.markComparing(stepData.indices);\n      } else if (stepData.type === 'swap' && stepData.indices) {\n        rendererRef.current.highlight(stepData.indices);\n      } else if (stepData.type === 'sorted' && stepData.indices) {\n        rendererRef.current.markSorted(stepData.indices);\n      } else if (stepData.type === 'read' && stepData.index !== undefined) {\n        rendererRef.current.markRead([stepData.index]);\n      } else if (stepData.type === 'write' && stepData.index !== undefined) {\n        rendererRef.current.markWrite([stepData.index]);\n      } else if (stepData.type === 'heapify' && stepData.node !== undefined) {\n        // For heap sort, highlight the current node being heapified\n        rendererRef.current.highlight([stepData.node]);\n\n        // Also highlight children if available\n        if (stepData.children && stepData.children.length) {\n          rendererRef.current.markComparing(stepData.children);\n        }\n      } else if (stepData.type === 'heapify-swap' && stepData.indices) {\n        rendererRef.current.highlight(stepData.indices);\n      } else if (stepData.type === 'partition' && stepData.pivot_idx !== undefined) {\n        rendererRef.current.highlight([stepData.pivot_idx]);\n      } else if (stepData.type === 'bucket' && stepData.bucket_indices) {\n        rendererRef.current.highlight(stepData.bucket_indices);\n      }\n    }\n  };\n\n  /**\n   * Start or stop animation playback\n   * @returns {void}\n   */\n  const togglePlayback = () => {\n    const newPlayingState = !isPlaying;\n    setIsPlaying(newPlayingState);\n    if (newPlayingState) {\n      // Start animation\n      const lastTimestamp = performance.now();\n      const animate = timestamp => {\n        if (!isPlaying) return;\n\n        // Control animation speed\n        const elapsed = timestamp - lastTimestamp;\n        if (elapsed > 1000 / (playbackSpeed * 10)) {\n          // Time to advance step\n          const nextStep = (currentStep + 1) % (totalSteps || 1);\n          if (nextStep === 0 || nextStep >= totalSteps - 1) {\n            // Reached the end, stop playback\n            setIsPlaying(false);\n            return;\n          }\n          navigateStep(nextStep);\n        }\n        animationRef.current = requestAnimationFrame(animate);\n      };\n      animationRef.current = requestAnimationFrame(animate);\n    } else {\n      // Stop animation\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    }\n  };\n\n  /**\n   * Calculate descriptive statistics for the current step\n   * Returns information about comparisons, swaps, etc. at the current step\n   * @returns {Object} Statistics object\n   */\n  const calculateStepStatistics = () => {\n    if (!currentStepData || !currentStepData.metrics) return {};\n\n    // Get metrics from the current step\n    const stepMetrics = currentStepData.metrics;\n\n    // Calculate statistics\n    return {\n      comparisonsPerElement: stepMetrics.comparisons / data.length,\n      swapsPerElement: stepMetrics.swaps / data.length,\n      readsPerElement: stepMetrics.reads / data.length,\n      writesPerElement: stepMetrics.writes / data.length,\n      progress: currentStep / totalSteps,\n      phase: currentStepData.type || 'unknown'\n    };\n  };\n\n  // =========================================================================\n  // EVENT HANDLERS\n  // =========================================================================\n\n  /**\n   * Handle data set type change\n   * @param {React.ChangeEvent<HTMLSelectElement>} event - Change event\n   * @returns {void}\n   */\n  const handleDataSetChange = event => {\n    setSelectedDataSet(event.target.value);\n  };\n\n  /**\n   * Handle data size change\n   * @param {React.ChangeEvent<HTMLSelectElement>} event - Change event\n   * @returns {void}\n   */\n  const handleSizeChange = event => {\n    setDataSize(parseInt(event.target.value, 10));\n  };\n\n  /**\n   * Regenerate data with current settings\n   * @returns {void}\n   */\n  const handleRegenerateData = () => {\n    generateInitialData();\n  };\n\n  /**\n   * Handle renderer mode change\n   * @param {React.ChangeEvent<HTMLSelectElement>} event - Change event\n   * @returns {void}\n   */\n  const handleRenderModeChange = event => {\n    setRenderMode(event.target.value);\n\n    // Initialize a new renderer after state update\n    setTimeout(() => {\n      initializeRenderer();\n    }, 0);\n  };\n\n  /**\n   * Handle playback speed change\n   * @param {React.ChangeEvent<HTMLInputElement>} event - Change event\n   * @returns {void}\n   */\n  const handleSpeedChange = event => {\n    setPlaybackSpeed(parseFloat(event.target.value));\n  };\n\n  /**\n   * Handle keyboard shortcuts for playback control\n   * @param {React.KeyboardEvent} event - Keyboard event\n   * @returns {void}\n   */\n  const handleKeyDown = event => {\n    // Only handle events when the component is focused\n    if (event.target !== document.body) return;\n    switch (event.key) {\n      case ' ':\n        // Space bar toggles playback\n        event.preventDefault();\n        togglePlayback();\n        break;\n      case 'ArrowRight':\n        // Right arrow advances to next step\n        event.preventDefault();\n        navigateStep(currentStep + 1);\n        break;\n      case 'ArrowLeft':\n        // Left arrow goes to previous step\n        event.preventDefault();\n        navigateStep(currentStep - 1);\n        break;\n      case 'Home':\n        // Home key goes to first step\n        event.preventDefault();\n        navigateStep(0);\n        break;\n      case 'End':\n        // End key goes to last step\n        event.preventDefault();\n        navigateStep(totalSteps - 1);\n        break;\n      default:\n        // No action for other keys\n        break;\n    }\n  };\n\n  /**\n   * Toggle educational content visibility\n   * @returns {void}\n   */\n  const toggleExplanations = () => {\n    setShowExplanations(!showExplanations);\n  };\n\n  // =========================================================================\n  // RENDERING HELPERS\n  // =========================================================================\n\n  /**\n   * Render the appropriate specialized visualizer based on algorithm type\n   * @returns {JSX.Element} Specialized visualizer component\n   */\n  const renderSpecializedVisualizer = () => {\n    switch (visualizerType) {\n      case 'heap':\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"specialized-visualizer heap-view-container\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 13\n          }\n        }, \"Binary Heap Structure\"), /*#__PURE__*/React.createElement(HeapVisualizer, {\n          heapStructure: heapStructure,\n          width: width,\n          height: 300,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 13\n          }\n        }));\n      case 'distribution':\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"specialized-visualizer distribution-view-container\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 13\n          }\n        }, \"Distribution Visualization\"), /*#__PURE__*/React.createElement(DistributionVisualizer, {\n          distributionData: distributionData,\n          width: width,\n          height: 300,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 13\n          }\n        }));\n      case 'transformation':\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"specialized-visualizer transformation-view-container\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 13\n          }\n        }, \"Transformation Visualization\"), /*#__PURE__*/React.createElement(TransformVisualizer, {\n          transformationData: transformationData,\n          width: width,\n          height: 300,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 13\n          }\n        }));\n      case 'selection':\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"specialized-visualizer selection-view-container\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 13\n          }\n        }, \"Selection Algorithm Visualization\"), /*#__PURE__*/React.createElement(SelectionVisualizer, {\n          selectionData: selectionData,\n          width: width,\n          height: 300,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 13\n          }\n        }));\n      default:\n        return null;\n    }\n  };\n\n  /**\n   * Render the step information panel\n   * @returns {JSX.Element} Step information panel\n   */\n  const renderStepInfo = () => {\n    if (!currentStepData) return null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"step-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 9\n      }\n    }, \"Current Operation\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"step-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 9\n      }\n    }, currentStepData.message || 'No description for this step'), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"step-details\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 11\n      }\n    }, \"Type: \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"operation-type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 22\n      }\n    }, currentStepData.type || 'unknown')), currentStepData.indices && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 13\n      }\n    }, \"Indices: \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"indices\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 27\n      }\n    }, currentStepData.indices.join(', '))), currentStepData.index !== undefined && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 13\n      }\n    }, \"Index: \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"index\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 25\n      }\n    }, currentStepData.index)), currentStepData.value !== undefined && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 13\n      }\n    }, \"Value: \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 25\n      }\n    }, currentStepData.value))));\n  };\n\n  // =========================================================================\n  // RENDER METHOD\n  // =========================================================================\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sorting-visualizer\",\n    onKeyDown: handleKeyDown,\n    tabIndex: \"0\",\n    \"aria-label\": \"Sorting Algorithm Visualization\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 681,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"visualization-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: primaryCanvasRef,\n    width: width,\n    height: height,\n    className: \"visualization-canvas\",\n    \"aria-label\": \"Algorithm visualization area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: fallbackCanvasRef,\n    width: width,\n    height: height,\n    className: \"visualization-canvas fallback\",\n    \"aria-label\": \"Fallback visualization area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 9\n    }\n  }), algorithm && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"algorithm-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 705,\n      columnNumber: 13\n    }\n  }, algorithm.name), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"complexity-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 706,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 15\n    }\n  }, \"Time: \", algorithm.getComplexity().time.average), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 708,\n      columnNumber: 15\n    }\n  }, \"Space: \", algorithm.getComplexity().space.average), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 709,\n      columnNumber: 15\n    }\n  }, \"Stable: \", algorithm.isStable() ? 'Yes' : 'No'))), renderSpecializedVisualizer()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"controls-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 718,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"playback-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 719,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => navigateStep(0),\n    disabled: currentStep === 0 || isPlaying,\n    \"aria-label\": \"Go to first step\",\n    title: \"First step\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 720,\n      columnNumber: 11\n    }\n  }, \"\\u23EE\\uFE0F First\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => navigateStep(currentStep - 1),\n    disabled: currentStep === 0 || isPlaying,\n    \"aria-label\": \"Go to previous step\",\n    title: \"Previous step\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 728,\n      columnNumber: 11\n    }\n  }, \"\\u23EA Prev\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: togglePlayback,\n    \"aria-label\": isPlaying ? \"Pause animation\" : \"Play animation\",\n    title: isPlaying ? \"Pause\" : \"Play\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 736,\n      columnNumber: 11\n    }\n  }, isPlaying ? '⏸️ Pause' : '▶️ Play'), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => navigateStep(currentStep + 1),\n    disabled: currentStep >= totalSteps - 1 || isPlaying,\n    \"aria-label\": \"Go to next step\",\n    title: \"Next step\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 743,\n      columnNumber: 11\n    }\n  }, \"\\u23E9 Next\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => navigateStep(totalSteps - 1),\n    disabled: currentStep >= totalSteps - 1 || isPlaying,\n    \"aria-label\": \"Go to last step\",\n    title: \"Last step\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 751,\n      columnNumber: 11\n    }\n  }, \"\\u23ED\\uFE0F Last\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"speed-control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 761,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"playback-speed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 762,\n      columnNumber: 11\n    }\n  }, \"Speed: \"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"playback-speed\",\n    type: \"range\",\n    min: \"0.1\",\n    max: \"10\",\n    step: \"0.1\",\n    value: playbackSpeed,\n    onChange: handleSpeedChange,\n    disabled: isPlaying,\n    \"aria-label\": \"Playback speed\",\n    title: `Playback speed: ${playbackSpeed.toFixed(1)}x`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 775,\n      columnNumber: 11\n    }\n  }, playbackSpeed.toFixed(1), \"x\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-indicator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 778,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"step-counter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 779,\n      columnNumber: 11\n    }\n  }, \"Step: \", currentStep, \" / \", totalSteps), /*#__PURE__*/React.createElement(\"progress\", {\n    value: currentStep,\n    max: totalSteps || 100,\n    \"aria-label\": `Step ${currentStep} of ${totalSteps}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 782,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"data-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 789,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 790,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"data-type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 791,\n      columnNumber: 13\n    }\n  }, \"Data Type:\"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"data-type\",\n    value: selectedDataSet,\n    onChange: handleDataSetChange,\n    disabled: isPlaying,\n    \"aria-label\": \"Select data distribution type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 792,\n      columnNumber: 13\n    }\n  }, DATA_SETS.map(set => /*#__PURE__*/React.createElement(\"option\", {\n    key: set.value,\n    value: set.value,\n    title: set.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 800,\n      columnNumber: 17\n    }\n  }, set.label)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 811,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"data-size\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 812,\n      columnNumber: 13\n    }\n  }, \"Size:\"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"data-size\",\n    value: dataSize,\n    onChange: handleSizeChange,\n    disabled: isPlaying,\n    \"aria-label\": \"Select data size\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 813,\n      columnNumber: 13\n    }\n  }, DATA_SIZES.map(size => /*#__PURE__*/React.createElement(\"option\", {\n    key: size.value,\n    value: size.value,\n    title: size.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 821,\n      columnNumber: 17\n    }\n  }, size.label)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 832,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"render-mode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 833,\n      columnNumber: 13\n    }\n  }, \"Renderer:\"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"render-mode\",\n    value: renderMode,\n    onChange: handleRenderModeChange,\n    disabled: isPlaying,\n    \"aria-label\": \"Select rendering mode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 834,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"webgl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 841,\n      columnNumber: 15\n    }\n  }, \"WebGL (Fast)\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 842,\n      columnNumber: 15\n    }\n  }, \"Canvas (Compatible)\"))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleRegenerateData,\n    disabled: isPlaying,\n    \"aria-label\": \"Generate new data with current settings\",\n    title: \"Generate new data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 846,\n      columnNumber: 11\n    }\n  }, \"Regenerate Data\")), metrics && Object.keys(metrics).length > 0 && /*#__PURE__*/React.createElement(MetricsDisplay, {\n    metrics: metrics,\n    algorithm: algorithm,\n    dataSize: dataSize,\n    stepStatistics: calculateStepStatistics(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 858,\n      columnNumber: 11\n    }\n  }), renderStepInfo(), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"educational-toggle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 870,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggleExplanations,\n    className: `toggle-button ${showExplanations ? 'active' : ''}`,\n    \"aria-label\": showExplanations ? \"Hide educational content\" : \"Show educational content\",\n    \"aria-pressed\": showExplanations,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 871,\n      columnNumber: 11\n    }\n  }, showExplanations ? 'Hide Explanations' : 'Show Explanations'))), showExplanations && algorithm && /*#__PURE__*/React.createElement(EducationalPanel, {\n    algorithm: algorithm,\n    currentStep: currentStepData,\n    stepStatistics: calculateStepStatistics(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 884,\n      columnNumber: 9\n    }\n  }));\n};\n\n// =========================================================================\n// PROP TYPES\n// =========================================================================\n\nSortingVisualizer.propTypes = {\n  /**\n   * Algorithm instance to visualize\n   */\n  algorithm: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    category: PropTypes.string.isRequired,\n    execute: PropTypes.func.isRequired,\n    getComplexity: PropTypes.func.isRequired,\n    isStable: PropTypes.func.isRequired,\n    getMetrics: PropTypes.func.isRequired,\n    options: PropTypes.object\n  }),\n  /**\n   * Visualization options\n   */\n  options: PropTypes.shape({\n    colorScheme: PropTypes.string,\n    barWidth: PropTypes.number,\n    spacing: PropTypes.number,\n    effectMode: PropTypes.number\n  }),\n  /**\n   * Canvas width in pixels\n   */\n  width: PropTypes.number,\n  /**\n   * Canvas height in pixels\n   */\n  height: PropTypes.number,\n  /**\n   * Whether to show educational content by default\n   */\n  showEducationalContent: PropTypes.bool,\n  /**\n   * Callback function for metrics updates\n   */\n  onMetricsUpdate: PropTypes.func\n};\nexport default SortingVisualizer;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","PropTypes","WebGLRenderer","ArrayRenderer","generateDataSet","HeapVisualizer","DistributionVisualizer","TransformVisualizer","SelectionVisualizer","MetricsDisplay","EducationalPanel","SortingVisualizer","algorithm","options","width","height","showEducationalContent","onMetricsUpdate","primaryCanvasRef","fallbackCanvasRef","rendererRef","animationRef","stepHistoryRef","renderMode","setRenderMode","isSupported","selectedDataSet","setSelectedDataSet","dataSize","setDataSize","data","setData","visualizerType","setVisualizerType","isPlaying","setIsPlaying","currentStep","setCurrentStep","totalSteps","setTotalSteps","playbackSpeed","setPlaybackSpeed","metrics","setMetrics","currentStepData","setCurrentStepData","heapStructure","setHeapStructure","distributionData","setDistributionData","transformationData","setTransformationData","selectionData","setSelectionData","showExplanations","setShowExplanations","determineVisualizerType","_algorithm$options","name","category","visualizeHeap","includes","DATA_SETS","value","label","description","DATA_SIZES","generateInitialData","initializeRenderer","handleResize","current","resize","window","addEventListener","removeEventListener","dispose","cancelAnimationFrame","setOptions","colorScheme","barWidth","spacing","effectMode","length","executeAlgorithm","heap_structure","distribution_data","transformation_data","selection_data","Object","keys","primaryCanvas","fallbackCanvas","renderer","maxElements","style","display","e","console","warn","error","newData","min","max","dataToSort","startTime","performance","now","result","execute","onStep","step","push","endTime","updatedMetrics","getMetrics","executionTime","dataType","finishedAt","Date","toISOString","navigateStep","stepData","array","type","indices","markComparing","highlight","markSorted","index","undefined","markRead","markWrite","node","children","pivot_idx","bucket_indices","togglePlayback","newPlayingState","lastTimestamp","animate","timestamp","elapsed","nextStep","requestAnimationFrame","calculateStepStatistics","stepMetrics","comparisonsPerElement","comparisons","swapsPerElement","swaps","readsPerElement","reads","writesPerElement","writes","progress","phase","handleDataSetChange","event","target","handleSizeChange","parseInt","handleRegenerateData","handleRenderModeChange","setTimeout","handleSpeedChange","parseFloat","handleKeyDown","document","body","key","preventDefault","toggleExplanations","renderSpecializedVisualizer","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","renderStepInfo","message","join","onKeyDown","tabIndex","ref","getComplexity","time","average","space","isStable","onClick","disabled","title","htmlFor","id","onChange","toFixed","map","set","size","stepStatistics","propTypes","shape","string","isRequired","func","object","number","bool"],"sources":["/Users/mohammadatashi/Documents/GitHub/Advanced-Algorithms-Laboratory/sorting-visualizer/src/components/SortingVisualizer.js"],"sourcesContent":["// src/components/SortingVisualizer.js\n\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { WebGLRenderer } from '../visualization/renderers/webgl-renderer';\nimport { ArrayRenderer } from '../visualization/renderers/array-renderer';\nimport { generateDataSet } from '../data/generators';\nimport HeapVisualizer from '../visualization/components/heap-visualizer';\nimport DistributionVisualizer from '../visualization/components/distribution-visualizer';\nimport TransformVisualizer from '../visualization/components/transform-visualizer';\nimport SelectionVisualizer from '../visualization/components/selection-visualizer';\nimport MetricsDisplay from './metrics-display';\nimport EducationalPanel from './educational-panel';\nimport '../styles/sorting-visualizer.css';\n\n/**\n * @class SortingVisualizer\n * @description Advanced component for visualizing and interacting with sorting algorithms\n * \n * This component serves as the primary interface for algorithm visualization, providing:\n * 1. High-performance rendering of algorithm operations\n * 2. Interactive playback controls with variable speed and step navigation\n * 3. Configurable data generation and visualization parameters\n * 4. Real-time metrics display and algorithm information\n * 5. Integration with specialized visualizers for different algorithm families\n * 6. Educational content relevant to the current algorithm\n * \n * The architecture follows a modular design with clear separation between:\n * - Rendering (WebGL/Canvas based visualization)\n * - State management (algorithm execution and history)\n * - User interaction (controls and configuration)\n * - Educational content (algorithm explanations and insights)\n * \n * Performance characteristics:\n * - Time Complexity: O(n) for visualization operations where n is the data size\n * - Space Complexity: O(n*s) where s is the number of recorded steps\n * - Rendering Performance: 60fps target with up to 100,000 elements on supported hardware\n */\nconst SortingVisualizer = ({ \n  algorithm, \n  options = {},\n  width = 800,\n  height = 400,\n  showEducationalContent = true,\n  onMetricsUpdate = null\n}) => {\n  // =========================================================================\n  // STATE MANAGEMENT\n  // =========================================================================\n  \n  // Canvas and visualization references\n  const primaryCanvasRef = useRef(null);\n  const fallbackCanvasRef = useRef(null);\n  const rendererRef = useRef(null);\n  const animationRef = useRef(null);\n  const stepHistoryRef = useRef([]);\n  \n  // Visualization configuration state\n  const [renderMode, setRenderMode] = useState(() => \n    WebGLRenderer.isSupported() ? 'webgl' : 'canvas');\n  const [selectedDataSet, setSelectedDataSet] = useState('random');\n  const [dataSize, setDataSize] = useState(50);\n  const [data, setData] = useState([]);\n  const [visualizerType, setVisualizerType] = useState('standard');\n  \n  // Algorithm execution state\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [totalSteps, setTotalSteps] = useState(0);\n  const [playbackSpeed, setPlaybackSpeed] = useState(1);\n  const [metrics, setMetrics] = useState({});\n  const [currentStepData, setCurrentStepData] = useState(null);\n  \n  // Specialized visualization state\n  const [heapStructure, setHeapStructure] = useState(null);\n  const [distributionData, setDistributionData] = useState(null);\n  const [transformationData, setTransformationData] = useState(null);\n  const [selectionData, setSelectionData] = useState(null);\n  \n  // Educational content state\n  const [showExplanations, setShowExplanations] = useState(showEducationalContent);\n  \n  // =========================================================================\n  // DERIVED STATE AND CONSTANTS\n  // =========================================================================\n  \n  /**\n   * Determine the appropriate specialized visualizer based on algorithm type\n   */\n  const determineVisualizerType = useCallback(() => {\n    if (!algorithm) return 'standard';\n    \n    // Analyze algorithm characteristics to determine visualizer type\n    const { name, category } = algorithm;\n    \n    if (name === 'Heap Sort' && algorithm.options?.visualizeHeap) {\n      return 'heap';\n    } else if (category === 'distribution') {\n      return 'distribution';\n    } else if (category === 'selection') {\n      return 'selection';\n    } else if (['Pancake Sort', 'Bogo Sort'].includes(name)) {\n      return 'transformation';\n    }\n    \n    return 'standard';\n  }, [algorithm]);\n  \n  /**\n   * Available data set types with descriptions\n   */\n  const DATA_SETS = useMemo(() => [\n    { value: 'random', label: 'Random', description: 'Randomly distributed values' },\n    { value: 'nearly-sorted', label: 'Nearly Sorted', description: 'Values that are mostly in order' },\n    { value: 'reversed', label: 'Reversed', description: 'Values in reverse order' },\n    { value: 'few-unique', label: 'Few Unique Values', description: 'Many duplicate values' },\n    { value: 'sorted', label: 'Already Sorted', description: 'Values in perfect order' },\n    { value: 'sawtooth', label: 'Sawtooth Pattern', description: 'Repeating ascending sequences' }\n  ], []);\n  \n  /**\n   * Available data sizes with descriptions\n   */\n  const DATA_SIZES = useMemo(() => [\n    { value: 10, label: 'Tiny (10)', description: 'For algorithm step examination' },\n    { value: 30, label: 'Small (30)', description: 'For detailed algorithm visualization' },\n    { value: 50, label: 'Medium (50)', description: 'For general algorithm behavior' },\n    { value: 100, label: 'Large (100)', description: 'For performance patterns' },\n    { value: 250, label: 'X-Large (250)', description: 'For advanced visualization' },\n    { value: 1000, label: 'Huge (1,000)', description: 'For performance testing' },\n    { value: 10000, label: 'Extreme (10,000)', description: 'For stress testing' }\n  ], []);\n  \n  // =========================================================================\n  // LIFECYCLE & SIDE EFFECTS\n  // =========================================================================\n  \n  /**\n   * Initialize data and renderer on component mount\n   */\n  useEffect(() => {\n    // Initialize data\n    generateInitialData();\n    \n    // Initialize renderer\n    initializeRenderer();\n    \n    // Set up window resize handler\n    const handleResize = () => {\n      if (rendererRef.current) {\n        rendererRef.current.resize();\n      }\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n    // Cleanup function\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      \n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n      }\n      \n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []);\n  \n  /**\n   * Update renderer when options or render mode changes\n   */\n  useEffect(() => {\n    if (rendererRef.current) {\n      rendererRef.current.setOptions({\n        colorScheme: options.colorScheme || 'spectrum',\n        barWidth: options.barWidth || 4,\n        spacing: options.spacing || 1,\n        effectMode: options.effectMode || 0,\n        ...options\n      });\n    }\n  }, [options, renderMode]);\n  \n  /**\n   * Execute algorithm when algorithm or data changes\n   */\n  useEffect(() => {\n    if (algorithm && data.length > 0) {\n      executeAlgorithm();\n    }\n  }, [algorithm, data.length, selectedDataSet, dataSize]);\n  \n  /**\n   * Update visualizer type when algorithm changes\n   */\n  useEffect(() => {\n    setVisualizerType(determineVisualizerType());\n  }, [algorithm, determineVisualizerType]);\n  \n  /**\n   * Update specialized visualization data when step changes\n   */\n  useEffect(() => {\n    if (!currentStepData) return;\n    \n    // Update heap structure for heap visualizer\n    if (currentStepData.heapStructure || currentStepData.heap_structure) {\n      setHeapStructure(currentStepData.heapStructure || currentStepData.heap_structure);\n    }\n    \n    // Update distribution data for distribution visualizer\n    if (currentStepData.distributionData || currentStepData.distribution_data) {\n      setDistributionData(currentStepData.distributionData || currentStepData.distribution_data);\n    }\n    \n    // Update transformation data for transformation visualizer\n    if (currentStepData.transformationData || currentStepData.transformation_data) {\n      setTransformationData(currentStepData.transformationData || currentStepData.transformation_data);\n    }\n    \n    // Update selection data for selection visualizer\n    if (currentStepData.selectionData || currentStepData.selection_data) {\n      setSelectionData(currentStepData.selectionData || currentStepData.selection_data);\n    }\n    \n  }, [currentStepData]);\n  \n  /**\n   * Forward metrics updates to parent component if callback provided\n   */\n  useEffect(() => {\n    if (onMetricsUpdate && Object.keys(metrics).length > 0) {\n      onMetricsUpdate(metrics);\n    }\n  }, [metrics, onMetricsUpdate]);\n  \n  // =========================================================================\n  // CORE FUNCTIONALITY\n  // =========================================================================\n  \n  /**\n   * Initialize the appropriate renderer based on capability and mode selection\n   * @returns {void}\n   */\n  const initializeRenderer = () => {\n    const primaryCanvas = primaryCanvasRef.current;\n    const fallbackCanvas = fallbackCanvasRef.current;\n    \n    if (!primaryCanvas || !fallbackCanvas) return;\n    \n    try {\n      let renderer;\n      \n      if (renderMode === 'webgl') {\n        try {\n          renderer = new WebGLRenderer(primaryCanvas, {\n            maxElements: 100000,\n            colorScheme: options.colorScheme || 'spectrum',\n            barWidth: options.barWidth || 4,\n            spacing: options.spacing || 1,\n            effectMode: options.effectMode || 0,\n            ...options\n          });\n          \n          // Configure canvas visibility\n          primaryCanvas.style.display = 'block';\n          fallbackCanvas.style.display = 'none';\n        } catch (e) {\n          console.warn('WebGL renderer initialization failed, falling back to Canvas renderer', e);\n          setRenderMode('canvas');\n          throw e; // Force fallback\n        }\n      }\n      \n      if (renderMode === 'canvas') {\n        renderer = new ArrayRenderer(fallbackCanvas, {\n          maxElements: 10000,\n          colorScheme: options.colorScheme || 'spectrum',\n          barWidth: options.barWidth || 4,\n          spacing: options.spacing || 1,\n          ...options\n        });\n        \n        // Configure canvas visibility\n        primaryCanvas.style.display = 'none';\n        fallbackCanvas.style.display = 'block';\n      }\n      \n      rendererRef.current = renderer;\n      \n      // Initialize renderer with data if available\n      if (data.length > 0) {\n        renderer.setData(data);\n      }\n      \n    } catch (e) {\n      console.error('Failed to initialize renderer', e);\n    }\n  };\n  \n  /**\n   * Generate initial data based on selected parameters\n   * @returns {void}\n   */\n  const generateInitialData = () => {\n    // Generate data using the data generator utility\n    const newData = generateDataSet(selectedDataSet, dataSize, {\n      min: 1,\n      max: 100,\n      ...options\n    });\n    \n    setData(newData);\n    \n    // Update renderer with new data if available\n    if (rendererRef.current) {\n      rendererRef.current.setData(newData);\n    }\n  };\n  \n  /**\n   * Execute the current algorithm on the data\n   * @returns {Promise<void>}\n   */\n  const executeAlgorithm = async () => {\n    if (!algorithm || data.length === 0) return;\n    \n    // Reset visualization state\n    setIsPlaying(false);\n    setCurrentStep(0);\n    stepHistoryRef.current = [];\n    setHeapStructure(null);\n    setDistributionData(null);\n    setTransformationData(null);\n    setSelectionData(null);\n    \n    // Clone the data to avoid mutation issues\n    const dataToSort = [...data];\n    \n    try {\n      // Execute algorithm with instrumentation\n      const startTime = performance.now();\n      \n      const result = await algorithm.execute(dataToSort, {\n        onStep: (step) => {\n          stepHistoryRef.current.push(step);\n        }\n      });\n      \n      const endTime = performance.now();\n      \n      // Update metrics with results\n      const updatedMetrics = {\n        ...algorithm.getMetrics(),\n        executionTime: endTime - startTime,\n        dataSize: data.length,\n        dataType: selectedDataSet,\n        finishedAt: new Date().toISOString()\n      };\n      \n      setMetrics(updatedMetrics);\n      setTotalSteps(stepHistoryRef.current.length);\n      \n      // Update renderer with sorted data\n      if (rendererRef.current) {\n        rendererRef.current.setData(result);\n      }\n      \n    } catch (error) {\n      console.error('Algorithm execution failed', error);\n    }\n  };\n  \n  /**\n   * Navigate to a specific step in the algorithm execution\n   * @param {number} step - Step index to navigate to\n   * @returns {void}\n   */\n  const navigateStep = (step) => {\n    if (step < 0 || step >= stepHistoryRef.current.length) return;\n    \n    setCurrentStep(step);\n    \n    const stepData = stepHistoryRef.current[step];\n    setCurrentStepData(stepData);\n    \n    if (rendererRef.current && stepData) {\n      // Update renderer with current step data\n      rendererRef.current.setData(stepData.array, false);\n      \n      // Highlight relevant elements based on step type\n      if (stepData.type === 'comparison' && stepData.indices) {\n        rendererRef.current.markComparing(stepData.indices);\n      } else if (stepData.type === 'swap' && stepData.indices) {\n        rendererRef.current.highlight(stepData.indices);\n      } else if (stepData.type === 'sorted' && stepData.indices) {\n        rendererRef.current.markSorted(stepData.indices);\n      } else if (stepData.type === 'read' && stepData.index !== undefined) {\n        rendererRef.current.markRead([stepData.index]);\n      } else if (stepData.type === 'write' && stepData.index !== undefined) {\n        rendererRef.current.markWrite([stepData.index]);\n      } else if (stepData.type === 'heapify' && stepData.node !== undefined) {\n        // For heap sort, highlight the current node being heapified\n        rendererRef.current.highlight([stepData.node]);\n        \n        // Also highlight children if available\n        if (stepData.children && stepData.children.length) {\n          rendererRef.current.markComparing(stepData.children);\n        }\n      } else if (stepData.type === 'heapify-swap' && stepData.indices) {\n        rendererRef.current.highlight(stepData.indices);\n      } else if (stepData.type === 'partition' && stepData.pivot_idx !== undefined) {\n        rendererRef.current.highlight([stepData.pivot_idx]);\n      } else if (stepData.type === 'bucket' && stepData.bucket_indices) {\n        rendererRef.current.highlight(stepData.bucket_indices);\n      }\n    }\n  };\n  \n  /**\n   * Start or stop animation playback\n   * @returns {void}\n   */\n  const togglePlayback = () => {\n    const newPlayingState = !isPlaying;\n    setIsPlaying(newPlayingState);\n    \n    if (newPlayingState) {\n      // Start animation\n      const lastTimestamp = performance.now();\n      const animate = (timestamp) => {\n        if (!isPlaying) return;\n        \n        // Control animation speed\n        const elapsed = timestamp - lastTimestamp;\n        \n        if (elapsed > (1000 / (playbackSpeed * 10))) {\n          // Time to advance step\n          const nextStep = (currentStep + 1) % (totalSteps || 1);\n          \n          if (nextStep === 0 || nextStep >= totalSteps - 1) {\n            // Reached the end, stop playback\n            setIsPlaying(false);\n            return;\n          }\n          \n          navigateStep(nextStep);\n        }\n        \n        animationRef.current = requestAnimationFrame(animate);\n      };\n      \n      animationRef.current = requestAnimationFrame(animate);\n    } else {\n      // Stop animation\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    }\n  };\n  \n  /**\n   * Calculate descriptive statistics for the current step\n   * Returns information about comparisons, swaps, etc. at the current step\n   * @returns {Object} Statistics object\n   */\n  const calculateStepStatistics = () => {\n    if (!currentStepData || !currentStepData.metrics) return {};\n    \n    // Get metrics from the current step\n    const stepMetrics = currentStepData.metrics;\n    \n    // Calculate statistics\n    return {\n      comparisonsPerElement: stepMetrics.comparisons / data.length,\n      swapsPerElement: stepMetrics.swaps / data.length,\n      readsPerElement: stepMetrics.reads / data.length,\n      writesPerElement: stepMetrics.writes / data.length,\n      progress: currentStep / totalSteps,\n      phase: currentStepData.type || 'unknown'\n    };\n  };\n  \n  // =========================================================================\n  // EVENT HANDLERS\n  // =========================================================================\n  \n  /**\n   * Handle data set type change\n   * @param {React.ChangeEvent<HTMLSelectElement>} event - Change event\n   * @returns {void}\n   */\n  const handleDataSetChange = (event) => {\n    setSelectedDataSet(event.target.value);\n  };\n  \n  /**\n   * Handle data size change\n   * @param {React.ChangeEvent<HTMLSelectElement>} event - Change event\n   * @returns {void}\n   */\n  const handleSizeChange = (event) => {\n    setDataSize(parseInt(event.target.value, 10));\n  };\n  \n  /**\n   * Regenerate data with current settings\n   * @returns {void}\n   */\n  const handleRegenerateData = () => {\n    generateInitialData();\n  };\n  \n  /**\n   * Handle renderer mode change\n   * @param {React.ChangeEvent<HTMLSelectElement>} event - Change event\n   * @returns {void}\n   */\n  const handleRenderModeChange = (event) => {\n    setRenderMode(event.target.value);\n    \n    // Initialize a new renderer after state update\n    setTimeout(() => {\n      initializeRenderer();\n    }, 0);\n  };\n  \n  /**\n   * Handle playback speed change\n   * @param {React.ChangeEvent<HTMLInputElement>} event - Change event\n   * @returns {void}\n   */\n  const handleSpeedChange = (event) => {\n    setPlaybackSpeed(parseFloat(event.target.value));\n  };\n  \n  /**\n   * Handle keyboard shortcuts for playback control\n   * @param {React.KeyboardEvent} event - Keyboard event\n   * @returns {void}\n   */\n  const handleKeyDown = (event) => {\n    // Only handle events when the component is focused\n    if (event.target !== document.body) return;\n    \n    switch (event.key) {\n      case ' ':\n        // Space bar toggles playback\n        event.preventDefault();\n        togglePlayback();\n        break;\n      case 'ArrowRight':\n        // Right arrow advances to next step\n        event.preventDefault();\n        navigateStep(currentStep + 1);\n        break;\n      case 'ArrowLeft':\n        // Left arrow goes to previous step\n        event.preventDefault();\n        navigateStep(currentStep - 1);\n        break;\n      case 'Home':\n        // Home key goes to first step\n        event.preventDefault();\n        navigateStep(0);\n        break;\n      case 'End':\n        // End key goes to last step\n        event.preventDefault();\n        navigateStep(totalSteps - 1);\n        break;\n      default:\n        // No action for other keys\n        break;\n    }\n  };\n  \n  /**\n   * Toggle educational content visibility\n   * @returns {void}\n   */\n  const toggleExplanations = () => {\n    setShowExplanations(!showExplanations);\n  };\n  \n  // =========================================================================\n  // RENDERING HELPERS\n  // =========================================================================\n  \n  /**\n   * Render the appropriate specialized visualizer based on algorithm type\n   * @returns {JSX.Element} Specialized visualizer component\n   */\n  const renderSpecializedVisualizer = () => {\n    switch (visualizerType) {\n      case 'heap':\n        return (\n          <div className=\"specialized-visualizer heap-view-container\">\n            <h4>Binary Heap Structure</h4>\n            <HeapVisualizer \n              heapStructure={heapStructure} \n              width={width} \n              height={300} \n            />\n          </div>\n        );\n      case 'distribution':\n        return (\n          <div className=\"specialized-visualizer distribution-view-container\">\n            <h4>Distribution Visualization</h4>\n            <DistributionVisualizer \n              distributionData={distributionData}\n              width={width}\n              height={300}\n            />\n          </div>\n        );\n      case 'transformation':\n        return (\n          <div className=\"specialized-visualizer transformation-view-container\">\n            <h4>Transformation Visualization</h4>\n            <TransformVisualizer \n              transformationData={transformationData}\n              width={width}\n              height={300}\n            />\n          </div>\n        );\n      case 'selection':\n        return (\n          <div className=\"specialized-visualizer selection-view-container\">\n            <h4>Selection Algorithm Visualization</h4>\n            <SelectionVisualizer \n              selectionData={selectionData}\n              width={width}\n              height={300}\n            />\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n  \n  /**\n   * Render the step information panel\n   * @returns {JSX.Element} Step information panel\n   */\n  const renderStepInfo = () => {\n    if (!currentStepData) return null;\n    \n    return (\n      <div className=\"step-info\">\n        <h4>Current Operation</h4>\n        <div className=\"step-message\">\n          {currentStepData.message || 'No description for this step'}\n        </div>\n        <div className=\"step-details\">\n          <div>Type: <span className=\"operation-type\">{currentStepData.type || 'unknown'}</span></div>\n          {currentStepData.indices && (\n            <div>Indices: <span className=\"indices\">{currentStepData.indices.join(', ')}</span></div>\n          )}\n          {currentStepData.index !== undefined && (\n            <div>Index: <span className=\"index\">{currentStepData.index}</span></div>\n          )}\n          {currentStepData.value !== undefined && (\n            <div>Value: <span className=\"value\">{currentStepData.value}</span></div>\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  // =========================================================================\n  // RENDER METHOD\n  // =========================================================================\n  \n  return (\n    <div \n      className=\"sorting-visualizer\"\n      onKeyDown={handleKeyDown} \n      tabIndex=\"0\"\n      aria-label=\"Sorting Algorithm Visualization\"\n    >\n      <div className=\"visualization-container\">\n        <canvas \n          ref={primaryCanvasRef}\n          width={width}\n          height={height}\n          className=\"visualization-canvas\"\n          aria-label=\"Algorithm visualization area\"\n        />\n        <canvas\n          ref={fallbackCanvasRef}\n          width={width}\n          height={height}\n          className=\"visualization-canvas fallback\"\n          aria-label=\"Fallback visualization area\"\n        />\n        \n        {algorithm && (\n          <div className=\"algorithm-info\">\n            <h3>{algorithm.name}</h3>\n            <div className=\"complexity-info\">\n              <div>Time: {algorithm.getComplexity().time.average}</div>\n              <div>Space: {algorithm.getComplexity().space.average}</div>\n              <div>Stable: {algorithm.isStable() ? 'Yes' : 'No'}</div>\n            </div>\n          </div>\n        )}\n        \n        {/* Specialized visualizations */}\n        {renderSpecializedVisualizer()}\n      </div>\n      \n      <div className=\"controls-container\">\n        <div className=\"playback-controls\">\n          <button \n            onClick={() => navigateStep(0)}\n            disabled={currentStep === 0 || isPlaying}\n            aria-label=\"Go to first step\"\n            title=\"First step\"\n          >\n            ⏮️ First\n          </button>\n          <button \n            onClick={() => navigateStep(currentStep - 1)}\n            disabled={currentStep === 0 || isPlaying}\n            aria-label=\"Go to previous step\"\n            title=\"Previous step\"\n          >\n            ⏪ Prev\n          </button>\n          <button \n            onClick={togglePlayback}\n            aria-label={isPlaying ? \"Pause animation\" : \"Play animation\"}\n            title={isPlaying ? \"Pause\" : \"Play\"}\n          >\n            {isPlaying ? '⏸️ Pause' : '▶️ Play'}\n          </button>\n          <button \n            onClick={() => navigateStep(currentStep + 1)}\n            disabled={currentStep >= totalSteps - 1 || isPlaying}\n            aria-label=\"Go to next step\"\n            title=\"Next step\"\n          >\n            ⏩ Next\n          </button>\n          <button \n            onClick={() => navigateStep(totalSteps - 1)}\n            disabled={currentStep >= totalSteps - 1 || isPlaying}\n            aria-label=\"Go to last step\"\n            title=\"Last step\"\n          >\n            ⏭️ Last\n          </button>\n        </div>\n        \n        <div className=\"speed-control\">\n          <label htmlFor=\"playback-speed\">Speed: </label>\n          <input\n            id=\"playback-speed\"\n            type=\"range\"\n            min=\"0.1\"\n            max=\"10\"\n            step=\"0.1\"\n            value={playbackSpeed}\n            onChange={handleSpeedChange}\n            disabled={isPlaying}\n            aria-label=\"Playback speed\"\n            title={`Playback speed: ${playbackSpeed.toFixed(1)}x`}\n          />\n          <span>{playbackSpeed.toFixed(1)}x</span>\n        </div>\n        \n        <div className=\"progress-indicator\">\n          <div className=\"step-counter\">\n            Step: {currentStep} / {totalSteps}\n          </div>\n          <progress \n            value={currentStep} \n            max={totalSteps || 100}\n            aria-label={`Step ${currentStep} of ${totalSteps}`}\n          />\n        </div>\n        \n        <div className=\"data-controls\">\n          <div className=\"control-group\">\n            <label htmlFor=\"data-type\">Data Type:</label>\n            <select \n              id=\"data-type\"\n              value={selectedDataSet} \n              onChange={handleDataSetChange} \n              disabled={isPlaying}\n              aria-label=\"Select data distribution type\"\n            >\n              {DATA_SETS.map(set => (\n                <option \n                  key={set.value} \n                  value={set.value}\n                  title={set.description}\n                >\n                  {set.label}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          <div className=\"control-group\">\n            <label htmlFor=\"data-size\">Size:</label>\n            <select \n              id=\"data-size\"\n              value={dataSize} \n              onChange={handleSizeChange} \n              disabled={isPlaying}\n              aria-label=\"Select data size\"\n            >\n              {DATA_SIZES.map(size => (\n                <option \n                  key={size.value} \n                  value={size.value}\n                  title={size.description}\n                >\n                  {size.label}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          <div className=\"control-group\">\n            <label htmlFor=\"render-mode\">Renderer:</label>\n            <select \n              id=\"render-mode\"\n              value={renderMode} \n              onChange={handleRenderModeChange} \n              disabled={isPlaying}\n              aria-label=\"Select rendering mode\"\n            >\n              <option value=\"webgl\">WebGL (Fast)</option>\n              <option value=\"canvas\">Canvas (Compatible)</option>\n            </select>\n          </div>\n          \n          <button \n            onClick={handleRegenerateData} \n            disabled={isPlaying}\n            aria-label=\"Generate new data with current settings\"\n            title=\"Generate new data\"\n          >\n            Regenerate Data\n          </button>\n        </div>\n        \n        {/* Performance metrics display */}\n        {metrics && Object.keys(metrics).length > 0 && (\n          <MetricsDisplay \n            metrics={metrics} \n            algorithm={algorithm}\n            dataSize={dataSize}\n            stepStatistics={calculateStepStatistics()}\n          />\n        )}\n        \n        {/* Current step information */}\n        {renderStepInfo()}\n        \n        {/* Educational content toggle */}\n        <div className=\"educational-toggle\">\n          <button \n            onClick={toggleExplanations}\n            className={`toggle-button ${showExplanations ? 'active' : ''}`}\n            aria-label={showExplanations ? \"Hide educational content\" : \"Show educational content\"}\n            aria-pressed={showExplanations}\n          >\n            {showExplanations ? 'Hide Explanations' : 'Show Explanations'}\n          </button>\n        </div>\n      </div>\n      \n      {/* Educational content panel */}\n      {showExplanations && algorithm && (\n        <EducationalPanel \n          algorithm={algorithm}\n          currentStep={currentStepData}\n          stepStatistics={calculateStepStatistics()}\n        />\n      )}\n    </div>\n  );\n};\n\n// =========================================================================\n// PROP TYPES\n// =========================================================================\n\nSortingVisualizer.propTypes = {\n  /**\n   * Algorithm instance to visualize\n   */\n  algorithm: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    category: PropTypes.string.isRequired,\n    execute: PropTypes.func.isRequired,\n    getComplexity: PropTypes.func.isRequired,\n    isStable: PropTypes.func.isRequired,\n    getMetrics: PropTypes.func.isRequired,\n    options: PropTypes.object\n  }),\n  \n  /**\n   * Visualization options\n   */\n  options: PropTypes.shape({\n    colorScheme: PropTypes.string,\n    barWidth: PropTypes.number,\n    spacing: PropTypes.number,\n    effectMode: PropTypes.number\n  }),\n  \n  /**\n   * Canvas width in pixels\n   */\n  width: PropTypes.number,\n  \n  /**\n   * Canvas height in pixels\n   */\n  height: PropTypes.number,\n  \n  /**\n   * Whether to show educational content by default\n   */\n  showEducationalContent: PropTypes.bool,\n  \n  /**\n   * Callback function for metrics updates\n   */\n  onMetricsUpdate: PropTypes.func\n};\n\nexport default SortingVisualizer;\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAChF,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,aAAa,QAAQ,2CAA2C;AACzE,SAASC,aAAa,QAAQ,2CAA2C;AACzE,SAASC,eAAe,QAAQ,oBAAoB;AACpD,OAAOC,cAAc,MAAM,6CAA6C;AACxE,OAAOC,sBAAsB,MAAM,qDAAqD;AACxF,OAAOC,mBAAmB,MAAM,kDAAkD;AAClF,OAAOC,mBAAmB,MAAM,kDAAkD;AAClF,OAAOC,cAAc,MAAM,mBAAmB;AAC9C,OAAOC,gBAAgB,MAAM,qBAAqB;AAClD,OAAO,kCAAkC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAGA,CAAC;EACzBC,SAAS;EACTC,OAAO,GAAG,CAAC,CAAC;EACZC,KAAK,GAAG,GAAG;EACXC,MAAM,GAAG,GAAG;EACZC,sBAAsB,GAAG,IAAI;EAC7BC,eAAe,GAAG;AACpB,CAAC,KAAK;EACJ;EACA;EACA;;EAEA;EACA,MAAMC,gBAAgB,GAAGpB,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMqB,iBAAiB,GAAGrB,MAAM,CAAC,IAAI,CAAC;EACtC,MAAMsB,WAAW,GAAGtB,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMuB,YAAY,GAAGvB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMwB,cAAc,GAAGxB,MAAM,CAAC,EAAE,CAAC;;EAEjC;EACA,MAAM,CAACyB,UAAU,EAAEC,aAAa,CAAC,GAAG5B,QAAQ,CAAC,MAC3CM,aAAa,CAACuB,WAAW,CAAC,CAAC,GAAG,OAAO,GAAG,QAAQ,CAAC;EACnD,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAG/B,QAAQ,CAAC,QAAQ,CAAC;EAChE,MAAM,CAACgC,QAAQ,EAAEC,WAAW,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkC,IAAI,EAAEC,OAAO,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACoC,cAAc,EAAEC,iBAAiB,CAAC,GAAGrC,QAAQ,CAAC,UAAU,CAAC;;EAEhE;EACA,MAAM,CAACsC,SAAS,EAAEC,YAAY,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACwC,WAAW,EAAEC,cAAc,CAAC,GAAGzC,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAAC0C,UAAU,EAAEC,aAAa,CAAC,GAAG3C,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAAC4C,aAAa,EAAEC,gBAAgB,CAAC,GAAG7C,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAAC8C,OAAO,EAAEC,UAAU,CAAC,GAAG/C,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACgD,eAAe,EAAEC,kBAAkB,CAAC,GAAGjD,QAAQ,CAAC,IAAI,CAAC;;EAE5D;EACA,MAAM,CAACkD,aAAa,EAAEC,gBAAgB,CAAC,GAAGnD,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACoD,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrD,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACsD,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGvD,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACwD,aAAa,EAAEC,gBAAgB,CAAC,GAAGzD,QAAQ,CAAC,IAAI,CAAC;;EAExD;EACA,MAAM,CAAC0D,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG3D,QAAQ,CAACoB,sBAAsB,CAAC;;EAEhF;EACA;EACA;;EAEA;AACF;AACA;EACE,MAAMwC,uBAAuB,GAAGzD,WAAW,CAAC,MAAM;IAAA,IAAA0D,kBAAA;IAChD,IAAI,CAAC7C,SAAS,EAAE,OAAO,UAAU;;IAEjC;IACA,MAAM;MAAE8C,IAAI;MAAEC;IAAS,CAAC,GAAG/C,SAAS;IAEpC,IAAI8C,IAAI,KAAK,WAAW,MAAAD,kBAAA,GAAI7C,SAAS,CAACC,OAAO,cAAA4C,kBAAA,uBAAjBA,kBAAA,CAAmBG,aAAa,GAAE;MAC5D,OAAO,MAAM;IACf,CAAC,MAAM,IAAID,QAAQ,KAAK,cAAc,EAAE;MACtC,OAAO,cAAc;IACvB,CAAC,MAAM,IAAIA,QAAQ,KAAK,WAAW,EAAE;MACnC,OAAO,WAAW;IACpB,CAAC,MAAM,IAAI,CAAC,cAAc,EAAE,WAAW,CAAC,CAACE,QAAQ,CAACH,IAAI,CAAC,EAAE;MACvD,OAAO,gBAAgB;IACzB;IAEA,OAAO,UAAU;EACnB,CAAC,EAAE,CAAC9C,SAAS,CAAC,CAAC;;EAEf;AACF;AACA;EACE,MAAMkD,SAAS,GAAG9D,OAAO,CAAC,MAAM,CAC9B;IAAE+D,KAAK,EAAE,QAAQ;IAAEC,KAAK,EAAE,QAAQ;IAAEC,WAAW,EAAE;EAA8B,CAAC,EAChF;IAAEF,KAAK,EAAE,eAAe;IAAEC,KAAK,EAAE,eAAe;IAAEC,WAAW,EAAE;EAAkC,CAAC,EAClG;IAAEF,KAAK,EAAE,UAAU;IAAEC,KAAK,EAAE,UAAU;IAAEC,WAAW,EAAE;EAA0B,CAAC,EAChF;IAAEF,KAAK,EAAE,YAAY;IAAEC,KAAK,EAAE,mBAAmB;IAAEC,WAAW,EAAE;EAAwB,CAAC,EACzF;IAAEF,KAAK,EAAE,QAAQ;IAAEC,KAAK,EAAE,gBAAgB;IAAEC,WAAW,EAAE;EAA0B,CAAC,EACpF;IAAEF,KAAK,EAAE,UAAU;IAAEC,KAAK,EAAE,kBAAkB;IAAEC,WAAW,EAAE;EAAgC,CAAC,CAC/F,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;EACE,MAAMC,UAAU,GAAGlE,OAAO,CAAC,MAAM,CAC/B;IAAE+D,KAAK,EAAE,EAAE;IAAEC,KAAK,EAAE,WAAW;IAAEC,WAAW,EAAE;EAAiC,CAAC,EAChF;IAAEF,KAAK,EAAE,EAAE;IAAEC,KAAK,EAAE,YAAY;IAAEC,WAAW,EAAE;EAAuC,CAAC,EACvF;IAAEF,KAAK,EAAE,EAAE;IAAEC,KAAK,EAAE,aAAa;IAAEC,WAAW,EAAE;EAAiC,CAAC,EAClF;IAAEF,KAAK,EAAE,GAAG;IAAEC,KAAK,EAAE,aAAa;IAAEC,WAAW,EAAE;EAA2B,CAAC,EAC7E;IAAEF,KAAK,EAAE,GAAG;IAAEC,KAAK,EAAE,eAAe;IAAEC,WAAW,EAAE;EAA6B,CAAC,EACjF;IAAEF,KAAK,EAAE,IAAI;IAAEC,KAAK,EAAE,cAAc;IAAEC,WAAW,EAAE;EAA0B,CAAC,EAC9E;IAAEF,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE,kBAAkB;IAAEC,WAAW,EAAE;EAAqB,CAAC,CAC/E,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;;EAEA;AACF;AACA;EACEpE,SAAS,CAAC,MAAM;IACd;IACAsE,mBAAmB,CAAC,CAAC;;IAErB;IACAC,kBAAkB,CAAC,CAAC;;IAEpB;IACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAIjD,WAAW,CAACkD,OAAO,EAAE;QACvBlD,WAAW,CAACkD,OAAO,CAACC,MAAM,CAAC,CAAC;MAC9B;IACF,CAAC;IAEDC,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEJ,YAAY,CAAC;;IAE/C;IACA,OAAO,MAAM;MACXG,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEL,YAAY,CAAC;MAElD,IAAIjD,WAAW,CAACkD,OAAO,EAAE;QACvBlD,WAAW,CAACkD,OAAO,CAACK,OAAO,CAAC,CAAC;MAC/B;MAEA,IAAItD,YAAY,CAACiD,OAAO,EAAE;QACxBM,oBAAoB,CAACvD,YAAY,CAACiD,OAAO,CAAC;MAC5C;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;EACEzE,SAAS,CAAC,MAAM;IACd,IAAIuB,WAAW,CAACkD,OAAO,EAAE;MACvBlD,WAAW,CAACkD,OAAO,CAACO,UAAU,CAAC;QAC7BC,WAAW,EAAEjE,OAAO,CAACiE,WAAW,IAAI,UAAU;QAC9CC,QAAQ,EAAElE,OAAO,CAACkE,QAAQ,IAAI,CAAC;QAC/BC,OAAO,EAAEnE,OAAO,CAACmE,OAAO,IAAI,CAAC;QAC7BC,UAAU,EAAEpE,OAAO,CAACoE,UAAU,IAAI,CAAC;QACnC,GAAGpE;MACL,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACA,OAAO,EAAEU,UAAU,CAAC,CAAC;;EAEzB;AACF;AACA;EACE1B,SAAS,CAAC,MAAM;IACd,IAAIe,SAAS,IAAIkB,IAAI,CAACoD,MAAM,GAAG,CAAC,EAAE;MAChCC,gBAAgB,CAAC,CAAC;IACpB;EACF,CAAC,EAAE,CAACvE,SAAS,EAAEkB,IAAI,CAACoD,MAAM,EAAExD,eAAe,EAAEE,QAAQ,CAAC,CAAC;;EAEvD;AACF;AACA;EACE/B,SAAS,CAAC,MAAM;IACdoC,iBAAiB,CAACuB,uBAAuB,CAAC,CAAC,CAAC;EAC9C,CAAC,EAAE,CAAC5C,SAAS,EAAE4C,uBAAuB,CAAC,CAAC;;EAExC;AACF;AACA;EACE3D,SAAS,CAAC,MAAM;IACd,IAAI,CAAC+C,eAAe,EAAE;;IAEtB;IACA,IAAIA,eAAe,CAACE,aAAa,IAAIF,eAAe,CAACwC,cAAc,EAAE;MACnErC,gBAAgB,CAACH,eAAe,CAACE,aAAa,IAAIF,eAAe,CAACwC,cAAc,CAAC;IACnF;;IAEA;IACA,IAAIxC,eAAe,CAACI,gBAAgB,IAAIJ,eAAe,CAACyC,iBAAiB,EAAE;MACzEpC,mBAAmB,CAACL,eAAe,CAACI,gBAAgB,IAAIJ,eAAe,CAACyC,iBAAiB,CAAC;IAC5F;;IAEA;IACA,IAAIzC,eAAe,CAACM,kBAAkB,IAAIN,eAAe,CAAC0C,mBAAmB,EAAE;MAC7EnC,qBAAqB,CAACP,eAAe,CAACM,kBAAkB,IAAIN,eAAe,CAAC0C,mBAAmB,CAAC;IAClG;;IAEA;IACA,IAAI1C,eAAe,CAACQ,aAAa,IAAIR,eAAe,CAAC2C,cAAc,EAAE;MACnElC,gBAAgB,CAACT,eAAe,CAACQ,aAAa,IAAIR,eAAe,CAAC2C,cAAc,CAAC;IACnF;EAEF,CAAC,EAAE,CAAC3C,eAAe,CAAC,CAAC;;EAErB;AACF;AACA;EACE/C,SAAS,CAAC,MAAM;IACd,IAAIoB,eAAe,IAAIuE,MAAM,CAACC,IAAI,CAAC/C,OAAO,CAAC,CAACwC,MAAM,GAAG,CAAC,EAAE;MACtDjE,eAAe,CAACyB,OAAO,CAAC;IAC1B;EACF,CAAC,EAAE,CAACA,OAAO,EAAEzB,eAAe,CAAC,CAAC;;EAE9B;EACA;EACA;;EAEA;AACF;AACA;AACA;EACE,MAAMmD,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAMsB,aAAa,GAAGxE,gBAAgB,CAACoD,OAAO;IAC9C,MAAMqB,cAAc,GAAGxE,iBAAiB,CAACmD,OAAO;IAEhD,IAAI,CAACoB,aAAa,IAAI,CAACC,cAAc,EAAE;IAEvC,IAAI;MACF,IAAIC,QAAQ;MAEZ,IAAIrE,UAAU,KAAK,OAAO,EAAE;QAC1B,IAAI;UACFqE,QAAQ,GAAG,IAAI1F,aAAa,CAACwF,aAAa,EAAE;YAC1CG,WAAW,EAAE,MAAM;YACnBf,WAAW,EAAEjE,OAAO,CAACiE,WAAW,IAAI,UAAU;YAC9CC,QAAQ,EAAElE,OAAO,CAACkE,QAAQ,IAAI,CAAC;YAC/BC,OAAO,EAAEnE,OAAO,CAACmE,OAAO,IAAI,CAAC;YAC7BC,UAAU,EAAEpE,OAAO,CAACoE,UAAU,IAAI,CAAC;YACnC,GAAGpE;UACL,CAAC,CAAC;;UAEF;UACA6E,aAAa,CAACI,KAAK,CAACC,OAAO,GAAG,OAAO;UACrCJ,cAAc,CAACG,KAAK,CAACC,OAAO,GAAG,MAAM;QACvC,CAAC,CAAC,OAAOC,CAAC,EAAE;UACVC,OAAO,CAACC,IAAI,CAAC,uEAAuE,EAAEF,CAAC,CAAC;UACxFxE,aAAa,CAAC,QAAQ,CAAC;UACvB,MAAMwE,CAAC,CAAC,CAAC;QACX;MACF;MAEA,IAAIzE,UAAU,KAAK,QAAQ,EAAE;QAC3BqE,QAAQ,GAAG,IAAIzF,aAAa,CAACwF,cAAc,EAAE;UAC3CE,WAAW,EAAE,KAAK;UAClBf,WAAW,EAAEjE,OAAO,CAACiE,WAAW,IAAI,UAAU;UAC9CC,QAAQ,EAAElE,OAAO,CAACkE,QAAQ,IAAI,CAAC;UAC/BC,OAAO,EAAEnE,OAAO,CAACmE,OAAO,IAAI,CAAC;UAC7B,GAAGnE;QACL,CAAC,CAAC;;QAEF;QACA6E,aAAa,CAACI,KAAK,CAACC,OAAO,GAAG,MAAM;QACpCJ,cAAc,CAACG,KAAK,CAACC,OAAO,GAAG,OAAO;MACxC;MAEA3E,WAAW,CAACkD,OAAO,GAAGsB,QAAQ;;MAE9B;MACA,IAAI9D,IAAI,CAACoD,MAAM,GAAG,CAAC,EAAE;QACnBU,QAAQ,CAAC7D,OAAO,CAACD,IAAI,CAAC;MACxB;IAEF,CAAC,CAAC,OAAOkE,CAAC,EAAE;MACVC,OAAO,CAACE,KAAK,CAAC,+BAA+B,EAAEH,CAAC,CAAC;IACnD;EACF,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAM7B,mBAAmB,GAAGA,CAAA,KAAM;IAChC;IACA,MAAMiC,OAAO,GAAGhG,eAAe,CAACsB,eAAe,EAAEE,QAAQ,EAAE;MACzDyE,GAAG,EAAE,CAAC;MACNC,GAAG,EAAE,GAAG;MACR,GAAGzF;IACL,CAAC,CAAC;IAEFkB,OAAO,CAACqE,OAAO,CAAC;;IAEhB;IACA,IAAIhF,WAAW,CAACkD,OAAO,EAAE;MACvBlD,WAAW,CAACkD,OAAO,CAACvC,OAAO,CAACqE,OAAO,CAAC;IACtC;EACF,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMjB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI,CAACvE,SAAS,IAAIkB,IAAI,CAACoD,MAAM,KAAK,CAAC,EAAE;;IAErC;IACA/C,YAAY,CAAC,KAAK,CAAC;IACnBE,cAAc,CAAC,CAAC,CAAC;IACjBf,cAAc,CAACgD,OAAO,GAAG,EAAE;IAC3BvB,gBAAgB,CAAC,IAAI,CAAC;IACtBE,mBAAmB,CAAC,IAAI,CAAC;IACzBE,qBAAqB,CAAC,IAAI,CAAC;IAC3BE,gBAAgB,CAAC,IAAI,CAAC;;IAEtB;IACA,MAAMkD,UAAU,GAAG,CAAC,GAAGzE,IAAI,CAAC;IAE5B,IAAI;MACF;MACA,MAAM0E,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;MAEnC,MAAMC,MAAM,GAAG,MAAM/F,SAAS,CAACgG,OAAO,CAACL,UAAU,EAAE;QACjDM,MAAM,EAAGC,IAAI,IAAK;UAChBxF,cAAc,CAACgD,OAAO,CAACyC,IAAI,CAACD,IAAI,CAAC;QACnC;MACF,CAAC,CAAC;MAEF,MAAME,OAAO,GAAGP,WAAW,CAACC,GAAG,CAAC,CAAC;;MAEjC;MACA,MAAMO,cAAc,GAAG;QACrB,GAAGrG,SAAS,CAACsG,UAAU,CAAC,CAAC;QACzBC,aAAa,EAAEH,OAAO,GAAGR,SAAS;QAClC5E,QAAQ,EAAEE,IAAI,CAACoD,MAAM;QACrBkC,QAAQ,EAAE1F,eAAe;QACzB2F,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrC,CAAC;MAED5E,UAAU,CAACsE,cAAc,CAAC;MAC1B1E,aAAa,CAACjB,cAAc,CAACgD,OAAO,CAACY,MAAM,CAAC;;MAE5C;MACA,IAAI9D,WAAW,CAACkD,OAAO,EAAE;QACvBlD,WAAW,CAACkD,OAAO,CAACvC,OAAO,CAAC4E,MAAM,CAAC;MACrC;IAEF,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,MAAMqB,YAAY,GAAIV,IAAI,IAAK;IAC7B,IAAIA,IAAI,GAAG,CAAC,IAAIA,IAAI,IAAIxF,cAAc,CAACgD,OAAO,CAACY,MAAM,EAAE;IAEvD7C,cAAc,CAACyE,IAAI,CAAC;IAEpB,MAAMW,QAAQ,GAAGnG,cAAc,CAACgD,OAAO,CAACwC,IAAI,CAAC;IAC7CjE,kBAAkB,CAAC4E,QAAQ,CAAC;IAE5B,IAAIrG,WAAW,CAACkD,OAAO,IAAImD,QAAQ,EAAE;MACnC;MACArG,WAAW,CAACkD,OAAO,CAACvC,OAAO,CAAC0F,QAAQ,CAACC,KAAK,EAAE,KAAK,CAAC;;MAElD;MACA,IAAID,QAAQ,CAACE,IAAI,KAAK,YAAY,IAAIF,QAAQ,CAACG,OAAO,EAAE;QACtDxG,WAAW,CAACkD,OAAO,CAACuD,aAAa,CAACJ,QAAQ,CAACG,OAAO,CAAC;MACrD,CAAC,MAAM,IAAIH,QAAQ,CAACE,IAAI,KAAK,MAAM,IAAIF,QAAQ,CAACG,OAAO,EAAE;QACvDxG,WAAW,CAACkD,OAAO,CAACwD,SAAS,CAACL,QAAQ,CAACG,OAAO,CAAC;MACjD,CAAC,MAAM,IAAIH,QAAQ,CAACE,IAAI,KAAK,QAAQ,IAAIF,QAAQ,CAACG,OAAO,EAAE;QACzDxG,WAAW,CAACkD,OAAO,CAACyD,UAAU,CAACN,QAAQ,CAACG,OAAO,CAAC;MAClD,CAAC,MAAM,IAAIH,QAAQ,CAACE,IAAI,KAAK,MAAM,IAAIF,QAAQ,CAACO,KAAK,KAAKC,SAAS,EAAE;QACnE7G,WAAW,CAACkD,OAAO,CAAC4D,QAAQ,CAAC,CAACT,QAAQ,CAACO,KAAK,CAAC,CAAC;MAChD,CAAC,MAAM,IAAIP,QAAQ,CAACE,IAAI,KAAK,OAAO,IAAIF,QAAQ,CAACO,KAAK,KAAKC,SAAS,EAAE;QACpE7G,WAAW,CAACkD,OAAO,CAAC6D,SAAS,CAAC,CAACV,QAAQ,CAACO,KAAK,CAAC,CAAC;MACjD,CAAC,MAAM,IAAIP,QAAQ,CAACE,IAAI,KAAK,SAAS,IAAIF,QAAQ,CAACW,IAAI,KAAKH,SAAS,EAAE;QACrE;QACA7G,WAAW,CAACkD,OAAO,CAACwD,SAAS,CAAC,CAACL,QAAQ,CAACW,IAAI,CAAC,CAAC;;QAE9C;QACA,IAAIX,QAAQ,CAACY,QAAQ,IAAIZ,QAAQ,CAACY,QAAQ,CAACnD,MAAM,EAAE;UACjD9D,WAAW,CAACkD,OAAO,CAACuD,aAAa,CAACJ,QAAQ,CAACY,QAAQ,CAAC;QACtD;MACF,CAAC,MAAM,IAAIZ,QAAQ,CAACE,IAAI,KAAK,cAAc,IAAIF,QAAQ,CAACG,OAAO,EAAE;QAC/DxG,WAAW,CAACkD,OAAO,CAACwD,SAAS,CAACL,QAAQ,CAACG,OAAO,CAAC;MACjD,CAAC,MAAM,IAAIH,QAAQ,CAACE,IAAI,KAAK,WAAW,IAAIF,QAAQ,CAACa,SAAS,KAAKL,SAAS,EAAE;QAC5E7G,WAAW,CAACkD,OAAO,CAACwD,SAAS,CAAC,CAACL,QAAQ,CAACa,SAAS,CAAC,CAAC;MACrD,CAAC,MAAM,IAAIb,QAAQ,CAACE,IAAI,KAAK,QAAQ,IAAIF,QAAQ,CAACc,cAAc,EAAE;QAChEnH,WAAW,CAACkD,OAAO,CAACwD,SAAS,CAACL,QAAQ,CAACc,cAAc,CAAC;MACxD;IACF;EACF,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,eAAe,GAAG,CAACvG,SAAS;IAClCC,YAAY,CAACsG,eAAe,CAAC;IAE7B,IAAIA,eAAe,EAAE;MACnB;MACA,MAAMC,aAAa,GAAGjC,WAAW,CAACC,GAAG,CAAC,CAAC;MACvC,MAAMiC,OAAO,GAAIC,SAAS,IAAK;QAC7B,IAAI,CAAC1G,SAAS,EAAE;;QAEhB;QACA,MAAM2G,OAAO,GAAGD,SAAS,GAAGF,aAAa;QAEzC,IAAIG,OAAO,GAAI,IAAI,IAAIrG,aAAa,GAAG,EAAE,CAAE,EAAE;UAC3C;UACA,MAAMsG,QAAQ,GAAG,CAAC1G,WAAW,GAAG,CAAC,KAAKE,UAAU,IAAI,CAAC,CAAC;UAEtD,IAAIwG,QAAQ,KAAK,CAAC,IAAIA,QAAQ,IAAIxG,UAAU,GAAG,CAAC,EAAE;YAChD;YACAH,YAAY,CAAC,KAAK,CAAC;YACnB;UACF;UAEAqF,YAAY,CAACsB,QAAQ,CAAC;QACxB;QAEAzH,YAAY,CAACiD,OAAO,GAAGyE,qBAAqB,CAACJ,OAAO,CAAC;MACvD,CAAC;MAEDtH,YAAY,CAACiD,OAAO,GAAGyE,qBAAqB,CAACJ,OAAO,CAAC;IACvD,CAAC,MAAM;MACL;MACA,IAAItH,YAAY,CAACiD,OAAO,EAAE;QACxBM,oBAAoB,CAACvD,YAAY,CAACiD,OAAO,CAAC;MAC5C;IACF;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,MAAM0E,uBAAuB,GAAGA,CAAA,KAAM;IACpC,IAAI,CAACpG,eAAe,IAAI,CAACA,eAAe,CAACF,OAAO,EAAE,OAAO,CAAC,CAAC;;IAE3D;IACA,MAAMuG,WAAW,GAAGrG,eAAe,CAACF,OAAO;;IAE3C;IACA,OAAO;MACLwG,qBAAqB,EAAED,WAAW,CAACE,WAAW,GAAGrH,IAAI,CAACoD,MAAM;MAC5DkE,eAAe,EAAEH,WAAW,CAACI,KAAK,GAAGvH,IAAI,CAACoD,MAAM;MAChDoE,eAAe,EAAEL,WAAW,CAACM,KAAK,GAAGzH,IAAI,CAACoD,MAAM;MAChDsE,gBAAgB,EAAEP,WAAW,CAACQ,MAAM,GAAG3H,IAAI,CAACoD,MAAM;MAClDwE,QAAQ,EAAEtH,WAAW,GAAGE,UAAU;MAClCqH,KAAK,EAAE/G,eAAe,CAAC+E,IAAI,IAAI;IACjC,CAAC;EACH,CAAC;;EAED;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMiC,mBAAmB,GAAIC,KAAK,IAAK;IACrClI,kBAAkB,CAACkI,KAAK,CAACC,MAAM,CAAC/F,KAAK,CAAC;EACxC,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,MAAMgG,gBAAgB,GAAIF,KAAK,IAAK;IAClChI,WAAW,CAACmI,QAAQ,CAACH,KAAK,CAACC,MAAM,CAAC/F,KAAK,EAAE,EAAE,CAAC,CAAC;EAC/C,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMkG,oBAAoB,GAAGA,CAAA,KAAM;IACjC9F,mBAAmB,CAAC,CAAC;EACvB,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,MAAM+F,sBAAsB,GAAIL,KAAK,IAAK;IACxCrI,aAAa,CAACqI,KAAK,CAACC,MAAM,CAAC/F,KAAK,CAAC;;IAEjC;IACAoG,UAAU,CAAC,MAAM;MACf/F,kBAAkB,CAAC,CAAC;IACtB,CAAC,EAAE,CAAC,CAAC;EACP,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,MAAMgG,iBAAiB,GAAIP,KAAK,IAAK;IACnCpH,gBAAgB,CAAC4H,UAAU,CAACR,KAAK,CAACC,MAAM,CAAC/F,KAAK,CAAC,CAAC;EAClD,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,MAAMuG,aAAa,GAAIT,KAAK,IAAK;IAC/B;IACA,IAAIA,KAAK,CAACC,MAAM,KAAKS,QAAQ,CAACC,IAAI,EAAE;IAEpC,QAAQX,KAAK,CAACY,GAAG;MACf,KAAK,GAAG;QACN;QACAZ,KAAK,CAACa,cAAc,CAAC,CAAC;QACtBlC,cAAc,CAAC,CAAC;QAChB;MACF,KAAK,YAAY;QACf;QACAqB,KAAK,CAACa,cAAc,CAAC,CAAC;QACtBlD,YAAY,CAACpF,WAAW,GAAG,CAAC,CAAC;QAC7B;MACF,KAAK,WAAW;QACd;QACAyH,KAAK,CAACa,cAAc,CAAC,CAAC;QACtBlD,YAAY,CAACpF,WAAW,GAAG,CAAC,CAAC;QAC7B;MACF,KAAK,MAAM;QACT;QACAyH,KAAK,CAACa,cAAc,CAAC,CAAC;QACtBlD,YAAY,CAAC,CAAC,CAAC;QACf;MACF,KAAK,KAAK;QACR;QACAqC,KAAK,CAACa,cAAc,CAAC,CAAC;QACtBlD,YAAY,CAAClF,UAAU,GAAG,CAAC,CAAC;QAC5B;MACF;QACE;QACA;IACJ;EACF,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMqI,kBAAkB,GAAGA,CAAA,KAAM;IAC/BpH,mBAAmB,CAAC,CAACD,gBAAgB,CAAC;EACxC,CAAC;;EAED;EACA;EACA;;EAEA;AACF;AACA;AACA;EACE,MAAMsH,2BAA2B,GAAGA,CAAA,KAAM;IACxC,QAAQ5I,cAAc;MACpB,KAAK,MAAM;QACT,oBACErC,KAAA,CAAAkL,aAAA;UAAKC,SAAS,EAAC,4CAA4C;UAAAC,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,gBACzDzL,KAAA,CAAAkL,aAAA;UAAAE,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,GAAI,uBAAyB,CAAC,eAC9BzL,KAAA,CAAAkL,aAAA,CAACxK,cAAc;UACbyC,aAAa,EAAEA,aAAc;UAC7BhC,KAAK,EAAEA,KAAM;UACbC,MAAM,EAAE,GAAI;UAAAgK,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,CACb,CACE,CAAC;MAEV,KAAK,cAAc;QACjB,oBACEzL,KAAA,CAAAkL,aAAA;UAAKC,SAAS,EAAC,oDAAoD;UAAAC,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,gBACjEzL,KAAA,CAAAkL,aAAA;UAAAE,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,GAAI,4BAA8B,CAAC,eACnCzL,KAAA,CAAAkL,aAAA,CAACvK,sBAAsB;UACrB0C,gBAAgB,EAAEA,gBAAiB;UACnClC,KAAK,EAAEA,KAAM;UACbC,MAAM,EAAE,GAAI;UAAAgK,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,CACb,CACE,CAAC;MAEV,KAAK,gBAAgB;QACnB,oBACEzL,KAAA,CAAAkL,aAAA;UAAKC,SAAS,EAAC,sDAAsD;UAAAC,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,gBACnEzL,KAAA,CAAAkL,aAAA;UAAAE,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,GAAI,8BAAgC,CAAC,eACrCzL,KAAA,CAAAkL,aAAA,CAACtK,mBAAmB;UAClB2C,kBAAkB,EAAEA,kBAAmB;UACvCpC,KAAK,EAAEA,KAAM;UACbC,MAAM,EAAE,GAAI;UAAAgK,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,CACb,CACE,CAAC;MAEV,KAAK,WAAW;QACd,oBACEzL,KAAA,CAAAkL,aAAA;UAAKC,SAAS,EAAC,iDAAiD;UAAAC,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,gBAC9DzL,KAAA,CAAAkL,aAAA;UAAAE,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,GAAI,mCAAqC,CAAC,eAC1CzL,KAAA,CAAAkL,aAAA,CAACrK,mBAAmB;UAClB4C,aAAa,EAAEA,aAAc;UAC7BtC,KAAK,EAAEA,KAAM;UACbC,MAAM,EAAE,GAAI;UAAAgK,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,CACb,CACE,CAAC;MAEV;QACE,OAAO,IAAI;IACf;EACF,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAACzI,eAAe,EAAE,OAAO,IAAI;IAEjC,oBACEjD,KAAA,CAAAkL,aAAA;MAAKC,SAAS,EAAC,WAAW;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACxBzL,KAAA,CAAAkL,aAAA;MAAAE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAI,mBAAqB,CAAC,eAC1BzL,KAAA,CAAAkL,aAAA;MAAKC,SAAS,EAAC,cAAc;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAC1BxI,eAAe,CAAC0I,OAAO,IAAI,8BACzB,CAAC,eACN3L,KAAA,CAAAkL,aAAA;MAAKC,SAAS,EAAC,cAAc;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAC3BzL,KAAA,CAAAkL,aAAA;MAAAE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAK,QAAM,eAAAzL,KAAA,CAAAkL,aAAA;MAAMC,SAAS,EAAC,gBAAgB;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAExI,eAAe,CAAC+E,IAAI,IAAI,SAAgB,CAAM,CAAC,EAC3F/E,eAAe,CAACgF,OAAO,iBACtBjI,KAAA,CAAAkL,aAAA;MAAAE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAK,WAAS,eAAAzL,KAAA,CAAAkL,aAAA;MAAMC,SAAS,EAAC,SAAS;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAExI,eAAe,CAACgF,OAAO,CAAC2D,IAAI,CAAC,IAAI,CAAQ,CAAM,CACzF,EACA3I,eAAe,CAACoF,KAAK,KAAKC,SAAS,iBAClCtI,KAAA,CAAAkL,aAAA;MAAAE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAK,SAAO,eAAAzL,KAAA,CAAAkL,aAAA;MAAMC,SAAS,EAAC,OAAO;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAExI,eAAe,CAACoF,KAAY,CAAM,CACxE,EACApF,eAAe,CAACmB,KAAK,KAAKkE,SAAS,iBAClCtI,KAAA,CAAAkL,aAAA;MAAAE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAK,SAAO,eAAAzL,KAAA,CAAAkL,aAAA;MAAMC,SAAS,EAAC,OAAO;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAExI,eAAe,CAACmB,KAAY,CAAM,CAEtE,CACF,CAAC;EAEV,CAAC;;EAED;EACA;EACA;;EAEA,oBACEpE,KAAA,CAAAkL,aAAA;IACEC,SAAS,EAAC,oBAAoB;IAC9BU,SAAS,EAAElB,aAAc;IACzBmB,QAAQ,EAAC,GAAG;IACZ,cAAW,iCAAiC;IAAAV,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAE5CzL,KAAA,CAAAkL,aAAA;IAAKC,SAAS,EAAC,yBAAyB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACtCzL,KAAA,CAAAkL,aAAA;IACEa,GAAG,EAAExK,gBAAiB;IACtBJ,KAAK,EAAEA,KAAM;IACbC,MAAM,EAAEA,MAAO;IACf+J,SAAS,EAAC,sBAAsB;IAChC,cAAW,8BAA8B;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC1C,CAAC,eACFzL,KAAA,CAAAkL,aAAA;IACEa,GAAG,EAAEvK,iBAAkB;IACvBL,KAAK,EAAEA,KAAM;IACbC,MAAM,EAAEA,MAAO;IACf+J,SAAS,EAAC,+BAA+B;IACzC,cAAW,6BAA6B;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACzC,CAAC,EAEDxK,SAAS,iBACRjB,KAAA,CAAAkL,aAAA;IAAKC,SAAS,EAAC,gBAAgB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC7BzL,KAAA,CAAAkL,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAKxK,SAAS,CAAC8C,IAAS,CAAC,eACzB/D,KAAA,CAAAkL,aAAA;IAAKC,SAAS,EAAC,iBAAiB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC9BzL,KAAA,CAAAkL,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAK,QAAM,EAACxK,SAAS,CAAC+K,aAAa,CAAC,CAAC,CAACC,IAAI,CAACC,OAAa,CAAC,eACzDlM,KAAA,CAAAkL,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAK,SAAO,EAACxK,SAAS,CAAC+K,aAAa,CAAC,CAAC,CAACG,KAAK,CAACD,OAAa,CAAC,eAC3DlM,KAAA,CAAAkL,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAK,UAAQ,EAACxK,SAAS,CAACmL,QAAQ,CAAC,CAAC,GAAG,KAAK,GAAG,IAAU,CACpD,CACF,CACN,EAGAnB,2BAA2B,CAAC,CAC1B,CAAC,eAENjL,KAAA,CAAAkL,aAAA;IAAKC,SAAS,EAAC,oBAAoB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACjCzL,KAAA,CAAAkL,aAAA;IAAKC,SAAS,EAAC,mBAAmB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAChCzL,KAAA,CAAAkL,aAAA;IACEmB,OAAO,EAAEA,CAAA,KAAMxE,YAAY,CAAC,CAAC,CAAE;IAC/ByE,QAAQ,EAAE7J,WAAW,KAAK,CAAC,IAAIF,SAAU;IACzC,cAAW,kBAAkB;IAC7BgK,KAAK,EAAC,YAAY;IAAAnB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACnB,oBAEO,CAAC,eACTzL,KAAA,CAAAkL,aAAA;IACEmB,OAAO,EAAEA,CAAA,KAAMxE,YAAY,CAACpF,WAAW,GAAG,CAAC,CAAE;IAC7C6J,QAAQ,EAAE7J,WAAW,KAAK,CAAC,IAAIF,SAAU;IACzC,cAAW,qBAAqB;IAChCgK,KAAK,EAAC,eAAe;IAAAnB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACtB,aAEO,CAAC,eACTzL,KAAA,CAAAkL,aAAA;IACEmB,OAAO,EAAExD,cAAe;IACxB,cAAYtG,SAAS,GAAG,iBAAiB,GAAG,gBAAiB;IAC7DgK,KAAK,EAAEhK,SAAS,GAAG,OAAO,GAAG,MAAO;IAAA6I,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEnClJ,SAAS,GAAG,UAAU,GAAG,SACpB,CAAC,eACTvC,KAAA,CAAAkL,aAAA;IACEmB,OAAO,EAAEA,CAAA,KAAMxE,YAAY,CAACpF,WAAW,GAAG,CAAC,CAAE;IAC7C6J,QAAQ,EAAE7J,WAAW,IAAIE,UAAU,GAAG,CAAC,IAAIJ,SAAU;IACrD,cAAW,iBAAiB;IAC5BgK,KAAK,EAAC,WAAW;IAAAnB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAClB,aAEO,CAAC,eACTzL,KAAA,CAAAkL,aAAA;IACEmB,OAAO,EAAEA,CAAA,KAAMxE,YAAY,CAAClF,UAAU,GAAG,CAAC,CAAE;IAC5C2J,QAAQ,EAAE7J,WAAW,IAAIE,UAAU,GAAG,CAAC,IAAIJ,SAAU;IACrD,cAAW,iBAAiB;IAC5BgK,KAAK,EAAC,WAAW;IAAAnB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAClB,mBAEO,CACL,CAAC,eAENzL,KAAA,CAAAkL,aAAA;IAAKC,SAAS,EAAC,eAAe;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5BzL,KAAA,CAAAkL,aAAA;IAAOsB,OAAO,EAAC,gBAAgB;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,SAAc,CAAC,eAC/CzL,KAAA,CAAAkL,aAAA;IACEuB,EAAE,EAAC,gBAAgB;IACnBzE,IAAI,EAAC,OAAO;IACZtB,GAAG,EAAC,KAAK;IACTC,GAAG,EAAC,IAAI;IACRQ,IAAI,EAAC,KAAK;IACV/C,KAAK,EAAEvB,aAAc;IACrB6J,QAAQ,EAAEjC,iBAAkB;IAC5B6B,QAAQ,EAAE/J,SAAU;IACpB,cAAW,gBAAgB;IAC3BgK,KAAK,EAAE,mBAAmB1J,aAAa,CAAC8J,OAAO,CAAC,CAAC,CAAC,GAAI;IAAAvB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACvD,CAAC,eACFzL,KAAA,CAAAkL,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAO5I,aAAa,CAAC8J,OAAO,CAAC,CAAC,CAAC,EAAC,GAAO,CACpC,CAAC,eAEN3M,KAAA,CAAAkL,aAAA;IAAKC,SAAS,EAAC,oBAAoB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACjCzL,KAAA,CAAAkL,aAAA;IAAKC,SAAS,EAAC,cAAc;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,QACtB,EAAChJ,WAAW,EAAC,KAAG,EAACE,UACpB,CAAC,eACN3C,KAAA,CAAAkL,aAAA;IACE9G,KAAK,EAAE3B,WAAY;IACnBkE,GAAG,EAAEhE,UAAU,IAAI,GAAI;IACvB,cAAY,QAAQF,WAAW,OAAOE,UAAU,EAAG;IAAAyI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACpD,CACE,CAAC,eAENzL,KAAA,CAAAkL,aAAA;IAAKC,SAAS,EAAC,eAAe;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5BzL,KAAA,CAAAkL,aAAA;IAAKC,SAAS,EAAC,eAAe;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5BzL,KAAA,CAAAkL,aAAA;IAAOsB,OAAO,EAAC,WAAW;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,YAAiB,CAAC,eAC7CzL,KAAA,CAAAkL,aAAA;IACEuB,EAAE,EAAC,WAAW;IACdrI,KAAK,EAAErC,eAAgB;IACvB2K,QAAQ,EAAEzC,mBAAoB;IAC9BqC,QAAQ,EAAE/J,SAAU;IACpB,cAAW,+BAA+B;IAAA6I,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEzCtH,SAAS,CAACyI,GAAG,CAACC,GAAG,iBAChB7M,KAAA,CAAAkL,aAAA;IACEJ,GAAG,EAAE+B,GAAG,CAACzI,KAAM;IACfA,KAAK,EAAEyI,GAAG,CAACzI,KAAM;IACjBmI,KAAK,EAAEM,GAAG,CAACvI,WAAY;IAAA8G,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEtBoB,GAAG,CAACxI,KACC,CACT,CACK,CACL,CAAC,eAENrE,KAAA,CAAAkL,aAAA;IAAKC,SAAS,EAAC,eAAe;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5BzL,KAAA,CAAAkL,aAAA;IAAOsB,OAAO,EAAC,WAAW;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,OAAY,CAAC,eACxCzL,KAAA,CAAAkL,aAAA;IACEuB,EAAE,EAAC,WAAW;IACdrI,KAAK,EAAEnC,QAAS;IAChByK,QAAQ,EAAEtC,gBAAiB;IAC3BkC,QAAQ,EAAE/J,SAAU;IACpB,cAAW,kBAAkB;IAAA6I,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAE5BlH,UAAU,CAACqI,GAAG,CAACE,IAAI,iBAClB9M,KAAA,CAAAkL,aAAA;IACEJ,GAAG,EAAEgC,IAAI,CAAC1I,KAAM;IAChBA,KAAK,EAAE0I,IAAI,CAAC1I,KAAM;IAClBmI,KAAK,EAAEO,IAAI,CAACxI,WAAY;IAAA8G,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEvBqB,IAAI,CAACzI,KACA,CACT,CACK,CACL,CAAC,eAENrE,KAAA,CAAAkL,aAAA;IAAKC,SAAS,EAAC,eAAe;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5BzL,KAAA,CAAAkL,aAAA;IAAOsB,OAAO,EAAC,aAAa;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,WAAgB,CAAC,eAC9CzL,KAAA,CAAAkL,aAAA;IACEuB,EAAE,EAAC,aAAa;IAChBrI,KAAK,EAAExC,UAAW;IAClB8K,QAAQ,EAAEnC,sBAAuB;IACjC+B,QAAQ,EAAE/J,SAAU;IACpB,cAAW,uBAAuB;IAAA6I,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAElCzL,KAAA,CAAAkL,aAAA;IAAQ9G,KAAK,EAAC,OAAO;IAAAgH,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,cAAoB,CAAC,eAC3CzL,KAAA,CAAAkL,aAAA;IAAQ9G,KAAK,EAAC,QAAQ;IAAAgH,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,qBAA2B,CAC5C,CACL,CAAC,eAENzL,KAAA,CAAAkL,aAAA;IACEmB,OAAO,EAAE/B,oBAAqB;IAC9BgC,QAAQ,EAAE/J,SAAU;IACpB,cAAW,yCAAyC;IACpDgK,KAAK,EAAC,mBAAmB;IAAAnB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC1B,iBAEO,CACL,CAAC,EAGL1I,OAAO,IAAI8C,MAAM,CAACC,IAAI,CAAC/C,OAAO,CAAC,CAACwC,MAAM,GAAG,CAAC,iBACzCvF,KAAA,CAAAkL,aAAA,CAACpK,cAAc;IACbiC,OAAO,EAAEA,OAAQ;IACjB9B,SAAS,EAAEA,SAAU;IACrBgB,QAAQ,EAAEA,QAAS;IACnB8K,cAAc,EAAE1D,uBAAuB,CAAC,CAAE;IAAA+B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC3C,CACF,EAGAC,cAAc,CAAC,CAAC,eAGjB1L,KAAA,CAAAkL,aAAA;IAAKC,SAAS,EAAC,oBAAoB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACjCzL,KAAA,CAAAkL,aAAA;IACEmB,OAAO,EAAErB,kBAAmB;IAC5BG,SAAS,EAAE,iBAAiBxH,gBAAgB,GAAG,QAAQ,GAAG,EAAE,EAAG;IAC/D,cAAYA,gBAAgB,GAAG,0BAA0B,GAAG,0BAA2B;IACvF,gBAAcA,gBAAiB;IAAAyH,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAE9B9H,gBAAgB,GAAG,mBAAmB,GAAG,mBACpC,CACL,CACF,CAAC,EAGLA,gBAAgB,IAAI1C,SAAS,iBAC5BjB,KAAA,CAAAkL,aAAA,CAACnK,gBAAgB;IACfE,SAAS,EAAEA,SAAU;IACrBwB,WAAW,EAAEQ,eAAgB;IAC7B8J,cAAc,EAAE1D,uBAAuB,CAAC,CAAE;IAAA+B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC3C,CAEA,CAAC;AAEV,CAAC;;AAED;AACA;AACA;;AAEAzK,iBAAiB,CAACgM,SAAS,GAAG;EAC5B;AACF;AACA;EACE/L,SAAS,EAAEX,SAAS,CAAC2M,KAAK,CAAC;IACzBlJ,IAAI,EAAEzD,SAAS,CAAC4M,MAAM,CAACC,UAAU;IACjCnJ,QAAQ,EAAE1D,SAAS,CAAC4M,MAAM,CAACC,UAAU;IACrClG,OAAO,EAAE3G,SAAS,CAAC8M,IAAI,CAACD,UAAU;IAClCnB,aAAa,EAAE1L,SAAS,CAAC8M,IAAI,CAACD,UAAU;IACxCf,QAAQ,EAAE9L,SAAS,CAAC8M,IAAI,CAACD,UAAU;IACnC5F,UAAU,EAAEjH,SAAS,CAAC8M,IAAI,CAACD,UAAU;IACrCjM,OAAO,EAAEZ,SAAS,CAAC+M;EACrB,CAAC,CAAC;EAEF;AACF;AACA;EACEnM,OAAO,EAAEZ,SAAS,CAAC2M,KAAK,CAAC;IACvB9H,WAAW,EAAE7E,SAAS,CAAC4M,MAAM;IAC7B9H,QAAQ,EAAE9E,SAAS,CAACgN,MAAM;IAC1BjI,OAAO,EAAE/E,SAAS,CAACgN,MAAM;IACzBhI,UAAU,EAAEhF,SAAS,CAACgN;EACxB,CAAC,CAAC;EAEF;AACF;AACA;EACEnM,KAAK,EAAEb,SAAS,CAACgN,MAAM;EAEvB;AACF;AACA;EACElM,MAAM,EAAEd,SAAS,CAACgN,MAAM;EAExB;AACF;AACA;EACEjM,sBAAsB,EAAEf,SAAS,CAACiN,IAAI;EAEtC;AACF;AACA;EACEjM,eAAe,EAAEhB,SAAS,CAAC8M;AAC7B,CAAC;AAED,eAAepM,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module"}